{"/get_started/en/more/history.html": {"title": "teedoc update history", "content": "---\ntitle: teedoc update history\nkeywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 写文档, 更新历史\ndesc: teedoc's update history\n---\n\nSee [history.md](https://github.com/teedoc/teedoc/blob/main/history.md)\n\nAll code commit history visit [code commit history](https://github.com/teedoc/teedoc/commits/main)"}, "/get_started/en/more/example_docs/doc2.html": {"title": "TensorFlow Linux GPU + jupyterlab environment installation (Docker) (Ubuntu Deepin Manjaro)", "content": "---\ntitle: TensorFlow Linux GPU + jupyterlab environment installation (Docker) (Ubuntu Deepin Manjaro)\nkeywords: tensorflow gpu jupyterlab docker deepin ubuntu linux environment install NVIDIA driver docker\ndesc: GPU + Docker environment installation under Tensorflow Linux\n\n---\n\n> Copyright statement: This article is neucrack's original article and follows the CC 4.0 BY-SA copyright agreement. Please attach the original source link and this statement for reprinting.\n> Original link: [https://neucrack.com/p/116](https://neucrack.com/p/116)\n\n\n\nUsing docker here, the installation environment is simpler (you only need to install the NVIDIA driver, you don’t need to install cuda, and of course you don’t have to worry about the cuda version) and stable~\nAnd you can run multiple dockers at the same time, such as running multiple jupyterlabs at the same time for different people to use\n\n## Install docker\n\nInstall docker, **version must be 19.03 and above** (you can use `docker --version` to view), if the version is lower than this version, later use of `nvidia-docker` driver will fail and you will be prompted to find it --gpu all` parameter\n\n### Installation\n\n* If it is Manjaro, directly `yay -S docker`\n* Other releases:\n\nSee the official tutorial: https://docs.docker.com/install/linux/docker-ce/debian/\n\n> deepin is based on debian 9.0\n> If it is deepin, you need to modify the unstable in `sudo vim /usr/share/python-apt/templates/Deepin.info` to stable\n> And use the command `sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian stretch stable\"`\n\n### Set up proxy\n\nIf the download is slow, you may need to set up a proxy, or you can use a domestic mirror instead of an official mirror, such as daocloud mirror acceleration\n\nDocker proxy setting reference: https://neucrack.com/p/286\n\nWhen you pull the image, you can set the proxy to make the pull faster. It is recommended to remove the proxy when creating the container\n\n\n### Set the current user can access docker (non-root)\n\nReference here: https://docs.docker.com/install/linux/linux-postinstall/\n\n```\nsudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker # Or restart the terminal, if it does not take effect, you can restart\n```\n\n\n### Common commands\n\n\n`docker images`: list image list\n`docker run [options] image_name [command]`: create a new container from the image\n`docker ps`: running container\n`docker ps -a`: all containers, including those that are not running\n`docker rm container_name`: delete the container\n`docker rmi image_name`: delete image\n`docker start container_name`: start the container\n`docker attatch container_name`: attach to the container\n`docker exec conrainer_name [comand]`: execute commands in the container\n`docker logs container_name`: view container execution log\n\n`docker build -t image_name .`: build an image from Dockerfile\n\n\n### docker run common parameters\n\n`-it`: Enable interactive terminal\n`-rm`: delete in time, do not save the container, that is, delete after exit\n`--gpus all`: enable all GPU support\n`-p port1:port2`: host and container port mapping, port1 is the port of the host\n`-v volume1:volume2`: the disk mapping between the host and the container, volume1 is the folder of the host, such as mapping `/home/${USER}/notes` to `/tf/notes`\n`--name name`: Give the container a name. Without this parameter, the name is randomly generated\n`--device device:container_device`: hang on the device, such as `/dev/ttyUSB0:/dev/ttyUSB0`\n`--network=host`: Use the host's network\n`--restart`: Automatically start, you can use this setting to start automatically, if you forget to run it, you can use `docker update --restart=always container name` to update\n```\nno: Do ​​not restart the container automatically. (default value)\non-failure: The container exits due to an error (the exit status of the container is not 0) restart the container\nunless-stopped: Restart the container when it has been stopped or Docker stopped/restarted\nalways: restart the container when the container has been stopped or Docker stopped/restarted\n```\n\n\n\n## Install graphics card driver\n\nThe graphics card installation part has written an independent article, refer to [Linux Nvidia graphics card installation](https://neucrack.com/p/252)\n\n## Install mirror\n\nRefer to the official document: https://www.tensorflow.org/install/docker\n\nFor example, my Ubuntu here: (Be sure to read the documentation, it may be different, there are updates)\n\n* Install [nvidia-docker](https://github.com/NVIDIA/nvidia-docker)\n\nJust follow the installation guide in the readme, for example, Ubuntu:\n\n```\n# Add the package repositories\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add-\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n```\n\nIf it is deepin, you need to change the system version\n```\ndistribution=\"ubuntu18.04\"\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add-\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n```\n\nIf it is Manjaro, just command `yay -S nvidia-docker`! (If you encounter slow downloads, you can use poipo to set up a global proxy, refer to [Terminal proxy setting method](https://neucrack.com/p/275))\n\n* Test whether nvidia-docker and cuda can be used\n\nUse the image of `nvidia/cuda`, this image is just for testing, you can delete it when you use it up, if you don’t have a proxy set up, and you don’t want to spend too much time pulling the image, you can use this image directly instead of `tensorflow/tensorflow:latest -gpu-py3` this mirror or `neucrack/tensorflow-gpu-py3-jupyterlab` (or `daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab`) this mirror (recommended) (jupyterlab is installed on the basis of the former , And do better user rights management)\n\n```\nlspci | grep -i nvidia\ndocker run --gpus all --rm nvidia/cuda nvidia-smi\n```\n\nsuch as:\n```\n➜ ~ sudo docker run --gpus all --rm nvidia/cuda nvidia-smi\nTue Mar 10 15:57:12 2020\n+------------------------------------------------- ----------------------------+\n| NVIDIA-SMI 440.64 Driver Version: 440.64 CUDA Version: 10.2 |\n|-------------------------------+----------------- -----+----------------------+\n| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC |\n| Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. |\n|===============================+================= =====+======================|\n| 0 GeForce GTX 106... Off | 00000000:01:00.0 On | N/A |\n| 33% 39C P0 27W / 120W | 310MiB / 6075MiB | 0% Default |\n+-------------------------------+----------------- -----+----------------------+\n                                                                               \n+------------------------------------------------- ----------------------------+\n| Processes: GPU Memory |\n| GPU PID Type Process name Usage |\n|================================================ ============================|\n+------------------------------------------------- ----------------------------+\n\n```\n\n```\nWed Mar 11 02:04:26 2020\n+------------------------------------------------- ----------------------------+\n| NVIDIA-SMI 430.40 Driver Version: 430.40 CUDA Version: 10.1 |\n|-------------------------------+----------------- -----+----------------------+\n| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC |\n| Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. |\n|===============================+================= =====+======================|\n| 0 GeForce GTX 108... Off | 00000000:04:00.0 Off | N/A |\n| 35% 41C P5 25W / 250W | 0MiB / 11178MiB | 0% Default |\n+-------------------------------+----------------- -----+----------------------+\n| 1 GeForce GTX 108... Off | 00000000:81:00.0 Off | N/A |\n| 39% 36C P5 19W / 250W | 0MiB / 11178MiB | 2% Default |\n+-------------------------------+----------------- -----+----------------------+\n                                                                               \n+------------------------------------------------- ----------------------------+\n| Processes: GPU Memory |\n| GPU PID Type Process name Usage |\n|================================================ ============================|\n| No running processes found |\n+------------------------------------------------- ----------------------------+\n```\n\nIf the driver version is too low, there will be a prompt to update the driver\n\nAt the same time, notice that the cuda version is 10.2, maybe tensorflow only supports 10.1. If tensorflow is installed directly on the host, it will report an error and not support. The benefits of using docker here are reflected. Don’t bother, just make sure that the driver is installed. Up\n\nDeepin has an error\n```\ndocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout:, stderr: nvidia-container-cli: ldcache error: open failed: /sbin/ldconfig.real: no such file or directory\\\\\\\\n\\\\\\\"\\\"\": unknown .\n```\nRefer to the solution here: https://github.com/NVIDIA/nvidia-docker/issues/614 to solve:\n```\nln -s /sbin/ldconfig /sbin/ldconfig.real\n```\n\ndocker error: `nvidia-container-cli: initialization error: cuda error: unknown error`\nRestart the system to be resolved\n\n## Run tensorflow with GPU\n\n\nPull the mirror, pull directly\n```\ndocker pull neucrack/tensorflow-gpu-py3-jupyterlab\n# docker pull tensorflow/tensorflow:latest-gpu-py3-jupyter\n# docker pull tensorflow/tensorflow\n# docker pull tensorflow/tensorflow:latest-gpu\n```\nThe image on daocloud can be used in China, and the speed will be faster:\n```\ndocker pull daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab\n```\n\nExecute the test statement:\n```\ndocker run --gpus all -it --rm neucrack/tensorflow-gpu-py3-jupyterlab python -c \"import tensorflow as tf; print('-----version:{}, gpu:{}, 1+2 ={}'.format(tf.__version__, tf.test.is_gpu_available(), tf.add(1, 2).numpy()) );\"\n```\n> If daocloud is used, the image name needs to be changed to `daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab`\n\nIf there is no problem, the following output will appear (it will be accompanied by a lot of debugging information and there may be warning messages, you can take a closer look):\n```\n-----version:2.1.0, gpu:True, 1+2=3\n```\n\n## Jupyterlab\n\n```\ndocker run --gpus all --name jupyterlab-gpu -it -p 8889:8889 -e USER_NAME=$USER -e USER_ID=`id -u $USER` -e GROUP_NAME=`id -gn $USER` -e GROUP_ID =`id -g $USER` -v /home/${USER}:/tf neucrack/tensorflow-gpu-py3-jupyterlab\n```\n> If daocloud is used, the image name needs to be changed to `daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab`\n\n\nThen you can use the browser to use `jupyterlab` at the address of `http://127.0.0.1:8889/`, and the directory corresponds to the set `/home/${USER}` directory\n\n![jupyterlab](../../../assets/images/jupyterlab.jpg)\n![jupyterlab.png](../../../assets/images/jupyterlab_1.jpg)\n\n\nExit directly with `Ctrl+C`\nThis container will always exist on the computer after it is created, you can use `docker ps -a` to view it, and use it next time you start it\n```\ndocker start jupyterlab_gpu\n```\nCan also be attached to the container:\n```\ndocker attatch jupyterlab_gpu\n```\nStop the container:\n```\ndocker stop jupyterlab_gpu\n```\n\nDelete the container:\n```\ndocker rm jupyterlab_gpu\n```\n\nModify the user and root passwords so that you can use the `sudo` command\n```\ndocker exec -it jupyterlab_gpu /bin/bash\npasswd $USER\npasswd root\n```\n\n\nIf you need to create a new container every time and delete it when you use it up, you only need to add a `-rm` parameter after the `run` command\n\n## other questions\n\n* Prompt when running the program: ResourceExhaustedError: OOM when allocating tensor with shape[784,128]\n\nUse `nvidia-smi` to view memory usage\n\ntensorflow will apply for (almost) all video memory at once:\n\n```\n➜ ~ nvidia-smi\nFri Mar 20 09:18:48 2020\n+------------------------------------------------- ----------------------------+\n| NVIDIA-SMI 435.21 Driver Version: 435.21 CUDA Version: 10.1 |\n|-------------------------------+----------------- -----+----------------------+\n| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC |\n| Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. |\n|===============================+================= =====+======================|\n| 0 GeForce GTX 108... Off | 00000000:04:00.0 On | N/A |\n| 0% 48C P2 60W / 250W | 10726MiB / 11178MiB | 0% Default |\n+-------------------------------+----------------- -----+----------------------+\n| 1 GeForce GTX 108... Off | 00000000:81:00.0 Off | N/A |\n| 0% 47C P2 58W / 250W | 197MiB / 11178MiB | 0% Default |\n+-------------------------------+----------------- -----+----------------------+\n                                                                               \n+------------------------------------------------- ----------------------------+\n| Processes: GPU Memory |\n| GPU PID Type Process name Usage |\n|================================================ ============================|\n| 0 3099 G /usr/lib/xorg/Xorg 21MiB |\n| 0 40037 C /usr/bin/python3 10693MiB |\n| 1 40037 C /usr/bin/python3 185MiB |\n+------------------------------------------------- ----------------------------+\n\n```\n\nThere may be too many processes using video memory, and some processes can be properly exited;\nIt is also possible that the memory application is repeated, you can try to restart the container to solve it\n\n* Has been running without results\n\nRestart the docker container to solve it. Anyway, if something is indecisive, restart to solve it. .\n\n* Prompt `could not retrieve CUDA device count: CUDA_ERROR_NOT_INITIALIZED`\n\nMulti-process may be used. The new process directly copies the environment of the current process, resulting in an error. The solution is ** the parent process needs to be imported**, which is imported separately when needed in the child process, instead of writing to the global, reference Here: https://abcdabcd987.com/python-multiprocessing/\n\n* `ImportError: libGL.so.1: cannot open shared object file: No such file or directory`\n\n```\napt install libgl1-mesa-glx\n```\n\n* `Failed to get convolution algorithm. This is probably because cuDNN failed to initialize`\n\nThe graphics card memory is insufficient. Check if it is occupied by other programs. If there are multiple graphics cards, you can set the environment variable `CUDA_VISIBLE_DEVICES` to set the graphics card to be used. For example, there are three graphics cards, the subscripts are `0`, `1` , `2`, select the third card and set it to `2`\n\n```python\nimport os\n\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '2'\n\n```\n\n\n## Reference\n\n* [https://blog.csdn.net/liuzk2014/article/details/83190267](https://blog.csdn.net/liuzk2014/article/details/83190267)\n* https://devtalk.nvidia.com/default/topic/1047416/linux/nvidia-driver-is-not-loaded-ubuntu-18-10-/\n\n* https://github.com/tensorflow/tensorflow/issues/394"}, "/get_started/en/more/example_docs/heading_no_counter.html": {"title": "The title of the article is not automatically numbered", "content": "---\ntitle: The title of the article is not automatically numbered\nkeywords: teedoc title automatically adds serial number, teedoc title automatically adds number, teedoc automatic number\ndesc: By default, teedoc will automatically number the three-level headings. You can cancel the automatic numbering by setting the class to heading_no_counter\nauthor: neucrack\ndate: 2021-10-10\nclass: heading_no_counter\n---\n\n\nBy default, teedoc will automatically number the three-level headings. Sometimes your article may not want to automatically number the headings.\n\nAdd `class` to `heading_no_counter` at the beginning of `metadata` of the `md` file, for example\n```\n---\ntitle: The title of the article is not automatically numbered\nclass: heading_no_counter\n---\n```\n\n\n\n\n# 2021/10/1\n\n## Activity\n\n\n### Caught a fish\n\n* Digged an earthworm\n* Cut a small golden bamboo to make a fishing rod\n* Catch 10 small fish\n* The big fish is hooked and the rod is caught\n\n\n\n### delicacy\n\nFried small crucian carp\n\n\n\n## Summarize\n\nAh~ Motherland\n\nAh~ life\n\n\n# 2021/10/2\n\n## Activity\n\nLie flat"}, "/get_started/en/more/example_docs/multi_h1.html": {"title": "This is an article with multiple first-level titles (h1)", "content": "---\ntitle: This is an article with multiple first-level titles (h1)\nkeywords: teedoc first level heading\ndesc: There is usually only one first-level heading (h1) in the page, if you must use multiple first-level headings, the effect is what this page looks like\nauthor: fzj\ndate: 2021-10-10\n# class: heading_no_counter\n---\n\n\n# 2021/10/1\n\n## Activity\n\n\n### Caught a fish\n\n* Digged an earthworm\n* Cut a small golden bamboo to make a fishing rod\n* Catch 10 small fish\n* The big fish is hooked and the rod is caught\n\n\n\n### delicacy\n\nFried small crucian carp\n\n\n\n## Summarize\n\nAh~ Motherland\n\nAh~ life\n\n\n# 2021/10/2\n\n## Activity\n\nLie flat\nLie flat\n\nLie flat\nLie flat\nLie flat\n\nLie flat"}, "/get_started/en/more/example_docs/doc1.html": {"title": "", "content": ""}, "/get_started/en/install/index.html": {"title": "teedoc installation and use", "content": "---\ntitle: teedoc installation and use\nkeywords: teedoc, markdown, jupyter notebook, html, document generation, alternative gitbook, website generation, static website, installation, use\ndesc: teedoc, which converts markdown or jupyter notbook into html static web pages, introduces the use of teedoc\n---\n\n\n## Install python3\n\nNeed to install `Python3` first (only support `Python3`)\n\nFor example, on `Ubuntu`:\n```shell\nsudo apt install python3 python3-pip git\n```\n\n`Windows` and `macOS` please go to [Official Website Download](https://www.python.org/downloads/)\n\n\n\n## Install teedoc\n\nOpen the terminal and enter:\n\n```shell\npip3 install teedoc\n```\n\nLater use the following command to update the software:\n```shell\npip3 install teedoc --upgrade\n```\n\n> If your network uses `pypi.org` and the speed is very slow, you can choose other sources, such as Tsinghua tuna source: `pip3 install teedoc -i https://pypi.tuna.tsinghua.edu.cn/simple`\n\nNow you can use the `teedoc` command in the terminal\n\nIf not, please check if the `Python` executable directory is not added to the environment variable `PATH`,\nFor example, it may be in `~/.local/bin`\n\n\n## New Project\n\nCreate an empty directory to store the document project\n\n```shell\nmkdir my_site\ncd my_site\nteedoc init\n```\n\nor\n\n```shell\nteedoc -d my_site init\n```\n\nSelect `1`, which is the `minimal` template to generate, or you can directly generate it with `teedoc -d my_site --template=minimal init`\n\nThis will automatically generate some basic files in the `my_site` directory\n\n\nIn addition, in addition to using the `init` command to generate a minimal project, you can also get a source code of the official website document and modify it based on the content of this document\n```shell\ngit clone https://github.com/teedoc/teedoc.github.io my_site\n```\nor\n```shell\ngit clone https://gitee.com/teedoc/teedoc.gitee.io my_site\n```\n\n## Install plugin\n\nThis will install the plugin according to the plugin settings of `plugins` in `site_config.json`\n\n```shell\ncd my_site\nteedoc install\n```\n\n> The plug-in is also released in the form of `python` package, so this will download the corresponding plug-in from `pypi.org`. Similarly, other sources can also be used, such as Tsinghua tuna source: `teedoc -i https://pypi. tuna.tsinghua.edu.cn/simple install`\n\n## Build an `HTML` page and start an `HTTP` service\n\n```shell\nteedoc serve\n```\n\nThis command will first build all `HTML` pages and copy resource files, and then start an `HTTP` service\nIf you only need to generate pages, use\n\n```shell\nteedoc build\n```\n\n\nAfter displaying `Starting server at 0.0.0.0:2333 ....`, it is fine\n\nOpen the browser to visit: [http://127.0.0.1:2333](http://127.0.0.1:2333)\n\n\nAt the same time, you can see that there is an additional `out` directory under the directory, which is the generated static website content, directly copy it to the server and use `nginx` or `apache` for deployment.\n\n\n## Create a new repository based on the template repository on github and use the pages service to quickly create a website\n\nUsing the teedoc official website template and the github pages function, you can quickly create a website of your own. You don't need to build and maintain your own server, you don't need to deploy an HTTPS certificate yourself, and you don't need any key configuration. It can be completed in 3 minutes.\n\nHowever, the github pages service also has disadvantages, that is, some domestic network lines in China may not be accessible.\n\n### Create a repository based on a template\n\n* Visit [https://github.com/teedoc/template](https://github.com/teedoc/template) or [https://github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io), click `Use this template`\n\n![github use template](../../assets/images/github_use_template.jpg)\n\n\n* Set the name of the new repository to `username or organization name.github.io`, select the public repository, and then confirm the submission\n![create repo](../../assets/images/create_repo.jpg)\n\n> Then use `git clone your repository address` to clone to the local\n\n### Set up pages service\n\n* Wait for the automatic build to generate a new branch `gh-pages`, you can click on the `Actions` column to view the progress of the automatic build, if a green tick appears, it means it is OK, if a red cross appears, the build fails Yes, where is the problem, you can click in to view the log according to the screenshot method below (you must submit a screenshot of the log) and submit [issue](https://github.com/teedoc/teedoc.github.io/issues/ new) feedback\n\n![action status](../../assets/images/action_status.jpg)\n\nIf there is an error, you can click to view the error log according to the following figure:\n![error0](../../assets/images/action_error.jpg)\n![error](../../assets/images/action_error_log.jpg)\n\n* Set the `pages` service of the repository and select the `gh-pages` branch. If there is no such branch, the previous step has not been completed or an error occurred. You can view the issue submission [issue](https://github.com/ teedoc/teedoc.github.io/issues/new) feedback\n![pages](../../assets/images/pages_settings.jpg)\n\n* Then visit `username or organization name.github.io`, you will find a webpage, the content is exactly the same as `teedoc.github.io`!"}, "/get_started/en/plugins/others.html": {"title": "teedoc other plugins", "content": "---\ntitle: teedoc other plugins\nkeywords: teedoc, theme plugin, themes, plugin\ndesc: teedoc other plugins\n---\n\n## `teedoc-plugin-markdown-parser`: default markdown parsing plugin\n\nConfigure the plugin in `site_config.json`\n```json\n    \"plugins\": {\n        \"teedoc-plugin-markdown-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"parse_files\": [\"md\"],\n                \"mermaid\": true,\n                \"mermaid_use_cdn\": false,\n                \"mermaid_cdn_url\": \"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\",\n                \"mathjax\": {\n                    \"enable\": true,\n                    \"file_name\": \"tex-mml-chtml\",\n                    \"config\": {\n                        \"loader\": {\n                            \"load\": [\"output/svg\"]\n                        },\n                        \"tex\": {\n                            \"inlineMath\": [[\"$\", \"$\"], [\"\\\\(\", \"\\\\)\"]]\n                        },\n                        \"svg\": {\n                            \"fontCache\": \"global\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n```\n\n* `parse_files`: File formats involved in parsing\n* `mermaid`: Enable mermaid plugin\n* `mermaid_use_cdn`: Use CDN for mermaid\n* `mermaid_cdn_url`: CDN url for mermaid, only used when `mermaid_use_cdn` is `true`\n* `mathjax`: Mathematical formula rendering support\n   * `enable`: Whether to enable\n   * `file_name`: `js` file name, which defines the default functions, the default is `tex-mml-chtml`, [reference here](http://docs.mathjax.org/en/latest/web/components/ index.html)\n   * `config`: `mathjax` configuration, [mathjax](https://www.mathjax.org/) configuration, see [here](http://docs.mathjax.org/en/latest for specific configuration items /web/configuration.html)\n\n## `teedoc-plugin-jupyter-notebook-parser`: jupyter notebook parsing plugin\n\nConfigure the plugin in `site_config.json`\n```json\n    \"plugins\": {\n        \"teedoc-plugin-jupyter-notebook-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        }\n    }\n```\n\n## `teedoc-plugin-search`: Website search plugin\n\nLet the website and documents support the search function, support the searched current document and the whole site search\n\nTo use, add to the `plugins` keyword in `site_config.json`:\n```json\n\"plugins\": {\n    \"teedoc-plugin-search\":{\n        \"from\": \"pypi\",\n        \"config\": {\n            \"search_hint\": \"Search\",\n            \"env\": {\n                \"main_color\": \"#4caf7d\",\n                \"main_color_dark\": \"#1b4c33\",\n                \"hint_shadow_color\": \"rgba(76, 175, 125, 0.38)\"\n            }\n        }\n    }\n}\n```\n\n\nThe prompt content of different documents can be configured in the corresponding document `config.json` to facilitate multi-language support (internationalization/i18n). Of course, the plugin supports `Chinese`, `English` and `Japanese` by default, the translation is [here](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-search/teedoc_plugin_search/locales), when it is not found by default, `English` will be used. Manually setting the following variables will overwrite the translation that comes with the plug-in\n\nThe supported configurations are as follows:\n\n```json\n\"teedoc-plugin-search\":{\n    \"config\": {\n        \"search_hint\": \"Search\",\n        \"input_hint\": \"Enter keywords, separate multiple keywords with spaces\",\n        \"loading_hint\": \"Loading, please wait...\",\n        \"download_err_hint\": \"Failed to download the file, please refresh and try again or check the network\",\n        \"other_docs_result_hint\": \"Results from other documents\",\n        \"curr_doc_result_hint\": \"Current document search result\"\n    }\n}\n```\n\n* `search_hint`: the prompt message of the search box (button), the default is `Search`\n* `input_hint`: input hint information in the search box of the search page, default `Keywords separated by space`\n* `loading_hint`: Load the file prompt for searching, the default is `Loading, wait please ...`\n* `download_err_hint`: The download of the file required for the search fails, the user needs to refresh the browser to try again or the network environment cannot download the file, the default is `Download error, please check network and refresh again`\n* `other_docs_result_hint`: search result hint, search result in other documents, default `Result from other docs`\n* `curr_doc_result_hint`: search result hint, the search result in the currently browsed document, default `Result from current doc`\n* `env`: Replace some colors, including\n   * `main_color`: main color, default `\"#4caf7d\"`\n   * `main_color_dark`: main color of black theme, default `\"#1b4c33\"`\n   * `hint_shadow_color`: shadow color, default `rgba(76, 175, 125, 0.38)`\n\n## `teedoc-plugin-baidu-tongji`: Baidu Analytics\n\nAdd the code of [Baidu Analytics](https://tongji.baidu.com/) on each page, send the visit information to Baidu, and you can see the visit statistics in the background\n\nAfter registering and logging in to Baidu Statistics, add a website on the management page, and then there will be a code acquisition page with the following code\n```js\n<script>\nvar _hmt = _hmt || [];\n(function() {\n  var hm = document.createElement(\"script\");\n  hm.src = \"https://hm.baidu.com/hm.js?90c693aa2************c14a50bb49\";\n  var s = document.getElementsByTagName(\"script\")[0];\n  s.parentNode.insertBefore(hm, s);\n})();\n</script>\n```\n\nHere is a string of keys `90c693aa2************c14a50bb49`, copy this string of keys, and then add to the `plugins` keyword in `site_config.json`:\n```json\n\"plugins\": {\n    \"teedoc-plugin-baidu-tongji\":{\n        \"from\": \"pypi\",\n        \"config\": {\n            \"code\": \"Fill in the access key here\"\n        }\n    }\n}\n```\n\nAfter the website is deployed, you can see the visit information on the real-time visitor page of the Baidu statistics background\n\n\n## `teedoc-plugin-google-analytics`: Google Analytics\n\nAdd the code of [Google Analytics](https://analytics.google.com/) on each page, send the visit information to Google, and you can see the visit statistics in the background\n\nAfter registering and logging in to Google Analytics, add a website on the management page, and then there will be an `ID` starting with `UA-` or `G-`, such as `UA-123456789-1` or `G-AABBCCDDJJOOKK`\n\nThen add in the `plugins` keyword in `site_config.json`:\n```json\n\"plugins\": {\n     \"teedoc-plugin-google-analytics\":{\n         \"from\": \"pypi\",\n         \"config\": {\n             \"id\": \"Fill in the resource ID here\"\n         }\n     }\n}\n```\n\n## `teedoc-plugin-comments-gitalk`: gitalk comment plugin\n\n[gitalk](https://github.com/gitalk/gitalk) is a comment tool based on the `github` `issue` question and answer system. Using `gitalk`, you don’t need to build your own server, you only need to register a `github` account , All the data will be put on the `issue` of a repository of `github`.\n\n> If you encounter a problem, [here](https://github.com/gitalk/gitalk/wiki/Q&A) may have the answer you want\n\n### Config github\n\nGo to [github developers settings](https://github.com/settings/developers),\n* Add one Oauth Apps\n* Then generate secrets, we got client ID and secrets\n* Fill in `Homepage URL` with url, e.g. `https://teedoc.github.io`\n* Fill in `Authorization callback URL` with `https://teedoc.github.io/`\n\n\n### Config doc\n\nTo use it, you need to add a plug-in in the `site_config` file\n```json\n    \"teedoc-plugin-gitalk\": {\n        \"from\": \"pypi\",\n        \"config\": {\n            \"contrainer\": \"comments-container\",\n            \"env\": {\n                \"clientID\": \"********\",\n                \"clientSecret\": \"********\",\n                \"repo\": \"repo name\",\n                \"owner\": \"orgnization name or user name\",\n                \"admin\": [\"user names have write access\"]\n            }\n        }\n    }\n```\n\n* `contrainer`: The container tag `id` that contains the comments, the default is `comments-container`, the document page and blog page in the `teedoc-plugin-theme-default` plugin contain this tag\n* `env`: `gitalk` js plugin configuration items, see [here](https://github.com/gitalk/gitalk#options) for more parameters.\n  * `clientID` and `clientSecret`: You need to create a new application in [github application](https://github.com/settings/applications/new) to get `ID` and `Secret`\n  * `repo` and `owner`: are the name and owner of the repository, for example, [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) is used here `issue` as a comment system, just fill in `teedoc.github.io` and `teedoc`\n  * `admin`: is the name of the user who has write access to this repository\n  * `adminAutoCreate`: Automatically create issue when first time administrator visit page or not\n  * `main_color`: the main appearance color of comments, optional\n  * `second_color`: the secondary appearance color of comments, optional\n\n\n~~**To open a comment on each page, the administrator needs to log in to `gitalk` to access the page, `gitalk` will automatically create an issue, and add the label `Gitalk` and the label `url path`, (the path characters are `50` characters in length limit).** Of course, there are also methods for batch creation, which are not introduced here, and you can explore it yourself.~~ Now issue can be created automatically\n\n\nYou can also manually create `issue` and specify the label `Gitalk` of `issue` (the first letter is capitalized), and then add another label `page url path` or `custom id` (the label is custom `id` then Need to set the page `id` on the page using this `issue`)\n\nIn addition to setting the `env` parameter in `site_config`, it can also be set in the article's `metadata`. Add a `gitalk-` prefix in front of the setting. For example, to set the `title` of the `issue` generated by `gitalk`, just You can set `gitalk-title`. Here are a few examples:\n\n* If you create an issue manually, you can specify the issue for a page, and specify the issue number in the metadata for the article\n\n```markdown\n---\ntitle: *****\ngitalk-number: 2\n---\n```\n\n* Or create an issue manually first, specify the use of the specific label issue on the page, you can take a look at [official example](https://github.com/gitalk/gitalk/issues/1)\n\n\n```markdown\n---\ntitle: *****\nid: Demo\n---\n```\n\nor\n\n```markdown\n---\ntitle: *****\ngitalk-id: Demo\n---\n```\n\n## `teedoc-plugin-assets`: assets add plugin\n\nYou can freely add resources to the page through this plug-in, such as `css` and `js` resource files\n\nFor example, the path mapping of resource files has been added, and there are two files `/static/css/custom.css` and `/static/css/custom.js`, which need to be added to the head and tail of the page respectively.\nAt the same time, I also hope to add a `meta` tag to the head\n\n`site_config.json`:\n\n```json\n{\n    \"route\": {\n            \"assets\": {\n                \"/static/\": \"static\",\n            },\n        },\n    \"plugins\": {\n        \"teedoc-plugin-assets\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"header_items\": [\n                    \"/static/css/custom.css\",\n                    \"<meta name=\\\"plugin-assets\\\" content=\\\"example meta item\\\">\"\n                ],\n                \"footer_items\": [\n                    \"/static/css/custom.js\"\n                ],\n                \"env\":{\n                    \"main_color\": \"#000000\"\n                }\n            }\n        },\n    }\n}\n```\nFor `css` and `js` files, you can write `url` directly like this, or you can write a link at the beginning of `http`.\n\nHere the variables in `env` will be replaced in the resource file, and used in the resource file by `${variable name}`\n\n`custom.css`:\n\n```css\na {\n    color: ${main_color}\n}\n```\n\n\n## `teedoc-plugin-google-translate`: Google page translation plugin\n\nThe function is the same as that of the right mouse button of `Chrome` to translate this page\n\nBefore translation:\n\n![google translate](../../assets/images/google_translate0.png)\n\nAfter translation:\n\n![google translate](../../assets/images/google_translate.png)\n\n\n\n```json\n\"config\": {\n    \"lang\": \"auto\",\n    \"doc_types\": [\"page\", \"doc\", \"blog\"],\n    \"domain\": \"/\"\n}\n```\n\n* `lang`: The language of the page that needs to be translated. By default, it is not recommended to set it, or set it to the same `locale` of the document. For example, if `locale` is `zh_CN`, this can be set to `zh-CN `\n* `doc_types`: Which types of document pages should be displayed, 0 to 3 of `[\"page\", \"doc\", \"blog\"]`,\n* `domain`: From which URL to download the source code of `google translate`, the default is `\"/\"`, which means to download from this website, it can also be set to `translate.google.com` or `translate.google.cn`\n> Mainly considering that some files cannot be downloaded without a proxy in China, it is actually necessary to request `translate.googleapis.com`. When making the plug-in, I found that even if it is set to `translate.google.cn`, there is a ` The js` file requested a `cleardot.gif` file under the domain name of `google.com`, which caused the network request to be stuck for a long time until it timed out to load the translation, so the `js` file (`element_main.js`) was modified and Put it locally so that it can be accessed quickly.\n> But this is also risky. Because the code and the code of the `Google` server are separated, in case `Google` updates the code one day, we also need to update it manually (although it will not change with a high probability), then welcome to update and modify. Submit PR\n\n\n## `teedoc-plugin-ad-hint`: Global tips for advertisements or important news\n\nEffect:\n\n![hint](../../assets/images/hint.jpg)\n\nuse:\n\nAdd plugin in `site_config`\n\n```json\n\"plugins\": {\n     \"teedoc-plugin-ad-hint\": {\n         \"from\": \"pypi\",\n         \"config\": {\n             \"type\": \"hint\",\n             \"label\": \"☆\",\n             \"content\": \"content\",\n             \"show_after_s\": 432000\n         }\n     }\n}\n```\n\nConfiguration: The default configuration code is [here](https://github.com/teedoc/teedoc/blob/e909be61546e3817b872bd5005b9b867c6843e60/plugins/teedoc-plugin-ad-hint/teedoc_plugin_ad_hint/__init__.py#L22)\n\n* `type`: default `\"hint\"`, currently only supports `hint`\n* `label`: By default `\"New\"`, a label will be automatically added to the navigation bar, click to display the top prompt content, here set the content displayed by the label\n* `content`: default `\"\"`, content, the content of the `hint` category will be displayed at the top\n* `show_times`: default `2`, set how many times the user visits the page, the prompt will not be displayed automatically, if the value is `<= 0`, it will always be displayed\n* `show_after_s`: default `432000`, set the time to be automatically displayed next time, the unit is seconds, the default is `5` days\n* `date`: default `null`, hint message's update date time, if hint content is updated, set this to make hint auto show, format:`2021-11-07 14:23:00`, if date set `>` now time, the hint will always auto show\n* `color`: default `\"#a0421d\"`, font color\n* `link_color`: default `\"#e53935\"`, link (`<a>` tag) font color\n* `link_bg_color`: default `\"#e6ae5c\"`, link (`<a>` tag) background color\n* `bg_color`: default `\"#ffcf89\"`, background color\n* `color_hover`: default `\"white\"`, the font color when hovering the mouse\n* `bg_color_hover`: default `\"#f57c00\"`, the background color when the mouse is hovering\n* `close_color`: default `\"#eab971\"`, close button background color\n\n### i18n\n\nIf the document has multiple languages, you can configure the plugin in `site_config`:\n```json\n\"plugins\": {\n     \"teedoc-plugin-ad-hint\": {\n         \"from\": \"pypi\",\n         \"config\": {\n             \"type\": \"hint\",\n             \"label\": \"☆\",\n             \"content\": \"content\",\n             \"show_after_s\": 432000\n         }\n     }\n}\n```\n\nThen overwrite the settings in the document `config` in different languages\n```json\n\"plugins\": {\n     \"teedoc-plugin-ad-hint\": {\n         \"config\": {\n             \"label\": \"🦀\",\n             \"content\": \"Content, support html syntax, do not use English single quotes\",\n         }\n     }\n}\n```\n\nTry to use the same `config` template file for documents in the same language. In the specific document `config`, `import` makes it easier to configure\n\n\n## `teedoc-plugin-thumbs-up`: thumbs up plugin\n\nWith this plugin, you can display the like button on the page, and you can count the number of likes. The effect is as follows\n![thumbs_up.png](../../assets/images/thumbs_up.png)\n\n### Basic usage\n\nAdd the plugin in `site_config`:\n```json\n\"plugins\": {\n    \"teedoc-plugin-thumbs-up\": {\n        \"from\": \"pypi\",\n        \"config\": {\n            \"url\": \"https://xxxx.xxxx.com:80\",\n            \"show_up_count\": true,\n            \"show_down_count\": false\n        }\n    }\n}\n```\n\nIt should be noted that because the web page is a purely static page, the use of this plug-in needs to be used with the server, and the statistical information is stored on the server.\n\nThe server uses the `pip install teedoc-plugin-thumbs-up` command to install the plugin and then use the `teedoc-thumbs-up-server` command to run the service. You can use the `--port` parameter to specify the port, and more parameters use `teedoc' -thumbs-up-server --help`View\n> It is recommended to proxy this service with a proxy server such as nginx.\n> In addition, if your website is https protocol, then this service also needs to be https service, you can apply for a free certificate and configure it with nginx\n\nIt should be noted that this service is just a simple routine and does not fully guarantee the security of the service. It is recommended to read the server code carefully to modify and customize your own server script. Code: [teedoc-plugin-thumbs-up/server](https ://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-thumbs-up/server)\n\n### i18n\n\nLike other plugins, override the settings in the document `config` in different languages. For parameters, see [Plugin Source Default Configuration](https://github.com/teedoc/teedoc/blob/a8b93a4f29330b018c2e38589786b33d00854309/plugins/teedoc-plugin-thumbs- up/teedoc_plugin_thumbs_up/__init__.py#L24)\n```json\n\"plugins\": {\n    \"teedoc-plugin-thumbs-up\": {\n        \"config\": {\n            \"label_up\": \"Helpful\",\n            \"label_down\": \"Not helpful\",\n            \"msg_already_voted\": \"You have already voted\",\n            \"msg_thanks\": \"Thanks for your feedback\",\n            \"msg_down_prompt\": \"Thanks for the feedback, please tell us where we can improve? (minimum 10 words)\",\n            \"msg_down_prompt_error\": \"Message requires a minimum of 10 words and a maximum of 256 words\",\n            \"msg_error\": \"There was an error requesting the server!\"\n        }\n    }\n}\n```"}, "/get_started/en/plugins/themes.html": {"title": "teedoc theme plugin", "content": "---\ntitle: teedoc theme plugin\nkeywords: teedoc, theme plugin, themes, plugin\ndesc: teedoc theme plugin\n---\n\n\n## `teedoc-plugin-theme-default`: default theme plugin\n\n\n### Plugin configuration\n\nConfigure the plugin in `site_config.json`\n```json\n    \"plugins\": {\n        \"teedoc-plugin-theme-default\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"dark\": true,\n                \"default_dark\": false,\n                \"mobile_navbar_collapsed\": true,\n                \"toc_depth\": 4,\n                \"env\":{\n                    \"main_color\": \"#4caf7d\",\n                    \"sidebar_width\": \"300px\"\n                },\n                \"css\": \"/static/css/custom.css\",\n                \"js\": \"/static/js/custom.js\",\n                \"code_highlight_css\":  \"/static/css/prism.css\",\n                \"code_highlight_js\": \"/static/js/prism.js\"\n            }\n        }\n    }\n```\n\n* `dark`: support dark mode switch\n* `default_dark`: default use dark mode\n* `mobile_navbar_collapsed`: collapse navbar by default on mobile phone\n* `toc_depth`: table of article conent's depth, default to `4`, that is show `H1~H4` headers\n* `show_print_page`: show print page button, visitor click or push `Ctrl+P` to print\n* `main_color`: theme main color\n* `sidebar_width`: sidebar default width, format can be like`\"300px\"`, `300`, `\"30%\"`\n* `css`: `css` file `URL`, which can override the default style and will be inserted into the `head` tag of the page\n* `js`: `js` file `URL`, can write `js` program, it will be loaded at the end of the page\n\nThe default code highlighting uses [prismjs](https://prismjs.com/), and the support of some common languages ​​is checked by default. `js` file + `css` file totals about `100KiB`, if you need the code If you can’t highlight, or want to save traffic or reduce loading time, you can go to [here](https://prismjs.com/download.html#themes=prism-tomorrow&languages=markup+css+clike+javascript+bash+c+cpp+cmake+coffeescript+docker+go+ini+java+json+json5+kotlin+latex+less+lua+makefile+markdown+markup-templating+objectivec+php+powershell+python+jsx+tsx+ruby+rust+sass+scss+shell-session+sql+swift+textile+typescript+yaml&plugins=line-numbers+highlight-keywords+toolbar+copy-to-clipboard+match-braces) Check the default check and check the language and Function, finally get a `css` file and a `js` file in the `static/js` directory, and then set the `URL` in `site_config.json`:\n```json\n    \"route\": {\n        \"assets\": {\n            \"/static/\": \"static\"\n        }\n    }\n```\n> this config will due to files in `static` dir will be copied to `static` dir of out dir.\n\n* `code_highlight_css`: `code` highlighting `css` file `URL`, will replace the default highlighting `css` file, and will be inserted into the `head` tag of the page\n* `code_highlight_js`: `code` highlighting `js` file `URL`, will replace the default highlighting `js` file, and will be loaded at the end of the page\n\nSupports `day` and `night` modes. The night mode will add a `dark` class to the `body`. If you want the `css` style of the night mode, you can modify it based on this class name\n\n### class support\n\nThe theme supports several commonly used `class` and `id`, which can be set in `config.json`(/`config.yaml`) or the `class` and `id` keywords in the `.md` file. You can use this style directly\n\nFor example, set in `config.json`\n```json\n{\n     \"class\": \"md_page\",\n     \"navbar\": {\n         ...\n     }\n}\n```\n\nOr add in the header of the `md` file\n```markdown\n---\ntitle: title\nclass: heading_no_counter\n---\n```\n\nThen the `html` tags of all generated pages under this document will contain this class. For example, `md_page` will make the content displayed in the center instead of left-aligned\n\n`class` has:\n* `md_page`: Ordinary markdown files are rendered into html pages, you can add this class, it will be displayed in the center instead of left-aligned\n* `heading_no_counter`: Cancel automatic heading numbering"}, "/get_started/en/plugins/index.html": {"title": "teedoc plugin", "content": "---\ntitle: teedoc plugin\nkeywords: teedoc, plugin\ndesc: teedoc, convert markdown or jupyter notbook into html static web pages, introduce teedoc plug-ins\n---\n\n\n## Plug-in introduction\n\nteedoc uses a plug-in system to facilitate expansion\n\n\nIn the `site_config.json` file, set the `plugins` field, such as\n```json\n{\n    \"plugins\": {\n        \"teedoc-plugin-markdown-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        },\n        \"teedoc-plugin-theme-default\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"dark\": true,\n                \"env\":{\n                    \"main_color\": \"#4caf7d\"\n                },\n                \"css\": \"/static/css/custom.css\",\n                \"js\": \"/static/js/custom.js\"\n            }\n        }\n    }\n}\n```\n\nTwo plugins are installed by default here, namely `teedoc-plugin-markdown-parser` and `teedoc-plugin-theme-default`, both of which are installed directly from `pypi.org`. The theme plugin has configuration items\n\nThe configuration items include whether to use the `dark` theme, as well as the environment variable `env` of the plug-in, and set the `main_color` to `#4caf7d`. This value will be used in the plug-in. Set the theme color to the corresponding color;\n\nAs well as setting custom `css` files and `js` files, the value is `url`, not the file path (for the mapping of file path and `url` please see the introduction of `route` (route), by setting this `css` File, you can override the default style of the theme plug-in to achieve simple custom functions\n\n\n* [Theme Plugin](./themes.html)\n* [Other plug-ins](./others.html)"}, "/get_started/en/usage/404.html": {"title": "Customize 404 page", "content": "---\ntitle: Customize 404 page\nkeywords: teedoc, custom 404 page, 404 page internationalization\ndesc: teedoc custom 404 page, and 404 page internationalization\n---\n\nSupport custom 404 page (the page displayed when accessing the wrong URL), and support 404 page internationalization\n\n## Add 404 error page\n\nSet the mapping between the `url` of the website root directory and the path in the `site_config`, such as\n```json\n    \"route\": {\n        \"pages\": {\n            \"/\": \"pages/index/zh\"\n        }\n    },\n    \"translate\": {\n        \"pages\": {\n            \"/\": [{\n                    \"url\": \"/en/\",\n                    \"src\": \"pages/index/en\"\n                }\n            ]\n        }\n    }\n```\nHere the website root directory (`/`) is mapped to the folder `pages/index/zh`, you only need to create the file `pages/index/zh/404.md`, and then add the content:\n```markdown\n---\nlayout: 404.html\n---\n```\nor\n```markdown\n---\nlayout: 404\n---\n```\n\nUsers will return to this page when they visit the wrong path\n\n## 404 Error Page Internationalization\n\nThe website root directory configuration mentioned above, if the `locale` is configured as `zh` in the `config` file under `pages/index/zh`, the content of the generated `/404.html` will be Chinese\n\nIf the user's browser language is set in other languages, such as English `en`, it will try to jump to `/en/404.html`, so we only need to:\n* Configure the path mapping of `translate` in `site_config`, as shown in the example above\n* Then create a new `pages/index/en/404.md`, add content\n\n```markdown\n---\nlayout: 404.html\n---\n```\n\n>! If `locale` has a suffix, such as `zh_CN`, `en_US`, etc., the `404` page will automatically try to jump to the page in the same language as the browser setting, such as `/en_US/404.html`, `/en -US/404.html`, `/en-us/404.html`, `/en_us/404.html` stop redirecting until the page language and browser language are the same. When all links are tried to redirect It also stops jumping after failure\n\nIf the language you need has not been translated, there are two ways:\n* Can be achieved through [Custom 404 page] (#Customize-404-error-page-content)\n* You can also contribute translation, go to [here](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-theme-default/teedoc_plugin_theme_default), `fork` repository, and then `git clone` To your warehouse locally, add a new language to the `locales.cfg` file, and then execute `python trans_prepare.py`, which will generate a new translation file in the `locales` directory with the suffix `.po`, translate This file (to translate the `po` file, you can directly modify the text, or use other tools to translate), and then execute `python trans_finish.py` will generate a `mo` binary file, you can submit the changes without errors, and then in `github `Create `PR(Pull Request)` to contribute translation to `teedoc` repository\n\n\n## Customize 404 error page content\n\nModify the template directly based on the theme, or inherit the template of the theme, such as slightly changing the `body` part of the `404.html` page, just create a new `my_404.html` in the `layout` directory. Note that the file name cannot be the same Built-in file name conflict, if conflict, it will prompt `generate html fail: maximum recursion depth exceeded in comparison`:\n```markdown\n{% extends \"404.html\" %}\n\n{% block body_404 %}\n\nHere is body\n{{ body|safe }}\n\n{% endblock%}\n```\n\nThen use this template in `404.md`\n```markdown\n---\nlayout: my_404.html\n---\n```"}, "/get_started/en/usage/deploy_github_pages.html": {"title": "Deploy the website generated by teedoc to github pages", "content": "---\ntitle: Deploy the website generated by teedoc to github pages\nkeywords: teedoc, deployment\ndesc: Deploy the website generated by teedoc to the github pages service, use github's free server to deploy the website\n---\n\n\nBecause `github` provides free `pages` service, we only need to submit the `html` page to the `gh-pages` branch, and then enable the `pages` service in the project settings.\n\nAt the same time, we have also automated the page construction and push. Every time we submit code/documents to the warehouse, the `github action` will be triggered to automatically build and push to the `gh-pages` page, which is very simple, convenient and reliable!\n\n\n## Clone the template warehouse\n\nHere we use the source code of teedoc official website as a template, visit [https://github.com/teedoc/template](https://github.com/teedoc/template) or [https://github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io)\nClick `Use this template`\n![github use template](../../assets/images/github_use_template.jpg)\nThen fill in the new warehouse name (if you are not going to customize the domain name, the warehouse name is best to be `teedoc.github.io` and replace `teedoc` with your username or organization name) and description, and create a new one based on this warehouse Your own warehouse, now you have the same warehouse as the official website of `teedoc`\n> You will find a directory of `.github/workflows`, this is the configuration file of `github action`, we use this function to achieve:\n> When we update the source file of the repository, `github action` automatically builds and generates static web pages according to the commands of this configuration file, and then pushes them to the `gh-pages` branch of this repository\n\n> Among them, `sync_code_to_gitee.yml` and `sync_pages_to_gitee.yml` are used to synchronize the code to `gitee`, you can delete them, please study by yourself if necessary\n\n\n## Automatically trigger build\n\nEvery time the warehouse submits a modification, the build will be automatically triggered. After the build is completed, the generated `html` page will appear in the `gh-pages` branch. You can see the progress and log in the `Actions` column\n\nIf it is a green tick, it means success. Otherwise, it means failure. You can click in to see what the build log reported is wrong. Generally, the previous value is filled in incorrectly.\n\n![](../../assets/images/github_action.jpg)\n\n## Set up pages service\n\nThen find the `pages` service setting in the settings, open it, and then visit the corresponding domain name, you can check the `Enforce HTTPS` to enable `HTTPS` (recommended)\nFor example, here is `https://teedoc.github.io/`\n\n>! Note that if the root path is not `/`, and there is no custom domain name (see the following introduction for custom domain names), such as `https://teedoc.github.io/my_site/`, it needs to be in `site_config.json` Configure `\"site_root_url\":\"/my_site/\"`\n\n![](../../assets/images/github_pages.jpg)\n\n## Pages Service Custom Domain\n\nAfter deployment, there will be a default domain name, such as `teedoc.github.io`. If you want to use your own domain name, such as `teedoc.neucrack.com`, you need to customize the domain name.\n\nThe file directory of the website root directory mapping is set in the `site_config.json` file, for example, here is the `pages/index/zh` directory:\n```json\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n            \"/en/\": \"pages/index/en\"\n        },\n```\n\nCreate a new file in this directory, name it `CNAME` and note that there is no suffix, then write a custom domain name such as `teedoc.neucrack.com`, save the file, and submit it\n\n> You may see the setting of `custom domain` in the settings, but you need to set the `CNAME` file as mentioned here to keep it in effect, otherwise the custom domain name will be invalid next time you submit it\n\n\n## Automatically build advanced configuration\n\nThe build process is configured in the `.github/workflows/publish.yml` file, which mainly includes building documents, and pushing documents to the `gh-pages` branch, and the script can be modified according to the situation.\n\nUsed to push documents to the `gh-pages` branch, [github-pages-deploy-action](https://github.com/JamesIves/github-pages-deploy-action) This `github actioin` plugin, more advances For the usage of the order, please read the documentation of this plugin\n\nGenerally, the above method is sufficient, and you can use it without configuring any parameters. In addition, the bottom of `publish.yml` provides a push method without plug-ins. If you need it, you can copy it to it and use it. You may need to use it. The following knowledge points:\n\n* Generate ssh key\n\nGenerate a pair of `key` locally (relevant software needs to be installed under windows, please install it yourself (you will have it if you install git))\n```\nssh-keygen -t rsa -f key.txt\n```\nGot the two files `key.txt` and `key.key.pub`\n\n* Set the key\n\nSet the `ssh` key in the settings of the document project, add a `ssh` key, copy the content in `key.txt.pub`, pay attention to the `pub` file, which is the public key, select ** to allow writing Permission**, take any name\n![](../../assets/images/github_deploy_key.jpg)\n\nThen click `Secrets` to set secret key-value pairs. The variables that need to be set are:\n* `ACCESS_KEY`: Copy the content in `key.txt`\n* `GIT_EMAIL`: Set a `git` submission email, just set your `github` email\n* `GIT_NAME`: Set a `git` commit name, just set your `github` name\n* `REPO`: warehouse address, set to `organization name/warehouse name` or `user name/warehouse name`, such as `teedoc/teedoc.github.io`\n![](../../assets/images/github_secrets.jpg)\n\nOf course, these variables can also be obtained directly from the submission record through the optimization script (except for `ACCESS_KEY`), if you are interested, you can optimize, and you are also welcome to submit a PR"}, "/get_started/en/usage/start.html": {"title": "start writing document", "content": "---\ntitle: start writing document\nkeywords: teedoc, markdown, jupyter notebook, html, document generation, alternative gitbook, website generation, static website, document writing\ndesc: teedoc, convert markdown or jupyter notbook into html static web pages, introduce the basic use of teedoc\n---\n\n\n## Build and Preview\n\nExecute in the document directory with `site_config.json`\n```\nteedoc serve\n```\n\nAfter displaying `Starting server at 0.0.0.0:2333 ....`, it is fine\n\nOpen the browser to visit: [http://127.0.0.1:2333](http://127.0.0.1:2333)\n\n\nModify the file in real time. After saving the file, it will automatically rebuild the file after `3` seconds by default, and then the browser will automatically refresh\n> The delay time of automatic refresh can be set, you can add the `-t` parameter, for example, `teedoc -t 0 serve` is set to a `0` second delay,\n> It can also be set in the document configuration, see the description of the configuration parameter `rebuild_changes_delay` below\n\n\nIf you only need to build and generate HTML pages, you only need to execute\n\n```\nteedoc build\n```\n\n>! Note that if you are finally generating the release version of the document, you must use the `build` command to generate the website page, the page generated by the `serve` command can only be used for local preview, there will be redundant preview related code, which is not suitable Used in production deployment\n\n\nIn addition, you can also specify the parameter `-d` or `--dir` to specify the document directory, so that you do not need to execute commands under the document directory, such as\n```\nteedoc -d /home/teedoc/my_doc build\n```\n\n\n## Build document delete\n\n\nThe built document will be placed in the `out` directory, the program will not actively delete it, if you need to clear it, please delete it manually\n\n\n\n## Document directory structure\n\n```\n├─.github\n├─docs\n│ ├─develop\n│ │ ├─en\n│ │ └─zh\n│ └─get_started\n│ ├─assets\n│ ├─en\n│ └─zh\n├─pages\n│ └─index\n│ ├─en\n│ └─zh\n├─static\n│\n└─site_config.json\n```\n\n* `.github`: automatic build script, how to use it in later chapters\n* `docs`: document, contains multiple documents, each document is a separate folder\n* `pages`: pages, including homepages, 404 pages, etc.\n* `static`: static file folder, such as storing pictures\n* `site_config.json`: website configuration file\n* `config.json`: In addition to `site_config.json`, each document directory can have `config.json` to configure document related pages\n* `sidebar.json`: document directory\n\nBefore looking at how to use the configuration file, you must keep in mind that the configuration file is very simple. **The configuration file has only two file names**, a unique document configuration file `site_config` and each document's own configuration file `config`\n\n## Configuration file\n\nThe configuration file can be a file in `json` or `yaml` format, choose the one you like. Don't be afraid if you haven't touched it before, search for a tutorial and take 10 minutes to learn it.\n\nIf your document directory has a lot of content, it is recommended to use the `yaml` format, which looks more concise\n\n`teedoc` provides commands for converting between `json` and `yaml` formats\n\n### From json to yaml\n\n```\nteedoc -f ./config.json json2yaml\n```\n\n### From yaml to json\n\n\n```\nteedoc -f ./config.json yaml2json\n```\n\n### From gitbook SUMMARY.md to json\n\n\n```shell\nteedoc -f ./SUMMARY.md summary2json\n```\n\n\n\n### From gitbook SUMMARY.md to yaml\n\n\n```shell\nteedoc -f ./SUMMARY.md summary2yaml\n```\n\n\n\n\n\n## site_config.json Site configuration\n\nWebsite configuration items, such as website name, page routing, plug-in configuration, etc.\n\nThe following sample configuration file looks like there are many configuration items, don’t be scared, in fact it is very simple, the main configuration items, mastered, thinking is easy\n\nThe configuration file is in `json` format, for example:\n\n```json\n{\n    \"site_name\": \"teedoc\",\n    \"site_slogon\": \"happy to write\",\n    \"site_root_url\": \"/\",\n    \"site_domain\": \"teedoc.github.io\",\n    \"site_protocol\": \"https\",\n    \"config_template_dir\": \"./\",\n    \"source\": \"https://github.com/teedoc/teedoc.github.io/blob/main\",\n    \"route\": {\n        \"docs\": {\n            \"/get_started/zh/\": \"docs/get_started/zh\",\n            \"/develop/zh/\": \"docs/develop/zh\",\n        },\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n        },\n        \"assets\": {\n            \"/static/\": \"static\",\n            \"/get_started/assets/\": \"docs/get_started/assets\"\n        },\n        \"/blog/\": \"blog\"\n    },\n    \"translate\": {\n        \"docs\": {\n            \"/get_started/zh/\": [ {\n                    \"url\": \"/get_started/en/\",\n                    \"src\": \"docs/get_started/en\"\n                }\n            ],\n            \"/develop/zh/\": [ {\n                    \"url\": \"/develop/en/\",\n                    \"src\": \"docs/develop/en\"\n                }\n            ]\n        },\n        \"pages\": {\n            \"/\": [ {\n                    \"url\": \"/en/\",\n                    \"src\": \"pages/index/en\"\n                }\n            ]\n        }\n    },\n    \"executable\": {\n        \"python\": \"python3\",\n        \"pip\": \"pip3\"\n    },\n    \"plugins\": {\n        \"teedoc-plugin-markdown-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        },\n        \"teedoc-plugin-theme-default\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"dark\": true,\n                \"env\":{\n                    \"main_color\": \"#4caf7d\"\n                },\n                \"css\": \"/static/css/custom.css\",\n                \"js\": \"/static/js/custom.js\"\n            }\n        }\n    }\n}\n\n```\n\n* `site_name`: site name\n* `site_slogon`: website slogan\n* `site_root_url`: website root directory path, use the default value `/`; if you need to put the generated content in the website folder (not the root directory folder), you can set\n* `site_domain`: website domain name, currently used place: generate `sitemap.xml` and `robots.txt`\n* `site_protocol`: website protocol, `http` or `https`, currently used place: generate `sitemap.xml` and `robots.txt`\n* `config_template_dir`: `config` template file, `config.json` or `config.yaml` in other document directories can be `import` the files in it, the default location is the directory where `site_config` is located\n* `source`: document source path, such as `https://github.com/teedoc/teedoc.github.io/blob/main`, where `main` is the main branch of the document, and `Edit this page' will be added to the document page `Button (link), click to jump to the source code of the corresponding file. You can leave it blank to not add a link. In addition, you can add `\"show_source\": \"Edit this page\"` in `config.json` to define the text content of the button as `Edit this page`, if you want the document to have no such button, set it to `\"show_source\": false`; you can also add `show_source: edit this page` or `show_source: false` in the header information of the file (`md` or `ipynb` file) to set\n* `route`: Web page routing, including routing of documents, pages and resource files, such as routing of documents\n```json\n\"docs\": {\n    \"/get_started/zh/\": \"docs/get_started/zh\",\n    \"/get_started/en/\": \"docs/get_started/en\",\n    \"/develop/zh/\": \"docs/develop/zh\",\n    \"/develop/en/\": \"docs/develop/en\"\n},\n```\nThe `key` represents the `url` of the document in the final generated website, and the following value is the corresponding source document path.\nFor example, the source document `docs/get_started/zh/README.md` will generate the file `out/get_started/zh/index.html` after construction. If it is not a `md` file (ie unsupported file), it will be left intact Copy files automatically, and finally the `out` directory is the generated website\n\nThe same is true for `pages`, `assets` will not perform document conversion and directly copy to the corresponding directory\n\n* `translate`: Translate, specify the `url` and file path of the translated version corresponding to the document. Similarly, the `config` and `sidebar` configuration files are required under the path of the translated version, and `locale` is specified in the `config` file To achieve the specified document language to be translated, for example, Chinese can be `zh`, `zh_CN`, `zh_TW`, English is `en`, `en_US`, etc. The translated `sidebar` and the document path need to be consistent with the source document. If there is no translation, you can leave the translation file. When the user visits a page that has not been translated, it will jump to `no_tanslate.html` to indicate that there is no translation. For more details, please see [ Internationalization i18n](./i18n.html)\n\n* `executable`: executable program settings, here you can set the executable program names of `python` and `pip`, which will be used when installing the plug-in\n* `plugins`: Plug-in configuration, mainly composed of name, source, and configuration items.\nFor the name, you can search for `teedoc-plugin` in [github](https://github.com) to find open source plug-ins. You are also welcome to participate in writing plug-ins (you only need to use the `Python` syntax);\nFill in the `from` field with `pypi`, if the plug-in is downloaded locally, you can also fill in the folder path, or you can fill in the `git` path directly, such as `git+https://github.com/*****/* *****.git`\nThe configuration items are determined by the specific plug-in. For example, `teedoc-plugin-theme-default` has the `dark` option to choose whether to enable the dark theme\n* `rebuild_changes_delay`: After detecting file changes, how many seconds to delay automatically regenerating the document, the browser will automatically refresh the page, the default is `3` seconds, the shortest can be set to `0` seconds, you can use `teedoc -t 3 serve` or `teedoc --delay serve` to override this setting\n* `robots`: Customize the content of `robots.txt`, such as `\"User-agent\": \"*\"` means that all clients are allowed to crawl, which will have an impact on `SEO`. For example, crawling of `JPEG` pictures is not allowed: `\"Disallow\": \"/.jpeg$\"`, and access to the `admin` directory: `\"Disallow\": \"/admin\"` is not allowed, specifically and `robots.txt` Same format requirements\n* `layout_root_dir`: the root directory of the layout template, the default is `layout`, that is, when the layout template file is needed, it will automatically find it under this folder\n* `layout_i18n_dirs`: The international translation directory of `layout`, which can be a path such as `locales`, and in some special cases, multiple paths such as `[\"locales1\", \"locales2]` can also be set. The content of the file can be referred to [i18n](./i18n.md#plug-in internationalization) production\n\n## config.json document configuration\n\nThis is the configuration for each document, placed in the root directory of each document, such as `docs/get_started/zh/config.json`, each document is independent of each other, you can set the same to keep the website navigation bar consistent\n\nHere you can configure the navigation bar of each document and the content of the footer (`footer`), and you can also set the `config` item of the plug-in. The current document will override the configuration in `site_config.json` to achieve different Documents in different languages ​​(internationalization/i18n) or styles, etc.\n\nsuch as:\n```json\n{\n    \"import\": \"config_zh\",\n    \"id\": \"teedoc_page\",\n    \"class\": \"language_zh\",\n    \"locale\": \"en_US\",\n    \"navbar\": {\n        \"title\": \"teedoc\",\n        \"logo\": {\n            \"alt\": \"teedoc logo\",\n            \"src\": \"/static/image/logo.png\"\n        },\n        \"home_url\": \"/\",\n        \"items\": [\n            {\n                \"url\": \"/get_started/zh/\",\n                \"label\": \"Installation and Use\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/develop/zh/\",\n                \"label\": \"Development\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"https://github.com/neutree/teedoc\",\n                \"label\": \"github\",\n                \"target\": \"_blank\",\n                \"position\": \"right\"\n            },\n            {\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"url\": \"/get_started/zh/\",\n                        \"label\": \"Chinese\"\n                    },\n                    {\n                        \"url\": \"/get_started/en/\",\n                        \"label\": \"English\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"footer\":{\n        \"top\":[\n            {\n                \"label\": \"Link\",\n                \"items\": [\n                    {\n                        \"label\": \"Use teedoc to build\",\n                        \"url\": \"https://github.com/neutree/teedoc\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"Copyright © 2021 Neucrack\",\n                        \"url\": \"https://neucrack.com\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Source\",\n                \"items\": [\n                    {\n                        \"label\": \"github\",\n                        \"url\": \"https://github.com/neutree/teedoc\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"Source files of this website\",\n                        \"url\": \"https://github.com/teedoc/teedoc.github.io\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            }\n        ],\n        \"bottom\": [\n            {\n                \"label\": \"*ICP备********号-1\",\n                \"url\": \"https://beian.miit.gov.cn\",\n                \"target\": \"_blank\"\n            },\n            {\n                \"label\": \"*Public Network Security No. ************\",\n                \"url\": \"https://beian.miit.gov.cn/#/Integrated/index\",\n                \"target\": \"_blank\"\n            }\n        ]\n    },\n    \"plugins\": {\n        \"teedoc-plugin-search\":{\n            \"config\": {\n                \"search_hint\": \"Search\",\n                \"input_hint\": \"Enter keywords, separate multiple keywords with spaces\",\n                \"loading_hint\": \"Loading, please wait...\",\n                \"download_err_hint\": \"Failed to download the file, please refresh and try again or check the network\",\n                \"other_docs_result_hint\": \"Results from other documents\",\n                \"curr_doc_result_hint\": \"Current document search result\"\n            }\n        }\n    },\n    \"show_source\": \"Edit this page\"\n}\n```\n\n* `import`: You can import the configuration from the template file, the file name without suffix. For example, `site_config` set `config_template_dir` to `./`, fill in `\"import\": \"config_zh\"` here, it means to import `config_zh.json` (priority) or `config_zh in the same directory as `site_config` .yaml`.\nThen you can add the configuration of the current document, overwrite the template file, the same keywords, and modify different content. If it is an array (list), to replace the content of the template file, you need to add `id` to the array item of the template file. Keyword, then modify, if the `id` keyword is not specified, it will be appended to the array. For example, the template file `config_zh`:\n```json\n{\n    \"locale\": \"en_US\",\n    \"navbar\": {\n        \"title\": \"teedoc\",\n        \"items\": [\n            {\n                \"url\": \"/get_started/zh/\",\n                \"label\": \"安装使用\",\n                \"position\": \"left\"\n            },\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"url\": \"/zh\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"url\": \"/en\",\n                        \"label\": \"English\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\nThe configuration file of a specific document:\n```json\n{\n    \"import\": \"config_zh\",\n    \"navbar\": {\n        \"title\": \"teedoc123\",\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"url\": \"/get_started/zh\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"url\": \"/get_started/en\",\n                        \"label\": \"English\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n* `id`: The `id` of the document. Generally, there is no need to write it. The `id` will be set to the `<html>` tags of all pages in the `config.json` directory. For example, if `teedoc_page` is set here, all pages in this directory will become `<html id=\"teedoc_page\"> ... </html>`. If the `markdown` file has set `id`, this value will be overwritten, that is, each page can only have one `id`.\n* `class`: The `class` of the document, generally you don't need to write it. Set the `class` to the `<html>` tags of all pages in the `config.json` directory, and use spaces for multiple `class` Separate. For example, if `language_zh` is set here, all pages in this directory will become `<html class=\"language_zh\"> ... </html>`. If `class` is set in the `markdown` file, it will be appended. For example, if `language_zh` is set in `config.json`, and `class: zh_readme` is set in `README.md`, the final result is `class=\" language_zh zh_readme\"`. This function is convenient to customize the style of each page or the style of different documents.\n* `locale`: locale code, can found from [here](https://www.science.co.il/language/Locale-codes.php), for example: `zh`, `zh_CN`, `en_US`, `ja` etc. Or get by program `babel`:\n```\npip install babel\npybabel --list-locales\n```\n* `navbar`: Navigation bar settings, each document can be individually set up the navigation bar, if you want to keep the entire website unified, you can modify each configuration to be the same. The keyword `type` is used in the first layer and is used to indicate the category of this label in the navigation bar. The values are:\n  * `link`: normal link, this option is the default when you don’t write the `type` keyword\n  * `list`: There are sub-items, which will be displayed in the form of a drop-down menu\n![](../../assets/images/navbar.png)\n  * `selection`: Single option, such as language selection. When the `type` keyword is not written and there is the `items` keyword, this option is the default\n![](../../assets/images/navbar2.png)\n  * `language`: If `translate` is set in `site_config`, the `items` of type `language` will be automatically filled in the language list, so we don't need to write the language list manually! The effect is the same as `selection` (in fact, the internal code is to automatically replace the `language` type with `selection`)\n![](../../assets/images/navbar2.png)\n* `footer`: website footer, divided into upper and lower parts, and multiple columns can be added to the upper part, and each column can have multiple values\n* `plugins`: Configure the configuration items of the plug-in, if it has been set in the `site_config.json`, it will be overwritten, that is, the priority of the child `config` is higher\n* `show_source`: Under the premise that the keyword `source` is set in `site_config.json`, it is the source code path of the document, such as `https://github.com/teedoc/teedoc.github.io/blob/main` , Where `main` is the main branch of the document, and the `Edit this page` button (link) will be added to the document page, click to jump to the corresponding file source code. Set `\"show_source\": \"Edit this page\"` to define the text content of the button as `Edit this page`, if you don't set it, the default is `Edit this page`, if you want the document to have this button, set it to `\"show_source\": false`; you can also add `show_source: edit this page` or `show_source: false` in the header information of the file (`md` or `ipynb` file) to set\n\n## sidebar.json Document directory (sidebar) settings\n\nThere is a directory for setting documents, one for each document, independent of each other\n\nThe file path uses a relative path, just fill in the file name, `README.md` will be automatically converted to `index.html`\n\nIn addition, you can also directly `url` without writing the path of `file`, such as `\"url\": \"/get_started/zh/\"`, at the same time you can set `\"target\":\"_blank\"` to open in a new window, otherwise Open in current window\n\nFor the items in the first layer of `items`, if there is only `label` without `url`, `file` and `items`, a classification mark will be added to the sidebar, and the effect is as follows:\n![](../../assets/images/sidebar.png)\n\nAnd you can add option `\"collapsed\": false` to show sub directory by default\n\nsuch as:\n\n```yaml\nitems:\n-   label: Introduction to teedoc\n    file: README.md\n-   label: Install teedoc\n    file: install/README.md\n-   label: Start writing document\n    file: usage/start.md\n-   label: Plugin\n    file: plugins/README.md\n    collapsed: false\n    items:\n    -   label: Theme Plugin\n        file: plugins/themes.md\n    -   label: Other plugins\n        file: plugins/others.md\n-   label: markdown syntax\n    file: syntax/syntax_markdown.md\n-   label: Website using teedoc\n    file: usage/sites.md\n-   label: More samples\n    items:\n    -   label: Second-level subdirectory example\n        items:\n        -   label: Sample three-level sub-directory\n            items:\n            -   label: Article 1\n                file: more/example_docs/doc1.md\n        -   label: Article 2\n            file: more/example_docs/doc2.md\n    -   label: This is a link\n        url: https://github.com/teedoc/teedoc\n        target: _blank\n```\n\nor `json` format\n\n```json\n{\n    \"items\":[\n        {\n            \"label\": \"Introduction to teedoc\",\n            \"file\": \"README.md\"\n        },\n        {\n            \"label\": \"Install teedoc\",\n            \"file\": \"install/README.md\"\n        },\n        {\n            \"label\": \"Start writing document\",\n            \"file\": \"usage/start.md\"\n        },\n        {\n            \"label\": \"Plugin\",\n            \"file\": \"plugins/README.md\",\n            \"collapsed\": false,\n            \"items\":[\n                {\n                    \"label\": \"Theme Plugin\",\n                    \"file\": \"plugins/themes.md\"\n                },\n                {\n                    \"label\": \"Other plugins\",\n                    \"file\": \"plugins/others.md\"\n                }\n            ]\n        },\n        {\n            \"label\": \"markdown syntax\",\n            \"file\": \"syntax/syntax_markdown.md\"\n        },\n        {\n            \"label\": \"Website using teedoc\",\n            \"file\": \"usage/sites.md\"\n        },\n        {\n            \"label\": \"More samples\",\n            \"items\":[\n                {\n                    \"label\": \"Second-level subdirectory example\",\n                    \"items\":[\n                        {\n                            \"label\": \"Sample three-level sub-directory\",\n                            \"items\":[\n                                {\n                                    \"label\": \"Article 1\",\n                                    \"file\": \"more/example_docs/doc1.md\"\n                                }\n                            ]\n                        },\n                        {\n                            \"label\": \"Article 2\",\n                            \"file\": \"more/example_docs/doc2.md\"\n                        }\n                    ]\n                },\n                {\n                    \"label\": \"This is a link\",\n                    \"url\": \"https://github.com/teedoc/teedoc\",\n                    \"target\": \"_blank\"\n                }\n            ]\n        }\n    ]\n}\n```"}, "/get_started/en/usage/deploy.html": {"title": "Deploy the website generated by teedoc", "content": "---\ntitle: Deploy the website generated by teedoc\nkeywords: teedoc, deployment\ndesc: Deploy the website generated by teedoc to the server\n---\n\n\nSince the webpages generated by `teedoc` are static webpages, you can deploy them directly in the usual way of deploying static pages.\n\nThe page generated by `teedoc` will be in the `out` directory\n\nUsing `teedoc serve` will start a `HTTP` service, but please do not use it in a production environment, it is unreliable\n\nFor the production environment, here are a few simple and practical methods:\n\n* [Deploy to github pages](./deploy_github_pages.html)\n* [Use nginx to deploy to self-built server](./deploy_nginx.html)\n* [Use CDN to accelerate website](./deploy_cdn.html)"}, "/get_started/en/usage/blog.html": {"title": "Use teedoc to write a blog", "content": "---\ntitle: Use teedoc to write a blog\nkeywords: teedoc, blog, static blog, blog generation, blog\ndesc: teedoc blogging (generating blog)\n---\n\n## Enable blog plugin and configure path mapping\n\nIn the `route` keyword in `site_config.json`, add the `blog` keyword and add the `teedoc-plugin-blog` plugin\n```json\n    \"route\": {\n        \"blog\": {\n            \"/blog/\": \"blog\"\n        }\n    },\n    \"plugins\": {\n            \"teedoc-plugin-blog\": {\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        }\n    }\n```\n\nFor example, here `/blog/` is the path (url) of the generated blog webpage, and `blog` is the path of the source file, similar to the `route` setting of documents and resource files\n\nThen execute the command to install the plugin\n```shell\nteedoc install\n```\n\n\n## Create a blog folder\n\n* Create a `config.json` in the `blog` folder you just configured, and use the same method as the `config.json` of the aforementioned document.\n* Create a new `README.md` file to write the homepage of the blog. For example, only the header information is written, but the content is not written. The generated web page will add the blog list after the file is rendered, where `date: false` represents Do not display the date on this page\n\n```markdown\n---\n\ntitle: Blog\nkeywords: teedoc, blog generation, static blog\ndesc: teedoc static blog page generation\nshow_source: false\ndate: false\n\n---\n\n```\n\n## Create a blog file\n\nCreate a blog file at any location under the `blog` directory, in the format of `md`, and just write the content. Similarly, you can add header information, such as\n```markdown\n\n---\n\ntitle: teedoc blog support\nkeywords: teedoc, blog, generated blog, static blog\ndesc: teedoc generates static blog pages\nauthor: neucrack\ndate: 2021-03-14\ntags: hello, blog, teedoc\ncover: ./assets/cover.jpg\n\n---\n\nAlso can use image: ![image](./assets/img.jpg)\n\nThis is an introduction to the test, which will be displayed in the list. Use `<!-- more -->` to separate the text\n\n<!-- more -->\n\n\n## Body Title One\n\ntext\n\n\n```\n\n>! Note that `tags` and `keywords` are separated by English commas, not Chinese commas\n\n\nHere, `<!-- more -->` is used to divide the article. The first part will be displayed as an introduction to the blog homepage list, which is convenient for readers to preview. If there is no division, the first `500` characters will be taken as the introduction.\n\n## Generate page\n\nExecute the `teedoc serve` command to start a service to access `http://127.0.0.1/blog/`, or add the link `/blog/` to the navigation bar in `config.json` as a blog Entrance.\nsuch as:\n```json\n{\n    \"navbar\": {\n        \"title\": \"teedoc\",\n        \"logo\": {\n            \"alt\": \"teedoc logo\",\n            \"src\": \"/static/image/logo.png\"\n        },\n        \"home_url\": \"/\",\n        \"items\": [\n            {\n                \"url\": \"/\",\n                \"label\": \"Home\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/get_started/zh/\",\n                \"label\": \"Installation and Use\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/develop/zh/\",\n                \"label\": \"Development\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/blog/\",\n                \"label\": \"blog\",\n                \"position\": \"left\"\n            }\n    }\n}\n```"}, "/get_started/en/usage/list_files_by_size.html": {"title": "list all files in order of file size/find large files", "content": "---\ntitle: list all files in order of file size/find large files\nKeywords: find large files in a directory, sort by file size\ndesc: Use the teedoc tool teedoc-list-files command to list all files according to the file size in the directory, which is convenient for finding large files\n---\n\nUse the `teedoc` tool `teedoc-list-files` command to list all files according to the file size in the directory, which is convenient for finding large files\n\nUsing help:\n````\nteedoc-list-files -h\n````\n\nFor example, to list all the files in the directory `my_doc` and sort them by file size, you can use this:\n\n````\nteedoc-list-files -r my_doc all\n````\n\nHere `-r` is a recursive search, that is, it will search for subfolders, `all` represents all file formats, and other formats can also be specified, such as:\n\n````\nteedoc-list-files -r my_doc jpg\n````\n\nYou will see the sorted list of files.\n````\n402.1 KiB - 411708 : get_started/assets/images/jupyterlab.jpg\n234.2 KiB - 239864 : get_started/assets/images/pages_settings.jpg\n215.7 KiB - 220828 : get_started/assets/images/action_error.jpg\n165.8 KiB - 169815 : get_started/assets/images/action_error_log.jpg\n139.6 KiB - 142970 : get_started/assets/images/jupyterlab_1.jpg\n````\n\n\nIf you want to remove file totally from git repo, refer to [github doc](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository) or refer to [gitee doc](https://gitee.com/help/articles/4232#article-header2)"}, "/get_started/en/usage/write_attention.html": {"title": "Points to note when writing documents", "content": "---\ntitle: Points to note when writing documents\nkeywords: teedoc, document writing, points to note\ndesc: teedoc, which converts markdown or jupyter notbook into html static web pages, introduces the points to note when writing documents with teedoc\n---\n\n\n## Relative path problem\n\nWhen writing the link path in `config.json`, try to write the specification, such as `/get_started/zh/` instead of `/get_started/zh`\n\nThat is, if the corresponding path is not a file, but a directory, you must add a `/` at the end to let the browser know that this is a directory,\nIn this way, we write relative paths in the `md` file, such as `../assets/image/screenshot.png`, which will be converted to `/get_started/assets/image/screenshot.png`\nIf it is `/get_started/zh`, the browser will parse it as `/assets/image/screenshot.png`, which is the wrong address, and the picture will not be found!\n\nOf course, you can also choose to use an absolute path"}, "/get_started/en/usage/i18n.html": {"title": "teedoc internationalization (i18n) (translation)", "content": "---\ntitle: teedoc internationalization (i18n) (translation)\nkeywords: teedoc, i18n, internationalization, translation\ndesc: teedoc internationalization (i18n), including plug-in internationalization and document internationalization\n---\n\n## Introduction to Internationalization (i18n)\n\nIf the document only uses one language, things are relatively simple, but the fact is that you often encounter the use of different languages:\n* For `teedoc`, it must support enough languages ​​or be easy to extend the translation. Because users may use different languages, it may be English, Chinese, or other languages, even if the user only uses one language\n\n* For users, you need to specify the language when you use it, so that `teedoc` can generate a suitable translation, and finally can customize the text when there is no translation, or participate in the translation\n\nSo internationalization (abbreviation `i18n`) is very important, the following is an introduction to how to use internationalization in `teedoc`\n\n\n\n## Document specified language\n\nEach document has a `config` (`config.yaml` or `config.json`) file, in which is added `locale`, which is a region (region corresponds to a language) keyword, such as Simplified Chinese\n\n```json\n{\n    \"locale\": \"zh_CN\",\n    ...\n}\n```\n\nYou can refer to [here](https://www.science.co.il/language/Locale-codes.php) for the area code, and it can be found in [Wikipedia](https://en.wikipedia.org/wiki/Language_localisation) Check it out, or use a program to check it, such as\n\n```shell\npip install babel\npybabel --list-locales\n```\n\nFor example, `zh` `zh_CN` `zh_TW` `en` `en_US` `ja` etc.\n\nOnly when the language of the document is correctly specified, can the content language of some documents be correct, such as the prompt language of the search plug-in. The document pages in different languages ​​will generate the search prompt information in the corresponding language.\n\n\n## Document content internationalization (translation)\n\nIf you have a document and wish to have a translation in another language, there are several ways:\n\n* Using page translation plugins, users can choose to translate to almost any language, such as Google translation plugin `teedoc-plugin-google-translate`, but the disadvantage is that machine translation may be inaccurate in some places\n* The user himself uses the browser's built-in page translation function, which is the same as the plug-in function\n* Create a new translation document for manual translation and proofreading\n\nIf you need manual translation, you need to configure the `translate` keyword in `site_config`, such as editing `site_config` (`site_config.yaml` or `site_config.json`):\n\n```json\n    \"route\": {\n        \"docs\": {\n            \"/get_started/zh/\": \"docs/get_started/zh\",\n            \"/develop/zh/\": \"docs/develop/zh\",\n        },\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n        },\n        \"assets\": {\n            \"/static/\": \"static\",\n            \"/get_started/assets/\": \"docs/get_started/assets\"\n        },\n        \"/blog/\": \"blog\"\n    },\n    \"translate\": {\n        \"docs\": {\n            \"/get_started/zh/\": [{\n                    \"url\": \"/get_started/en/\",\n                    \"src\": \"docs/get_started/en\"\n                }\n            ],\n            \"/develop/zh/\": [{\n                    \"url\": \"/develop/en/\",\n                    \"src\": \"docs/develop/en\"\n                }\n            ]\n        },\n        \"pages\": {\n            \"/\": [{\n                    \"url\": \"/en/\",\n                    \"src\": \"pages/index/en\"\n                }\n            ]\n        }\n    },\n```\n\nThere are two documents `\"/get_started/zh/\"` and `\"/develop/zh/\"`, and the page `\"/\"`, both of which are Chinese documents.\nNow we need to add English translations for their three documents, respectively add translations under `translate` -> `docs`, the translated documents need to specify `url` (generated path, end with `/`) and `src` (translation The root directory of the document, the end of `/` is not required)\n\nThen\n* Copy `config` (`config.yaml` or `config.json`) and `sidebar` (`sidebar.yaml` or `sidebar.json`) to the translation document directory. For example, here is `\"docs/get_started /en\"`,\n* Modify the `locale` value of `config` to `en`, add language option in `navbar`, and specify `type` as `language`\n* To translate `sidebar` into English, the structure needs to be the same as the source text, but the `label` is different. If it is not the same, a warning message will be displayed when building\n* Copy and translate the document that needs to be translated. It needs to have the same directory structure as the source document. If the user accesses an untranslated document through the sidebar, it will automatically display [no_translate.md](https://github.com/teedoc/teedoc/blob/main/teedoc/templates/no_translate.md) page, you can also create a new `no_translate.md` document in the translation directory to overwrite the default, it is recommended to modify based on the default\n\n```json\n    \"locale\": \"en\",\n    \"navbar\": {\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"type\": \"language\"\n            }\n        ]\n    }\n```\n\n\n## Plug-in internationalization\n\nThe plug-in uses `babel` for international rendering, using the format defined by [gettext](https://www.gnu.org/software/gettext/), you can use [gettext](https://www.gnu.org/ software/gettext/) generated, the translation file format is\n* `pot`: Translation template character file\n* `po`: Translation character file\n* `mo`: translated and compiled binary files for distribution to programs\n\nHere is [teedoc-plugin-search](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-search/teedoc_plugin_search) as an example, the search prompt needs to be internationalized\n\nThere is the `locales` folder under the directory, the generation process:\n* Use `gettext` in `__init__.py` to use internationalization, and set the search for `py` file in `babel.cfg`\n* Execute `./trans_prepare.sh` to generate a translation file, and it will automatically find the translated string\n* Manually translate `locales/language directory/*.po`\n* Execute `./trans_finish.sh` to compile `po` to generate `mo` file\n* Run and use the `mo` file\n* Remember to add resource files to `package_data` of `setup.py`\n\n\nFor rendering of `HTML template`, such as [teedoc-plugin-theme-default](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-theme-default/teedoc_plugin_theme_default), it will automatically Find the translation from the `locales` directory and use the `Jinja2` syntax in the template, such as\n\n```jinja2\n{% trans %}Sentences to be translated {% endtrans %}\n```\n\nThe method of generating translation is the same as described above"}, "/get_started/en/usage/layout_template.html": {"title": "layout template - customize HTML layout", "content": "layout template - customize HTML layout\n==========\n\n## Basic usage of layout template\n\nYou can use the template that comes with the theme, such as error pages, you can use `404.html` directly, just add the key value of `layout` in `metadata`\n\n```markdown\n---\nlayout: 404.html\n---\n```\n\n\n## Customize layout template\n\nFirst write the layout template file, which supports the `Jinja2` grammar, and the writing method can refer to the default [writing of the layout template of the theme plugin](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-theme- default/teedoc_plugin_theme_default/templates).\n\nThe template file can be placed in two places, one is placed in the theme plug-in, the plug-in author can do this;\n\nThe other is to put it in the layout template folder (the default document root directory `layout`), and then use a specific layout template for a specific page separately, and add the `layout` key value at the article header `metadata`:\n`layout`: The layout template used by the page. This key value is not required by default. The configuration in the theme plugin will be used. You need to customize the layout of this page. You can set this parameter. The path is relative to the `layout_root_dir in `site_config` `Path, `layout_root_dir` defaults to `layout`, so to use `layout/special_layout.html` only need to fill in `special_layout.html`\n\nYou can modify the template based on the theme, or inherit the template of the theme, such as slightly changing the `body` part of the `404.html` page, just create a new `my_404.html` in the `layout` directory. Note that the file name cannot be the same Built-in file name conflict, if conflict, it will prompt `generate html fail: maximum recursion depth exceeded in comparison`:\n```markdown\n{% extends \"404.html\" %}\n\n{% block body_404 %}\n\nHere is body\n{{ body|safe }}\n\n{% endblock%}\n```\n\nThen use this template in `404.md`\n```markdown\n---\nlayout: my_404.html\n---\n```\n\n## jinja2 template variables\n\nHere is a list of all supported variables:\n\n### page head info\n\n* `lang`: language, e.g. `en`, or `zh-CN`\n* `metadata`: metadata from doc metadata, dict type\n* `page_id`: page id , a string, set in doc config and doc metadata\n* `page_classes`: page classes, a list, set in doc config and doc metadata\n* `keywords`: keywords, a list, set in doc metadata\n* `description`: description, a string, set in doc metadata\n* `header_items`: tags in head(`<head></head>`) tag, a string list\n* `title`: page title, can be null, string, set in doc metadata\n* `site_name`: site name, string, set in site config\n* `js_vars`: js variables set and used by plugins, a dict object\n\n### navbar\n\n* `logo_url`: site logo image url, string, can be null, set in doc config\n* `logo_alt`: site logo alt info, string, can be null, set in doc config\n* `home_url`: home url, e.g. \"/\", \"/site0/\", string\n* `navbar_title`: navbar title, html string, can be null, set in doc config\n* `navbar_main`: navbar left html, html string\n* `navbar_options`: navbar right html, html string\n* `navbar_plugins`: navbar plugins html, html string\n\n### sidebar info\n\npages no sidebar, only article of docs have\n\n* `sidebar_title`: sidebar title, string, can be html string, set in doc sidebar config\n* `sidebar_items_html`: sidebar items html, html string\n\n### body info\n\n#### article of docs body info\n\n* `article_title`: doc's article title, string, set in doc metadata\n* `tags`: article tags, a string list, set in doc metadata\n* `author`: article author, string, can be null, set in doc metadata\n* `date`: article create date, string, can be null, set in doc metadata\n* `show_source`: show source button info, string, can be null, set in site config and doc metadata\n* `source_url`: source file's url, valid only when show_source is not null\n* `body`: body html, html string\n* `previous`: previous article, can be null\n  * `title`: previous article title, string\n  * `url`:  previous article url, string\n* `next`: next article\n  * `title`: next article title, string\n  * `url`:  next article url, string\n* `toc`: toc html string, can be null\n\n\n#### pages body info\n\n* `body`: body html, html string\n\n### page footer info\n\n* `footer_top`: footer top html string\n* `footer_bottom`: footer bottom html string\n* `footer_js_items`: js items last load int html, string list"}, "/get_started/en/usage/compare_dirs.html": {"title": "Compare different and changed files in two directories", "content": "---\ntitle: Compare different and changed files in two directories\nkeywords: compare two directories, find file changes\n---\n\nUse the `teedoc` tool `teedoc-compare` command to compare the differences between two directory files.\nFor example, after we generate a new `out` directory, we need to compare it with the old `out` directory to find out the changed files, so that we can upload only the changed files.\n\n\nFor example, the old directory for generating html is `old_out`, and the new one is `out`, then compare with the following command\n```bash\nteedoc-compare old_out out\n```\n\nwill print out different files in `json` format:\n```json\n{\n     \"new\": [],\n     \"modified\": [],\n     \"deleted\": []\n}\n```\n\nUsing help:\n```\nteedoc-compare -h\n```"}, "/get_started/en/usage/deploy_nginx.html": {"title": "Use nginx to deploy the website generated by teedoc to the server", "content": "---\ntitle: Use nginx to deploy the website generated by teedoc to the server\nkeywords: teedoc, deployment, nginx\ndesc: Use nginx to deploy the website generated by teedoc to the server\n---\n\n\nHere is a brief introduction. For more detailed usage, please find documents or tutorials yourself, such as `HTTPS`\n\n## Install nginx\n\nThe server installs `nginx`, such as `ubuntu`:\n```\nsudo apt update\nsudo apt install nginx\n```\n\n## Configure and start nginx service\n\n```\nnginx -t\n```\nYou can see the configuration file path, usually `/etc/nginx/nginx.conf`, you can see that the file contains `/etc/nginx/site-enabled/`\n\nCheck the following `default` file, you can see the statement\n```\nlisten 80 default_server;\nroot /var/www/html;\n```\nThat is to monitor port `80`, the root directory of the website is here, we copy our website content here, that is, copy all files in the `out` directory to the `/var/www/html/` directory\n\nthen:\n```\nservice nginx start\n```\n\nYou can access the website by visiting `http://ip:80`, `:80` can also be omitted, or it can be modified to other ports, because the website that has not been registered in China is not allowed to use port `80`, and the overseas server is no limit"}, "/get_started/en/usage/quick_start.html": {"title": "teedoc quick start", "content": "---\ntitle: teedoc quick start\nkeywords: teedoc use, teedoc quick start\ndesc: teedoc, which converts markdown or jupyter notbook into html static web pages, introduces the quick and easy way to use teedoc\n---\n\nThis document is mainly to let you who are new to contact you quickly get started. For more details, please see the more detailed documents later.\n\n## Install Python3\n\n`teedoc` is a software developed based on `Python3` language, and it needs the support of this software\n\nFor example, on `Ubuntu`:\n\n```shell\nsudo apt install python3 python3-pip git\n```\n\n`Windows` and `macOS` please go to [Official Website Download](https://www.python.org/downloads/)\n\n\n## Install teedoc\n\nOpen the terminal (`Windows` press `Ctrl+R` and enter `cmd`), enter:\n\n```shell\npip3 install teedoc\n```\n\nUse the following command to update the software later\n\n>! Be sure to update the software and plug-ins at the same time before use, to prevent problems caused by different versions\n\n```shell\npip3 install -U teedoc\n```\n\n> If your network uses `pypi.org` and the speed is very slow, you can choose other sources, such as Tsinghua tuna source: `pip3 install teedoc -i https://pypi.tuna.tsinghua.edu.cn/simple`\n\nNow you can use the `teedoc` command in the terminal\n\nIf not, please check if the `Python` executable directory is not added to the environment variable `PATH`,\nFor example, it may be in `~/.local/bin`\n\n## New Project\n\nCreate an empty directory to store the document project\n\n```shell\nmkdir my_site\ncd my_site\nteedoc init\n```\n\nor\n```shell\nteedoc -d my_site init\n```\n\nSelect `1`, which is the `minimal` template to generate, or you can directly generate it with `teedoc -d my_site --template=minimal init`\n\nThis will automatically generate some basic files in the `my_site` directory\n\n\nIn addition, in addition to using the `init` command to generate a minimal project, you can also get a source code of the official website document and modify it based on the content of this document\n```shell\ngit clone https://github.com/teedoc/teedoc.github.io my_site\n```\nor\n```shell\ngit clone https://gitee.com/teedoc/teedoc.gitee.io my_site\n```\n\n## Install plugin\n\nThis will install the plugin according to the plugin settings of `plugins` in `site_config.json`\n\n```shell\ncd my_site\nteedoc install\n```\n\n> The plug-in is also released in the form of `python` package, so this will download the corresponding plug-in from `pypi.org`. Similarly, other sources can also be used, such as Tsinghua tuna source: `teedoc -i https://pypi. tuna.tsinghua.edu.cn/simple install`\n\n>! Be sure to update the software and plug-ins at the same time before use, to prevent problems caused by different versions\n\n## Build an `HTML` page and start an `HTTP` service\n\n```shell\nteedoc serve\n```\n\nThis command will first build all `HTML` pages and copy resource files, and then start an `HTTP` service\nIf you only need to generate pages, use\n\n```shell\nteedoc build\n```\n\n\nAfter displaying `Starting server at 0.0.0.0:2333 ....`, it is fine\n\nOpen the browser to visit: [http://127.0.0.1:2333](http://127.0.0.1:2333)\n\n\nAt the same time, you can see that there is an additional `out` directory under the directory, which is the generated static website content, directly copy it to the server and use `nginx` or `apache` for deployment.\n\n\n## Document structure\n\nBecause `teedoc` is specially designed for multi-document system, **There is a basic concept, each document project contains multiple documents, and each document has its own configuration file named config** You need to keep in mind first\n\nThere are several important files in the project:\n* The project root directory has a `site_config.json` file, which is the main configuration of the project\n* There can be multiple documents in the project, set in the `route` configuration item of `site_config`, each document directory must have `config.json` and `sidebar.json` (`json` file can also be `yaml `File), `config` file is responsible for the configuration items of this document, such as the document name, multiple documents can use `import` to share a template\n\n## Add a document\n\n* Create a `markdown` (end with `.md`) file in the directory where this file is located, such as `first.md`, and add content\n\nAt the beginning of each article, there can be a `metadata area` to configure the related configuration of the article. At least one `title` is required. For more configuration items and document formats, please [read the document](../syntax/syntax_markdown.html)\n\n```markdown\n---\ntitle: title\n---\n\n## Title\n\ncontent\n\n## Title Two\n\nContent two\n```\n\nIf there is no `metadata area`, at least one first-level title is required as the article title, such as:\n```markdown\n# Article title\n\n## Title One\n\nContent One\n```\nor\n```markdown\nArticle title\n===\n\n## Title One\n\nContent One\n```\n\n* Add sidebar link in `sidebar.yaml`\n\n```markdown\nitems:\n-label: Brief\n    file: README.md\n-label: First\n    file: first.md\n```\n\n## Use pictures\n\nThere are three ways to use pictures in `.md` files:\n\n* Directly quote `url`, such as `https://teedoc.github.io/static/image/logo.png` or `/static/image/logo.png`\n\n* The relative path refers to the picture file. For example, `./assets/logo.png`. For example\n```\ndoc1\n├── assets\n     └── logo.png\n├── config.json\n├── README.md\n└── sidebar.yaml\n```\nThis is a document in the project, there are `config` configuration files and `sidebar` files below.\nDirectly quote `![logo](./assets/logo.png)` in the `README.md` file.\n**It should be noted that you can only refer to the pictures of the folder in the current document**, and you cannot use relative paths to refer to pictures outside of this document\n\n* If you need to refer to the resources of the path outside the current document, you can set the path mapping (`route`) to achieve, for example, there are files in the `docs` directory:\n```\ndocs\n└── assets\n     └── logo.png\n      doc1\n      ├── config.json\n      ├── README.md\n      └── sidebar.yaml\nstatic\n```\nWhen we quote `![logo](../assets/logo.png)` in the `README.md` file, we will find that the image cannot be displayed\n\nTo make this kind of reference available, you need to set it in `site_config`\n```json\n\"route\": {\n    \"docs\": {\n        \"/doc1/\": \"docs/doc1\"\n    },\n    \"assets\": {\n        \"/static/\": \"static\",\n        \"/assets/\": \"docs/assets\"\n    }\n}\n```\nThis setting can be used.\n> The reason is: We set the document under `docs/doc1` to render and copy it to the directory `out/doc1`, and copy `docs/assets` to `out/assets`, so the file under `out/doc1` The document directly uses the relative path to reference the resource files in the `out/assets` directory\n\n## Locale setting\n\nSet the document Locale so that certain pages and texts are displayed in the corresponding language, for example, the search plugin will generate corresponding search prompts based on the document Locale, etc.\n\nIn the `config/config.json` file, modify `\"locale\": \"en\"` to the actual Locale used, such as `zh`, `zh_CN`, `zh_TW`, `en_US`, `ja`, etc., more See more [i18n document](i18n.html)\n\n## More examples\n\nFor more information, please visit: [teedoc.neucrack.com](https://teedoc.neucrack.com/) or [teedoc.github.io](https://teedoc.github.io/)\n\nFor more examples, visit: [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) or [https://github.com/teedoc/template](https://github.com/teedoc/template), or [sipeed wiki](https://github.com/sipeed/sipeed_wiki)"}, "/get_started/en/usage/seo.html": {"title": "SEO (optimized for search engines)", "content": "---\ntitle: SEO (optimized for search engines)\nkeywords: teedoc, SEO, search optimization, search engine indexing\ndesc: How to use teedoc to do SEO (speed up search engines to include websites and pages)\n---\n\n`SEO`: `Search Engine Optimization`, which is search engine optimization. In order to make your website indexed by search engines so that users can search our website through search engines, we need to do some things:\n\n\n## Page keywords and description\n\nAdd keywords and descriptions to each page, it's ok if you don't add them, according the content if added, such as `.md` file header (source text on this page)\n```markdown\n---\ntitle: SEO (optimized for search engines)\nkeywords: teedoc, SEO, search optimization, search engine indexing\ndesc: How to use teedoc to do SEO (speed up search engines to include websites and pages)\n---\n\n```\n\nThis will automatically add a title to the article, and add keywords and descriptions to the `HTML` file for search engines to fetch\n\nIn addition, since the page will generate a first-level title based on this title, it is best not to use the first-level title for the article, and use the second-level title directly, such as:\n\n```markdown\n---\ntitle: SEO (optimized for search engines)\nkeywords: teedoc, SEO, search optimization, search engine indexing\ndesc: How to use teedoc to do SEO (speed up search engines to include websites and pages)\n---\n\n## Introduction\n\nHere is the introduction\n\n## Directory Two\n\n```\n\n## Image alt info\n\nWhen Use image in markdown, try to add description info for image\n\nWrong:\n```markdown\n![](url)\n```\n\nCorrect:\n```markdown\n![description or label(alt info)](url)\n```\n\n## Sitemap\n\nA site map will be generated to `/sitemap.xml`, and a robot crawling rule to `/robots.txt`. You can submit the `url` of this `sitemap` in the webmaster background of the search engine, so Search engines will come to grab information\n\nYou can set the `robots` key value in the `site_config.json` to prevent crawlers from crawling certain files or content. For the format, please refer to the description of the `robots` key value in [Instructions for use](./start.html)\n\n\n\n## End of page record information\n\nIn China, all websites need to be filed before they can be included by search engines. Add your website's file information in `config.json`. Note that the file information must be consistent with the domain name, otherwise it will be invalid"}, "/get_started/en/usage/problems.html": {"title": "teedoc build problems", "content": "---\ntitle: teedoc build problems\nkeywords: teedoc, build, error, problem\ndesc: Problems when use teedoc\n---\n\n\nYou can view the problems and solutions already mentioned at [github issue](https://github.com/teedoc/teedoc/issues?q=), and you can also submit problems, and you are welcome to find problems, modify the code and submit PR\n\n## jinja2.exceptions.TemplateNotFound: base.html.j2\n\nNeed upgrade `nbconvert`：\n\n```shell\npip3 install --upgrade nbconvert\n```\n\n\n## Plugin error, or code raise error\n\nFirstly, try to upgrade `teedoc` by:\n\n```\npip install -U teedoc\n```\n\nThen update plugins in your doc directory:\n\n```\nteedoc install\n```\n\nIf problems remain exists, [create issue](https://github.com/teedoc/teedoc/issues/new) on github\n\n\n## OSError: [Errno 28] inotify watch limit reached\n\nIt only appears when using `teedoc serve`, that is, the number of files monitored has reached the upper limit set by the system.\nIt usually happens when a large number of files are detected by the software, and the common situations are as follows:\n* An editor such as `vscode` opens a folder with a lot of files. Turning off this kind of software or opening fewer files (folders) will usually solve the problem, refer to [error ENOSPC](https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc)\n* There are indeed too many documents in the document project, reaching the upper limit of monitoring. This situation is generally rare. If it occurs, you need to set the upper limit of the system’s monitoring. Please search for the specific method."}, "/get_started/en/usage/deploy_cloud.html": {"title": "Deploy the website generated by teedoc to the cloud service provider's web service", "content": "---\ntitle: Deploy the website generated by teedoc to the cloud service provider's web service\nkeywords: teedoc, deployment, cloud service provider, cloud server, web service\ndesc: Deploy the website generated by teedoc to the cloud service provider's web service\n---\n\n\nSelf-built servers require you to purchase your own servers, configure servers, etc. It is not that difficult, but it is a little more complicated. Another option is to use web services provided by cloud service providers.\n\nAll we have to do is to upload the generated html page file to the web service of the cloud service provider, and then we can access it through the domain name provided by the cloud service provider. We only need to pay the service provider (usually traffic + number of requests) cost).\n\nFor example, the common ones are Alibaba Cloud, Tencent Cloud, AWS, Google Cloud, etc. For example, Alibaba Cloud provides OSS storage services, Tencent Cloud provides COS storage services, and is optimized for static websites, such as those without `.html` Accessing the link will automatically jump to the page with `.html`.\n> Note that some providers do not optimize static pages, and there may be some features that cannot be set. For example, Qiniuyun cannot support links without the end of `html`, such as `/test` cannot automatically go to `/test.html`, And by default, access to `/` is not automatically transferred to `/index.html`, and `404.html` cannot be read directly from the storage bucket, and needs to be manually uploaded to the configuration of Qiniuyun\n\n\nHere is Tencent Cloud as an example:\n\n## create a bucket\n\n* Register a Tencent Cloud account and activate the COS storage service\n* Create a bucket, such as `teedoc`, you will get a bucket name (`bucket name`), such as `teedoc-1250000000`, and select the server address, such as `region` in Guangzhou is `ap-guangzhou`\n* Enable the static website option in the settings, set the default home page to `index.html`, set the 404 page to `404.html`, if you don't need CDN, you can turn on mandatory HTTPS, so that users will always visit HTTPS sites\n* After setting the static site, you will get a domain name, such as `teedoc-1250000000.cos-website.ap-guangzhou.myqcloud.com`, this domain name is your website domain name, you can access your website through this domain name\n* If you need to customize your own domain name, you can modify the \"custom origin site domain name\". In fact, it is to set the CNAME record of your domain name to point to this domain name. For example, the CNAME record of `teedoc.example.com` points to `teedoc- 1250000000.cos-website.ap-guangzhou.myqcloud.com`, after setting, you can access your website through `teedoc.example.com`\n* In addition, cloud service providers generally support CDN services. If your website has a small number of visits, you don't need to open CDN. If you have a large number of visits, you can open CDN, which can speed up the access speed, but it will increase the cost.\nIn addition, when setting up CDN, it should be noted that the place of \"custom origin site domain name\" in the previous step should not be set, but directly set \"custom CDN acceleration domain name\".\n\n\n## Upload website files\n\nThe website file is generated by `teedoc`, in the `out` directory, be sure to use the `teedoc build` command to generate it, not the `teedoc serve` command to generate it!\n\nThen upload to Tencent Cloud:\n````\nteedoc-upload --progress raw --cloud tencent --region ... --bucket ... --secret_id ... --secret_key ... out\n````\nHere `...` fill in the corresponding information, `secret_id` and `secret_key` click on the console avatar -> select access management -> API key management -> create key, then you can see it, you can consider creating a special one Sub-account, and then only give this sub-account COS permissions, which can ensure a certain degree of security.\n\nIn addition, if the progress bar cannot be printed in the automatic build system, add the parameter `--progress raw`; and the secret key is best hidden, for example, the action of github provides the function of `secret`:\n````\nteedoc-upload --progress raw --cloud tencent --region ${{ secrets.TENCENT_REGION }} --bucket ${{ secrets.TENCENT_BUCKET }} --secret_id ${{ secrets.TENCENT_SECRET_ID }} --secret_key ${{ secrets.TENCENT_SECRET_KEY }} out\n````\n\n## Update website files\n\nAfter uploading a file for the first time, you do not need to upload all the files every time in the future, you only need to upload the updated files, which can save time and traffic, such as:\n````\nteedoc-upload --progress raw --cloud tencent --region ... --bucket ... --secret_id ... --secret_key ... old_out out\n````\nHere `old_out` is the website file generated last time, `out` is the website file generated this time, `teedoc-upload` will automatically compare the two folders, and then upload only the updated file."}, "/get_started/en/usage/gitbook2teedoc.html": {"title": "Quickly convert from gitbook to teedoc", "content": "---\ntitle: Quickly convert from gitbook to teedoc\nkeywords: gitbook, teedoc\ndesc: Quickly convert from gitbook to teedoc, get rid of gitbook single-threaded construction turtle speed\n---\n\n\nIntroduce how to quickly convert from gitbook to teedoc, because gitbook has stopped maintenance, and some features are no longer suitable for current use, such as single-threaded construction, which is very slow.\n\nTake [re0-web](https://github.com/lyy289065406/re0-web/tree/033f5dfd7c9d3b8654b3c1ea4dabfab8b3ebebb7) as an example:\n\n\nThe author said in the readme that it takes 30 minutes to build once, but after looking at the source code, the number of documents is not a lot, and it shouldn't take so long.After seeing that the author uses docker, and it is under windows, it is naturally very slow. The solution is to switch to the linux build, which will speed up some speed, and it is estimated that the build can be completed in 5 minutes.\n\nTeedoc has the advantage of multi-threaded construction, and other functions and UI can also be satisfied, you can consider switching to teedoc (but teedoc does not support epub and pdf export (2021-05-29), if it is supported, it will be in [here](../index.html) description)\n\n\nFinal effect: [teedoc.github.io/re0-web-teedoc/](https://teedoc.github.io/re0-web-teedoc/)\n\n## New teedoc project\n\n```\nmkdir re0-web-teedoc\ncd re0-web-teedoc\nteedoc init\nteedoc install\n```\n\nUse the `teedoc serve` command to start the build and start an http service, visit `http://127.0.0.1:2333` to preview\n\nUse the `teedoc build` command to build a version that can be deployed to the server, the file is in the `out` directory, you can delete the `out` directory before building\n\n\n## Copy source file\n\n\nThe source files of the `re0-web` project are under the `gitbook/markdown` directory, the resource files (pictures) are all placed in `gitbook/res`, and the directory files on the left are in `gitbook/SUMMARY.md`\n\nOther files are not important, they are all project files or generated files, so we only need to copy them\n\nFor example, create a folder `books/re0`, then copy the contents of the original project `gitbook/markdown/ch/` directory to the `books/re0/ch/` directory, and copy the original project `gitbook/markdown/jp/` Copy the contents of the directory to the `books/re0/jp/` directory, and copy the original projects `gitbook/markdown/character.md` and `gitbook/README.md` to `books/re0/ch/` and `gitbook/markdown/jp/`\n\nIn addition, create a folder `books/res/` for the resource files, copy all the files in the original project `gitbook/res/` directory to the `books/res/` directory\n\n\n## Create configuration for each document\n\nCopy the `config.json` and `sidebar.yaml` files from the `docs/get_started/zh/` directory to `books/re0/ch/` and `books/re0/jp/`\n\nEach directory with `config.json` is equivalent to **a document**, or **a book**\n\n\n\n## Modify site_config.json\n\n* Modify route\n\nEdit `site_config.json`, find the key value of `route`, modify the content:\n```json\n     \"route\": {\n        \"docs\": {\n            \"/gitbook/book/markdown/ch/\": \"books/re0/ch\",\n            \"/gitbook/book/markdown/jp/\": \"books/re0/jp\"\n        },\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n            \"/en/\": \"pages/index/en\"\n        },\n        \"assets\": {\n            \"/static/\": \"static\",\n            \"/res/\": \"books/res\"\n        },\n```\n\nHere `url` is compatible with the previous path `gitbook/book/markdown/` and the resource path `/res/`.\n\nBecause `re0-web` project source file pictures use absolute path `url` such as `<img width=\"500\" src=\"/res/img/article/chapter010/12.jpg\" />`, So here `/res/` is alluded to the `books/res` folder;\n\nIn addition, a relative path can be used in the source file, but the directory must be in the same document, such as in this document (click on the upper right corner to edit this page to see the source code), `![](../assets/images/logo. png)`: ![](../assets/images/logo.png)\n\nBecause the `assets` directory is also under the `get_started/zh/` directory, it can be directly referenced, but directories beyond the scope of this document cannot be directly referenced by relative paths.\n\n\nBut there are also ways to achieve it, such as quoting the resources in the `get_started/assets/` directory here, which can also be referenced in the `get_started/zh/` directory, just need to configure the `route` cleverly, as follows:\ndefault\n```json\n    \"route\": {\n        \"docs\": {\n            \"/get_started/zh/\": \"docs/get_started/zh\",\n        },\n        \"assets\": {\n            \"/get_started/assets/\": \"docs/get_started/assets\"\n        },\n```\n\n* Modify other\n\nModify `title` `domain` `source` etc.\n\n\n## Sidebar Directory\n\n* View documentation\n\nIf you use `teedoc serve` at this time, you can actually see the document at `http://127.0.0.1:2333/gitbook/book/markdown/ch/character.html`\n\nBut the list on the left is not finished yet, now modify the left list\n\n* Convert SUMMARY.md\n\nEnter `books/re0/ch/`, earlier we copied a file of `sidebar.yaml`, now we need to convert the `SUMMARY.md` of gitbook into this file format\n\nFind the `SUMMARY.md` file of the previous `gitbook` project, and execute\n\n```shell\nteedoc -f'SUMMARY.md' summary2yaml\n```\n\nWe get a `sidebar.yaml` file, copy it to the `books/re0/ch/` directory and overwrite the previous `sidebar.yaml`\n\n* Modify the file path of sidebar.yaml\n\nBecause the previous directory structure may not be similar to the directory structure of the new project, you need to modify the file path in `sidebar.yaml`, for example:\n\n`markdown/character.md` is changed to `character.md`, which is the path relative to the document (the directory with `config.json`)\n`markdown/ch/chapter010/README.md` is changed to `chapter010/README.md`, you can batch replace `markdown/ch/` as empty, which can be done in many editors, such as `vscode` and press `Ctrl +H` key to modify\n\nIf you want the link (`url`) to open in a new window, just add a `target: _blank` key value.\n\n\n* View the effect\n\nThen execute `teedoc serve` to visit `http://127.0.0.1:2333/gitbook/book/markdown/ch/index.html` and you can see the directory on the left, and you can get the same for the directory of `jp`\n\n\n## Edit navigation bar\n\nThe navigation bar needs to be edited as needed\n\n### Edit template `config/config_zh.json`\n\n```json\n{\n    \"class\": \"language_zh\",\n    \"navbar\": {\n        \"title\": \"re0-web\",\n        \"logo\": {\n            \"alt\": \"re0-web logo\",\n            \"src\": \"\"\n        },\n        \"home_url\": \"/\",\n        \"items\": [\n            {\n                \"url\": \"/gitbook/book/markdown/ch/\",\n                \"label\": \"Chinese\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/gitbook/book/markdown/jp/\",\n                \"label\": \"日本语\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"https://github.com/teedoc/re0-web-teedoc\",\n                \"label\": \"github\",\n                \"target\": \"_blank\",\n                \"position\": \"right\"\n            },\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/\",\n                        \"label\": \"Chinese\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"footer\":{\n        \"top\":[\n            {\n                \"label\": \"Link\",\n                \"items\": [\n                    {\n                        \"label\": \"Use teedoc to build\",\n                        \"url\": \"https://teedoc.neucrack.com\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"Site Map\",\n                        \"url\": \"/sitemap.xml\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Source\",\n                \"items\": [\n                    {\n                        \"label\": \"Source files of this website\",\n                        \"url\": \"https://github.com/teedoc/re-web-teedoc\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            }\n        ],\n        \"bottom\": [\n        ]\n    },\n    \"plugins\": {\n        \"teedoc-plugin-search\":{\n            \"config\": {\n                \"search_hint\": \"Search\",\n                \"input_hint\": \"Enter keywords, separate multiple keywords with spaces\",\n                \"loading_hint\": \"Loading, please wait...\",\n                \"download_err_hint\": \"Failed to download file, please refresh and try again or check the network\",\n                \"other_docs_result_hint\": \"Results from other documents\",\n                \"curr_doc_result_hint\": \"Current document search result\"\n            }\n        }\n    },\n    \"show_source\": \"Edit this article\"\n}\n```\n\nAnother `config_en.json` can be renamed to `config_jp.json`, similarly modify the following content, by the way, rename `pages/index/en` to `pages/index/jp`\n\n```json\n{\n    \"navbar\": {\n        \"title\": \"re0-web\",\n        \"logo\": {\n            \"alt\": \"re0-web logo\",\n            \"src\": \"\"\n        },\n        \"home_url\": \"/jp/\",\n        \"items\": [\n            {\n                \"url\": \"/gitbook/book/markdown/ch/\",\n                \"label\": \"Chinese\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/gitbook/book/markdown/jp/\",\n                \"label\": \"日本语\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"https://github.com/neutree/re0-web-teedoc\",\n                \"label\": \"github\",\n                \"target\": \"_blank\",\n                \"position\": \"right\"\n            },\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/\",\n                        \"label\": \"Chinese\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"footer\":{\n        \"top\":[\n            {\n                \"label\": \"Links\",\n                \"items\": [\n                    {\n                        \"label\": \"Site generated by teedoc\",\n                        \"url\": \"https://teedoc.neucrack.com\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"Sitemap\",\n                        \"url\": \"/sitemap.xml\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Source code\",\n                \"items\": [\n                    {\n                        \"label\": \"website source files\",\n                        \"url\": \"https://github.com/teedoc/re0-web-teedoc\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            }\n        ],\n        \"bottom\": [\n        ]\n    }\n}\n```\n\n### Modify the configuration file config.json of each book (/document)\n\n* Modify `books/re0/ch/config.json`\n\n```json\n{\n    \"import\": \"config_zh\",\n    \"navbar\": {\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/gitbook/book/markdown/ch/\",\n                        \"label\": \"Chinese\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/gitbook/book/markdown/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n* Modify `books/re0/jp/config.json`\n\n```json\n{\n    \"import\": \"config_jp\",\n    \"navbar\": {\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/gitbook/book/markdown/ch/\",\n                        \"label\": \"Chinese\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/gitbook/book/markdown/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n## Edit home page\n\nEdit `pages/index/zh/README.md`, modify as needed\n\n\n## Deployment\n\nLike `gitbook`, `teedoc build` generates static files and puts them in the `out` folder, and can be directly copied to the server for deployment. For more information, please see [document](./deploy.html)\n\nFinal effect: [teedoc.github.io/re0-web-teedoc/](https://teedoc.github.io/re0-web-teedoc/)"}, "/get_started/en/usage/deploy_cdn.html": {"title": "Deploy the website generated by teedoc to CDN", "content": "---\ntitle: Deploy the website generated by teedoc to CDN\nkeywords: teedoc, deployment, CDN\ndesc: Deploy the website generated by teedoc to CDN\n---\n\n\n\n\nIn order to allow users in various places to access the site more quickly, you can use CDN acceleration,\nA brief introduction to the principle is to first put the website on an origin server, and then synchronize this resource to nodes across the country or even the world.\nThe browser wants to access the website through the domain name. The server pointed to by this domain name only does one thing, which is to resolve the location of the browser, and then return it to the IP address of the node closest to the browser, and then the browser directly visits the nearest node To accelerate\n\n\nFirst find a CDN provider, such as Alibaba Cloud, Tencent Cloud and Qiniu Cloud.\n\nThen the steps are as follows:\n\n## create origin server\n\n\nCreate the source server by yourself. After the source server is updated, the service provider automatically updates to each node.\n\nCreate a website according to the previous method and get `domain name A`, such as `teedoc.github.io`\n\n\n## Add CDN acceleration to website\n\nIf it is a service provider in China, you need to have a registered `domain name B` first, then register and log in, add a `CDN` service, and set the back-to-origin site to the previously established website `domain name A`.\n\nThen visit `domain name B`, the service provider will automatically pull the webpage from `domain name A` and synchronize it to each node in the country or the world, and then the user will be redirected to the `IP` of the node closest to the user when they visit `domain name B`. to ensure the fastest browsing speed"}, "/get_started/en/usage/sites.html": {"title": "The website that uses teedoc", "content": "---\ntitle: The website that uses teedoc\nkeywords: teedoc, sites use teedoc\ndesc: teedoc, convert markdown or jupyter notbook into html static webpage, use teedoc website\n---\n\n\n| Site | Brief | Site source doc |\n| ---- | ----- | ----------- |\n| [teedoc official website](https://teedoc.github.io) | a useful documentation website generator | [teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) |\n| [MaixPy](https://maixpy.sipeed.com)                 | Edge AI Computing Python SDK | [sipeed/MaixPy_DOC](https://github.com/sipeed/MaixPy_DOC) |\n| [Sipeed Wiki](https://wiki.sipeed.com)              | Sipeed Official Wiki | [sipeed/sipeed_wiki](https://github.com/sipeed/sipeed_wiki) |\n| [teedoc.github.io/re0-web-teedoc/](https://teedoc.github.io/re0-web-teedoc/)   | example site converted from gitbook site | [teedoc/re0-web-teedoc](https://github.com/teedoc/re0-web-teedoc) |\n| [QuecPython](https://python.quectel.com/doc/)       | QuecPython documentation center | [gitee](https://gitee.com/quecpython/Community-document) [github](https://github.com/quecpython/Community-document) |\n| [BPI Steam Doc](https://bpi-steam.com/)             | BananaPi, Steam team documentation (Wiki), including open source software and open source hardware information, AIOT information, etc. | [BPI-STEAM/BPI-Doc](https://github.com/BPI-STEAM/BPI-Doc) |\n| [udbg](https://udbg.github.io/) |  Dynamic binary analysis tools based on Lua | [udbg/udbg.github.io](https://github.com/udbg/udbg.github.io) |\n| [VastUtils](https://sakurajimamaii.github.io/VastDocs/) | Easy Quick Android Utils for you to faster project development | [SakurajimaMaii/VastDocs](https://github.com/SakurajimaMaii/VastDocs) |\n\n\nLooking forward to your use, welcome to [submit issue](https://github.com/teedoc/teedoc.github.io/issues) or PR to add your website"}, "/get_started/en/syntax/syntax_html.html": {"title": "Write content directly from HTML files", "content": "{% extends \"article.html\" %} {% block title %}\n\n# Write content directly from HTML files\n\n{% endblock %} {% block content %}\n\n## Use HTML syntax directly\n\nWrite content directly in HTML syntax.\n\nThis file is written directly in html, click on the source code at the top\nright `edit this page`view\n\n## Also supports [Jinja2](https://jinja.palletsprojects.com/) syntax\n\n    \n    \n    \n    {% raw %}\n    {% extends \"article.html\" %}\n    Note that \"article.html\" needs to be enclosed in quotation marks, otherwise it will prompt that the article cannot be found\n    \n    {% block title %}\n    \n    \n    # Write content directly from HTML files\n    \n    \n    {% endblock %}\n    \n    {% block content %}\n    \n    \n    ## Use HTML syntax directly\n    \n    \n    {% endblock %}\n    {%endraw%}\n    \n\nHere you can see that this page inherits from `article.html` and modifies\n`title` and `content` so that the navigation bar and side can be preserved\nbar, and use themes too. For the specific content that can be modified, you\ncan view the source code of the template, the templates that can be used, and\nrefer to the template files provided by the theme, such as the template files\nof the default theme at [here](https://github.com/teedoc/teedoc/tree/main) And\nthe variables that the page can use refer to the variable description in\n[Custom Page Template](../usage/layout_template.html).\n\n## html files are used as template files\n\nIn addition to writing pages directly in html, you can also write a template\nin html first, put it in the `layout` directory, and use this template in the\n`.md` file. The content in the `.md` file will be passed to `html` in the\n`body` variable, directly through `{% raw %}{{ body| safe }}{% endraw %}` use,\nHere `safe` means no escaping, so that html can be written directly in the\n`.md` file. See [Custom Page Templates](../usage/layout_template.html) for\nmore custom template content. {% endblock %}\n\n"}, "/get_started/en/syntax/syntax_jupyter.html": {"title": "Jupyter notebootk Support (.ipynb format)", "content": "Thisarticleiswrittenbyjupyter(`.ipynb`format),thesourcedocument,pleaseclickontheupperrightcorner`Editthispage`toviewThe`jupyter-notebook`plugin`teedoc-plugin-jupyter-notebook-parser`maynotbeusedbydefault,itneedstobeconfiguredinthe`site_config`file```json\"plugins\":{\"teedoc-plugin-jupyter-notebook-parser\":{\"from\":\"pypi\",\"config\":{}}}```##MarkdownmetadataheaderEach`md`filecanaddaheader,alsocalled`metadata`(metadatainChinese).Thearticleinformationissetthroughthesekeyvalues,andtheformatis`yaml`format.Ofcourse,thisfileheaderisoptional,oryoucanDonotwrite```markdown---title:markdownsyntaxtags:teedoc,markdown,syntaxkeywords:teedoc,markdown,syntaxdesc:teedoc'smarkdownsyntaxintroductionandexamplesid:zh_readmeclass:zh_readme#Startwitha#signtoindicateacomment---```*`title`:thetitleofthearticle,canbeusedifthereisnometadataheader```markdown#Articletitle```or```markdownarticletitle===```*`keywords`:Keywords,multiplekeywordsseparatedbycommas`,`willbeaddedtothe`html`header,whichisconvenientforsearchenginestocrawl,andwillnotbedisplayedonthepage.Canalsobewrittenin`yaml`listformat```markdownkeywords:-teedoc-markdown-grammar```*`desc`:Thepagedescriptionwillbeaddedtothe`html`headerandwillnotbedisplayedonthepage,whichisconvenientforsearchenginestocrawl*`tags`:articletags,whichwillbedisplayedonthepage.Multipletagsareseparatedbycommas`,`,ortheycanbewrittenintheformatof`yaml`list,sameas`keywords`*`id`:The`id`ofthepage,whichwillbeaddedtothe`html`tag,suchas`<htmlid=\"zh_readme\">...</html>`,usuallynotneeded,usuallyinasinglepageforacertainpageItmaybeusedwhencustomizing`css`alone,itwilloverridethesettingsin`config.json`*`class`:page`class`,separatedbycommas`,`,cannotbeset,itwilloverridethesettingsin`config.json`.Forexample,youcansetthe`css`styleofaspecificpagebysettingthisvalue.Forspecificsupportedstyles,see[themeplugindocumentation](../plugins/themes.md)*`layout`:Thelayouttemplateusedbythepage.Bydefault,theconfigurationinthethemepluginwillbeused.Ifyouneedtocustomizethelayoutofthispage,youcansetthisparameter.Thepathisrelativetothepathsetby`layout_root_dir`in`site_config`,`layout_root_dir`defaultsto`layout`,sotouse`layout/special_layout.html`justfillin`special_layout.html`.Forlayouttemplatesyntaxsee[layoutdocumentation](../usage/layout_template.md)*`date`:thelastupdatedate,theformatis`2022-09-15`*Ifnotset:Thelastmodificationtimeofthefilewillbeusedbydefault.Ifitisa`git`repository,itwillautomaticallygetthetimeofthelastcommitofthepagefrom`git`.Thesystemreadsthelastmodifiedtime(thisismostlikelyinaccurate).Inaddition,if`update`isfilledwithavalue,thelatestmodificationdatein`update`willbeused*Ifyoudon'twanttoshowthelastmodifieddate,disableitbysettingthevalueto`false`*Ifthe`update`valueisset,thevaluein`date`willstillbeusedfirst*`update`:updatehistory,anupdatehistorytablewillbegeneratedatthebeginningofthearticle,format:```markdownupdate:-date:2022-09-15author:author1version:1.1.0content:updatedxxx-date:2022-08-05author:author2version:1.0.0content:updatedxxx```##Markdownsyntax(thisisthesecondlevelheading)Markdownsyntaxcanreferto[Markdownsyntax](./syntax_markdown.md),`jupyter`'ssyntaxparsercomefrom[jupyterofficial](https://github.com/jupyter/nbconvert),somaybesomesyntaxnotsupportin`jupyter`notebookthatmarkdownfile(`.md`)alreadysupported.###Three-levelheading####Four-levelheadingSameasMarkdownpage,see[MarkdownSyntax](./syntax_markdown.md)pagefordetails###Three-levelheading2####Four-levelheading2##Link[Relativepath,README.mdfile](../README.md):`../README.md`,itwillbeautomaticallyconvertedto`index.html`[Relativepath,mdfile](./syntax_markdown.md):`./syntax_markdown.md`,whichwillbeconvertedintoalinkattheendofthedocument`.html`[Absolutepath,httpfile](https://storage.googleapis.com/tensorflow_docs/docs-l10n/site/zh-cn/tutorials/quickstart/beginner.ipynb):`https://.../beginner.ipynb`,theoriginallink,willnotbemodified[Relativepath,ipynbfile](./syntax_jupyter.ipynb):`./syntax_jupyter.ipynb`,whichwillbeconvertedintoalinkattheendofthedocument`.html`##Picture![](../assets/images/logo.png)##CodeThefollowingisthepythoncode,whichcancontaintheexecutionresult.Use`jupyter`or[jupyterlab](https://jupyter.org/install)or`vscode`locallytoexecutethecodeandsaveitprint(\"hello\")helloprint(\"world\\nworld\")world\nworld##CodeoutputdisplaypictureTheimageofthecodeoutputwillbeintegratedinthepage:fromPILimportImageimg=Image.open(\"../assets/images/logo.png\")frommatplotlibimportpyplotaspltprint(\"image\")plt.figure()plt.imshow(img)plt.show()print(\"image\")imageimage##mathSupports`tex`and`Latex`syntax,and`MathML`tagTwowaysofwriting,*Oneisinlineinline,wraptheequationwith`$`symbol,forexample```markdownThemass-energyequation$E=mc^2$isfamiliartoeveryone,right?```>Effect:>Mass-energyequation$E=mc^2$everyoneisfamiliarwith*Anothertype,blockequation,wraptheequationwith`$$`,suchas```markdown$$E=mc^2$$```>Effect:>$$>E=mc^2>$$Otherexamples:common:```markdownWhen$a\\ne0$,therearetwosolutionsto$ax^2+bx+c=0$andtheyare$$x={-b\\pm\\sqrt{b^2-4ac}\\over2a}.$$```>When$a\\ne0$,therearetwosolutionsto$ax^2+bx+c=0$andtheyare>$$>x={-b\\pm\\sqrt{b^2-4ac}\\over2a}.>$$"}, "/get_started/en/syntax/syntax_markdown.html": {"title": "markdown syntax", "content": "---\ntitle: markdown syntax\ntags: teedoc, markdown, syntax\nkeywords: teedoc, markdown, syntax\ndesc: teedoc's markdown syntax introduction and examples\nupdate:\n  - date: 2021-09-19\n    version: Plugin v2.10.3\n    author: neucrack\n    content:\n      - Metadata fully support yaml format\n      - Support <code>update</code> meta key to generate update history table\n      - Support customize header ID with <code>{#id}</code> syntax\n      - Support <code>tabset</code> syntax\n      - Support <code>details</code> syntax\n      - Support subscript and superscript syntax\n---\n\n> This article is a document written using `Markdown`, using the page effect generated by `teedoc`, the source code of `Markdown` file can be found [here](https://github.com/teedoc/teedoc.github.io/blob/main/docs/get_started/en/syntax/syntax_markdown.md)\n\n## Markdown using brief\n\nThe file placed under the document directory, if it is a recognized file, such as `*.md`, it will be converted to `*.html`, if it is not recognized, such as `*.jpg`, it will be copied intact into the output folder (`out`).\n\nThe default `Markdown` parsing is done by the plugin `teedoc-plugin-markdown-parser`, which is used by default in the template project.\n\nIf you need to link the documentation to the left directory, configure it in `sidebar.json` or `sidebar.yaml`.\n\nIf you have used `Markdown`, it is also highly recommended to spend 2 minutes browsing it!\n\n\n## Markdown basic content format\n\nYou need to confirm that a `markdown` parser plugin is enabled in `site_config.json`, such as `teedoc-plugin-markdown-parser`.\n\nCreate a folder or file in the directory corresponding to `config.json`, such as `get_started/zh/syntax/syntax_markdown.md` (`README.md` will eventually generate `index.html`), pay attention to use `UTF- 8` file encoding (do not use `Windows` default Notepad), it is recommended to use [vscode](https://code.visualstudio.com/) + `Markdown Preview Enhanced` plugin, the default file will be `UTF-8 `Encoding, if not, you can also click the encoding in the lower right corner and click the pop-up option `Save with encoding` and select `UTF-8` to change the encoding.\n![vscode_status_bar](../../assets/images/vscode_status_bar.png)\n\n\n### Markdown metadata header\n\nEach `md` file can add a header, also called `metadata` (metadata in Chinese). The article information is set through these key values, and the format is `yaml` format. Of course, this file header is optional, or you can Do not write\n\n```markdown\n---\ntitle: markdown syntax\ntags: teedoc, markdown, syntax\nkeywords: teedoc, markdown, syntax\ndesc: teedoc's markdown syntax introduction and examples\nid: zh_readme\nclass: zh_readme\n# Start with a # sign to indicate a comment\n---\n```\n\n* `title`: the title of the article, can be used if there is no metadata header\n```markdown\n# Article title\n```\nor\n```markdown\narticle title\n===\n```\n\n* `keywords`: Keywords, multiple keywords separated by commas `,` will be added to the `html` header, which is convenient for search engines to crawl, and will not be displayed on the page. Can also be written in `yaml` list format\n```markdown\nkeywords:\n  - teedoc\n  - markdown\n  - grammar\n```\n* `desc`: The page description will be added to the `html` header and will not be displayed on the page, which is convenient for search engines to crawl\n* `tags`: article tags, which will be displayed on the page. Multiple tags are separated by commas `,`, or they can be written in the format of `yaml` list, same as `keywords`\n* `id`: The `id` of the page, which will be added to the `html` tag, such as `<html id=\"zh_readme\">...</html>`, usually not needed, usually in a single page for a certain page It may be used when customizing `css` alone, it will override the settings in `config.json`\n* `class`: page `class`, separated by commas `,`, can not be set, it will override the settings in `config.json`. For example, you can set the `css` style of a specific page by setting this value. For specific supported styles, see [theme plugin documentation](../plugins/themes.html)\n* `layout`: The layout template used by the page. By default, the configuration in the theme plugin will be used. If you need to customize the layout of this page, you can set this parameter. The path is relative to the path set by `layout_root_dir` in `site_config`, `layout_root_dir` defaults to `layout`, so to use `layout/special_layout.html` just fill in `special_layout.html`. For layout template syntax see [layout documentation](../usage/layout_template.html)\n* `date`: the last update date, the format is `2022-09-15`\n  * If not set: The last modification time of the file will be used by default. If it is a `git` repository, it will automatically get the time of the last commit of the page from `git`. The system reads the last modified time (this is most likely inaccurate). In addition, if `update` is filled with a value, the latest modification date in `update` will be used\n  * If you don't want to show the last modified date, disable it by setting the value to `false`\n  * If the `update` value is set, the value in `date` will still be used first\n* `update`: update history, an update history table will be generated at the beginning of the article, format:\n```markdown\nupdate:\n  - date: 2022-09-15\n    author: author1\n    version: 1.1.0\n    content: updated xxx\n  - date: 2022-08-05\n    author: author2\n    version: 1.0.0\n    content: updated xxx\n```\n\n### Markdown content\n\nThe content is written in `Markdown` syntax, because the main title will be converted into a `<h1>` tag, so it is recommended to start with the second-level title in the content. Such a page has only one `<h1>` tag, which is convenient for search engines to crawl take, such as\n\n```markdown\n---\ntitle: teedoc\n---\n\n## Title one\n\ncontent. . .\n\n## title two\n\ncontent. . .\n```\n\n## title\n\n### Level 3 heading\n\n#### Level 4 heading\n\n#### Level 4 Heading 2\n\n#### Level 4 Heading 3\n\n##### Level 5 heading\n\n###### Level 6 heading\n\n### Title custom id {#custom-id}\nHere the custom `id` is `custom-id`\n\nUp to level 6 headings\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    ### Level 3 heading\n\n    #### Level 4 heading\n\n    #### Level 4 Heading 2\n\n    #### Level 4 Heading 3\n\n    ##### Level 5 heading\n\n    ###### Level 6 heading\n\n    ### Title custom id {#custom-id}\n    Here the custom `id` is `custom-id`\n    ```\n\n## emphasis, italics, strikethrough\n\nWe only know that **Earth** has the environment for humans to live, and ~~Mars~~, and maybe *other planets*.\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    We only know that **Earth** has the environment for humans to live, and ~~Mars~~, and maybe *other planets*.\n    ```\n\n## separator\n\ndelimiter\n```markdown\n---\n***\n```\n\n---\n***\n\n## Link\n\n[relative path, README.md file](../index.html): `../README.md`, will be automatically converted to `index.html`\n[relative path, md file](./syntax_markdown.html): `./syntax_markdown.md`, will be converted to a link at the end of `.html` of the document\n[absolute path, http file](https://storage.googleapis.com/tensorflow_docs/docs-l10n/site/en-us/tutorials/quickstart/beginner.ipynb): `https://. . . /beginner.ipynb`, the original link, will not be modified\n[relative path, ipynb file](./syntax_jupyter.html): `./syntax_jupyter.ipynb`, will be converted to a link at the end of `.html` of the document\n\n.. details::Markdown source code, click to expand\n   ```markdown\n   [relative path, README.md file](../index.html)\n   [relative path, md file](./syntax_markdown.html)\n   [absolute path, http file](https://storage.googleapis.com/tensorflow_docs/docs-l10n/site/en-us/tutorials/quickstart/beginner.ipynb)\n   [relative path, ipynb file](./syntax_jupyter.html)\n   ```\n\n## list\n\nList item:\n* steamed stuffed bun\n* Steamed bun\n* Tea eggs\n\n* aaaaaaa\n  * Secondary list\n  * Secondary list\n  * Secondary list\n    * Three-level list\n    * Three-level list\n*bbbbbb\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    List item:\n    * steamed stuffed bun\n    * Steamed bun\n    * Tea eggs\n\n    * aaaaaaa\n      * Secondary list\n      * Secondary list\n      * Secondary list\n        * Three-level list\n        * Three-level list\n    *bbbbbb\n    ```\n\n## code snippet\n\nThis is an inline code `print(\"hello\")`, or emphasis `teedoc`\n```python\nprint(\"hello\")\n\nprint(\"world\")\n```\n\n```c\n#include \"stdio.h\"\n\nint main()\n{\n    printf(\"hello world\");\n}\n```\n\n.. details::Markdown source code, click to expand\n   ```markdown\n        This is an inline code `print(\"hello\")`, or emphasis `teedoc`\n        ```python\n          print(\"hello\")\n\n          print(\"world\")\n        ```\n\n        ```c\n          #include \"stdio.h\"\n\n          int main()\n          {\n              printf(\"hello world\");\n          }\n        ```\n   ```\n\n## Comment (quote block)\n\nBelow is a note\n> Here is a comment (`<blockquote></blockquote>`)\n> this is the second line of the comment\n```python\n# Here is the code snippet in the comment\nprint(\"hello\")\n```\n\n\n> Notes\n> comment nesting\n> comment nesting\n\nUse markdown syntax in block quotes\n\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n> *Everything* is going according to **plan**.\n> ```c\n> printf(\"hello\");\n> ```\n\n.. details::Markdown source code, click to expand\n   ```markdown\n        Below is a note\n        > Here is a comment (`<blockquote></blockquote>`)\n        > this is the second line of the comment\n        ```python\n        # Here is the code snippet in the comment\n        print(\"hello\")\n        ```\n        > Notes\n        > comment nesting\n        > comment nesting\n\n        Use markdown syntax in block quotes\n\n        > #### The quarterly results look great!\n        >\n        > - Revenue was off the chart.\n        > - Profits were higher than ever.\n        >\n        > *Everything* is going according to **plan**.\n        > ```c\n        > printf(\"hello\");\n        > ```\n   ```\n\n## warn\n\nThe following is a warning message\n\n>! This is a warning message (`<blockquote class=\"spoiler\"></blockquote>`)\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    >! This is a warning message (`<blockquote class=\"spoiler\"></blockquote>`)\n    ```\n\n## Emoji\n\nThe `emoji` syntax is not currently supported, but you can directly copy the emoji from the `emoji` to the document, for example:\n🍊 🍇 😀 😅 😇\n\n## superscript\n\nH~2~O, y = x^2^\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    H~2~O, y = x^2^\n    ```\n\n## picture\n\nResource files will be copied to the output folder (`out`), so the most important thing is how to reference them in the documentation\n* The easiest and recommended method\n  Use relative paths:\n  Resource files can be placed in the corresponding directory of the document, such as document `docs/get_started/zh`, you can create `docs/get_started/zh/assets/images/logo.png`,\n  Then use relative path references in `docs/get_started/en/README.md`, i.e. `![](assets/images/logo.png)`\n* Advanced method\n  This situation is suitable for multiple documents referencing resources in the same folder (`url`), which is convenient for maintaining multiple documents, such as multilingual translation, or reducing `CDN` traffic consumption.\n  Use resources outside the document path, configured in `site_config.json`\n  ```json\n  {\n      \"route\": {\n          \"docs\": {\n              \"/get_started/en/\": \"docs/get_started/en\",\n          },\n          \"assets\": {\n              \"/get_started/assets/\": \"docs/get_started/assets\"\n          }\n      }\n  }\n  ```\n  This setting will copy the entire directory of `docs/get_started/assets` to `/get_started/assets`\n  So just use relative path references in `docs/get_started/en/README.md`, i.e. `![](../assets/images/logo.png)`\n\n\nTo display this image, you need to set the `route` key in `site_config.json`\n\n![This is an image](../../assets/images/logo.png)\n![This is an image](../assets/images/logo.png)\n\n![This is an image](../../assets/images/logo.png)![This is an image](../assets/images/logo.png)\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    ![This is an image](../../assets/images/logo.png)\n    ![This is an image](../assets/images/logo.png)\n\n    ![This is an image](../../assets/images/logo.png)![This is an image](../assets/images/logo.png)\n    ```\n\n## video\n\nUse the HTML `video` tag directly:\n\n```html\n<video src=\"https://****.com/***.mp4\" controls=\"controls\" preload=\"auto\">your brower not support play video</video>\n```\n\nThere is no video here, so it is blank, put in the correct video and it can be played\n\n<video src=\"\" controls=\"controls\" preload=\"auto\">your brower or site not support play video</video>\n\n\n## iframe embedded web page\n\nThe code shared by the general video platform can be used directly, you can set the width and height slightly\n\n<iframe src=\"//player.bilibili.com/player.html?aid=52613549&bvid=BV144411J72P&cid=92076022&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\" true\" style=\"width:43vw;height:34vw;min-width: 85%;\"> </iframe>\n\n.. details::Markdown source code, click to expand\n    ```html\n    <iframe src=\"//player.bilibili.com/player.html?aid=52613549&bvid=BV144411J72P&cid=92076022&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\" true\" style=\"width:43vw;height:34vw;min-width: 85%;\"> </iframe>\n    ```\n\n## quote mark\n\nI can cook I am proud. [^ dry rice man]\n\n[^ Dry Rice Man]: Lao Tzu said\nThis will be annotated at the end of the article\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    I can cook I am proud. [^ dry rice man]\n\n    [^ Dry Rice Man]: Lao Tzu said\n    This will be annotated at the end of the article\n    ```\n\n## sheet\n\n| Header 1 | *Header* 2 |\n| -------- | -------- |\n| `Cell 1` | [Cell 2](http://example.com) link |\n| Cell 3 | **Cell 4** |\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    | Header 1 | *Header* 2 |\n    | -------- | -------- |\n    | `Cell 1` | [Cell 2](http://example.com) link |\n    | Cell 3 | **Cell 4** |\n    ```\n\n## task list\n\n- [x] Mission 1\n- [x] Mission 2\n- [ ] Mission 3\n- [ ] Mission 4\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    - [x] Mission 1\n    - [x] Mission 2\n    - [ ] Mission 3\n    - [ ] Mission 4\n    ```\n\n## Title link (in-page jump)\n\n\nFor example, to jump to the title [iframe embedded web page] (#iframe-embedded web page), just\n```markdown\n[iframe embedded web page](#iframe-embedded web page)\n```\n\nHere spaces are replaced with a minus sign `-`.\nIn addition, if the title can also customize the `id`, such as\n```markdown\n## iframe embedded web page {#iframe-embed}\n```\n\n\n\n## HTML\n\nYou can write `HTML` directly in the `md` file:\n\n<div class=\"hello\">\nhello <br/> <img src=\"../../assets/images/logo.png\"/>\n</div>\n\n.. details::Markdown source code, click to expand\n   Note that there are no blank lines\n   ```html\n   <div class=\"hello\">\n   hello <img src=\"../../assets/images/logo.png\"/>\n   </div>\n   ```\n\n\n## math\n\nSupports `tex` and `Latex` syntax, as well as `MathML` tags\n\ntwo spellings,\n* One is inline, wrap the equation with the `$` symbol, such as\n\nThe mass-energy equation $E=mc^2$ is familiar to everyone, right?\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    The mass-energy equation $E=mc^2$ is familiar to everyone, right?\n    ```\n\n* Another, block equation, wrap the equation with `$$`, such as\n\n$$\nE=mc^2\n$$\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    $$\n    E=mc^2\n    $$\n    ```\n\nOther examples:\ncommon:\n\nWhen $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\n$$\nx = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\n$$\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\n    $$\n    x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\n    $$\n    ```\n\nDivide by:\n\n$$\n\\require{enclose}\n\\begin{array}{r}\n                13 \\\\[-3pt]\n4 \\enclose{longdiv}{52} \\\\[-3pt]\n     \\underline{4}\\phantom{2} \\\\[-3pt]\n                12 \\\\[-3pt]\n     \\underline{12}\\\\0\n\\end{array}\\\\\n$$\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    $$\n    \\require{enclose}\n    \\begin{array}{r}\n                    13 \\\\[-3pt]\n    4 \\enclose{longdiv}{52} \\\\[-3pt]\n        \\underline{4}\\phantom{2} \\\\[-3pt]\n                    12 \\\\[-3pt]\n        \\underline{12}\\\\0\n    \\end{array}\\\\\n    $$\n    ```\n\nBoxed:\n\n$$\n\\bbox[#cde, 3px,border:1px solid blue]{y=x^2-1}\n$$\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    $$\n    \\bbox[#cde, 3px,border:1px solid blue]{y=x^2-1}\n    $$\n    ```\n\n## mermaid support\n\nUse mermaid to draw many types of charts. For detailed syntax and support, please see [official website](https://mermaid-js.github.io/)\n\n```mermaid\nsequenceDiagram\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n      John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n```\n\n.. details::Markdown source code, click to expand\n    ```markdown\n        ```mermaid\n        sequenceDiagram\n          Alice->>John: Hello John, how are you?\n          loop Healthcheck\n              John->>John: Fight against hypochondria\n          end\n          Note right of John: Rational thoughts!\n          John-->>Alice: Great!\n          John->>Bob: How about you?\n          Bob-->>John: Jolly good!\n        ```\n    ```\n    Or directly `html`:\n      ```html\n      <div class=\"mermaid\">\n      sequenceDiagram\n        Alice->>John: Hello John, how are you?\n        loop Healthcheck\n            John->>John: Fight against hypochondria\n        end\n        Note right of John: Rational thoughts!\n        John-->>Alice: Great!\n        John->>Bob: How about you?\n        Bob-->>John: Jolly good!\n      </div>\n    ```\n\n## Tab page (tabset) support\n\n> Because it is not a standard Markdown syntax, currently only supported by teedoc, so choose to use it according to your needs\n> Of course, generalization of the format to other parsers is also welcome\n\nEffect:\n\n.. tabset::tab title (optional)\n    :id: tabset1\n\n    ## Label one\n\n    Content 1, you can use Markdown syntax\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n    ## Label two\n\n    Content 2, you can use Markdown syntax\n    ```java\n      public class Main {\n          public static void main(String[] args) {\n              System.out.println(\"Hello World\");\n          }\n      }\n    ```\n\nWhen selecting a tag in a page, the corresponding tag in the tag page with the same `id` will be automatically selected, but not if the `id` is different or the `id` is not set.\n\n.. tabset::\n    :id: tabset1\n\n    ## Label one\n\n    Content 1, you can use Markdown syntax\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n    ## Label two\n\n    Content 2, you can use Markdown syntax\n    ```java\n      public class Main {\n          public static void main(String[] args) {\n              System.out.println(\"Hello World\");\n          }\n      }\n    ```\n\n.. tabset::\n\n    ## Label one\n\n    Content 1, you can use Markdown syntax\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n    ## Label two\n\n    Content 2, you can use Markdown syntax\n    ```java\n      public class Main {\n          public static void main(String[] args) {\n              System.out.println(\"Hello World\");\n          }\n      }\n    ```\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    Effect:\n    (note that a blank line is required here)\n    .. tabset::tab title (optional)\n        :id: tabset1\n        (note that it must be aligned with the above tabset or more spaces)\n        ## Label one\n\n        Content 1, you can use Markdown syntax\n        ```kotlin\n          fun main() {\n              println(\"Hello World\")\n          }\n        ```\n\n        ## Label two\n\n        Content 2, you can use Markdown syntax\n        ```java\n          public class Main {\n              public static void main(String[] args) {\n                  System.out.println(\"Hello World\");\n              }\n          }\n        ```\n    ```\n\n## Details page (details) support\n\n> Because it is not a standard Markdown syntax, currently only supported by teedoc, so choose to use it according to your needs\n> Of course, generalization of the format to other parsers is also welcome\n\nThis is a `Markdown` syntax for `HTML5` `details` tags, `HTML` is written like this:\n```html\n<details>\n  <summary>Title, click to expand</summary>\n  <div class=\"details-content\">\n    <p>This is the content</p>\n  </div>\n</details>\n```\n\nEffect:\n\n.. details::Title, click to expand\n\n    Content 1, you can use Markdown syntax\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n.. details:: title, expanded by default\n    :open:true\n\n    Content 1, you can use Markdown syntax\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n.. details::Markdown source code, click to expand\n    ```markdown\n    .. details::Title, click to expand\n\n        Content 1, you can use Markdown syntax\n        ```kotlin\n          fun main() {\n              println(\"Hello World\")\n          }\n        ```\n\n    .. details:: title, expanded by default\n        :open:true\n\n        Content 1, you can use Markdown syntax\n        ```kotlin\n          fun main() {\n              println(\"Hello World\")\n          }\n        ```\n    ```"}, "/get_started/en/index.html": {"title": "open source static doc site generator teedoc", "content": "---\ntitle: open source static doc site generator teedoc\nkeywords: teedoc, markdown, jupyter notebook, html, document generation, alternative gitbook, website generation, static website, static blog\ndesc: teedoc, open source static doc site generator, convert markdown or jupyter notbook into html static web pages, used for personal or corporate website building, blog building, database building, wiki, etc.\n---\n\n\nOfficial website: [teedoc.neucrack.com](https://teedoc.neucrack.com/) or [teedoc.github.io](https://teedoc.github.io/)\nSource file of this document: [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io)\nSource code: [https://github.com/teedoc/teedoc](https://github.com/teedoc/teedoc) Welcome star\n\nConvert documents in `Markdown` or `Jupyter Notebook` format into `HTML` static web pages\n\n`teedoc` can be used in the following scenarios:\n* Build a document website, and it is best to support multiple documents (for example, you have two books called `Python Learning` and `C++ Learning`, they have separate directories, and `teedoc` is the library)\n* Documents and web pages coexist, support custom `HTML` pages\n* Build a `WiKi` website\n* Build a personal or corporate knowledge base\n* Build a personal or corporate website\n* Blog\n\nIf you encounter problems during use, you can find similar problems in [here](https://github.com/teedoc/teedoc/issues) (you need to register and log in to github) to find similar issues, or create an issue\n\n\n## Features\n\n- [x] Multi-document support\n- [x] Simple to use, cross-platform, only dependent on `Python3`\n- [x] No database required, all static pages of the website\n- [x] The deployment is simple, the generated website is a fully static page, which can be directly copied to the server or uploaded to a third party organization for deployment\n- [x] Easy to write, using [Markdown syntax](./syntax/syntax_markdown.html)编写\n- [x] [Jupyter notebook support]((./syntax/syntax_jupyter.ipynb))\n- [x] HTML support, you can directly use HTML to write pages, with great freedom\n- [x] Plug-in support\n- [x] Multi-theme support (implemented by plug-in)\n- [x] Control the style accurate to the page through css (implemented by customizing the id and class of each page)\n- [x] Multi-level directory support(infinite levels)\n- [x] Multi-language support (manual translation) (Internationalization/i18n)\n- [x] Multilingual support (translation plugin)\n- [x] Multi-version support (implementation method is the same as multi-language)\n- [x] Search support\n- [x] SEO friendly\n- [x] Real-time preview of changes\n- [x] Parallel build, faster build speed\n- [x] Blog support\n- [x] Switch from gitbook is easy, just config `route` and convert `SUMMARY.md` by `summary2yaml` command\n- [x] Comments(Plugins), e.g. `gitalk`\n\n\n## Demo\n\n[This website](https://teedoc.github.io/) is generated using `teedoc`, what you see now is what the generated website looks like.\n\nIn addition, there are other websites that use `teedoc`, please see [here](./usage/sites.html) for details\n\n\n## Similar tools\n\nIn fact, there are many tools of this type, but each one is slightly different. Just choose one according to your needs.\n\nIf you have choice difficulties, you are recommended to use teedoc if you meet some of the following conditions:\n* Used as a document website? You have a lot of document sites in your hand, want to unify them into one site? Also websites in various languages? Use `teedoc`\n* Use `Jupyter notebook` to write documents or code? Decisively choose teedoc\n* Does the function meet your needs?\n* Does the interface meet your aesthetics (you can customize `css`, or change the theme plug-in)\n* Familiar with `Python`? Plug-ins and functions can be customized at any time\n\nOther similar tools:\n* `docusaurus`: `teedoc`'s `UI` layout is almost similar to it, but it is written by `ract`, `teedoc` is native `js`, if you are using `ract`, you can consider this\n* `gitbook`: a tool that used to be very useful, but it is no longer maintained by the government, and it is switched to commercial use. It is not recommended to use it\n* `docsify`: only one page is needed, `markdown` is rendered in the browser, instead of pre-rendered as `HTML`, the advantage is that it is lightweight, but `SEO` is not very friendly, you can use its `SSR` function, ` nodejs` written\n* `readthedocs(Sphinx)`: In fact, it uses `Sphinx` as a generation tool. The official website documentation of `Python` is generated by this tool. Many open source projects use tools. `readthedocs` is just a public document website. You don’t need to build your own website, you can start writing documents after registering and logging in, and it is friendly to `RST` format support\n* `mkdoc`: It is also a tool written by `python`. It is easy to use and has many plugins. If your document is a single language document, you can use this tool\n\n\n## Some usage suggestions\n\n* Add `Generate with teedoc` in footer to help more people discover teedoc and promote the growth of the project\n* Use the template project to start a new document project, you can run it first, and then modify it according to your own needs, so that you can get started faster\n\n\n\n## Quick start\n\nVisit[quick start](./usage/quick_start.html) to install and quick start"}, "/get_started/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}