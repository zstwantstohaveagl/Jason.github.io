{"/develop/zh/plugins.html": {"title": "teedoc 插件开发", "content": "teedoc 插件开发\n===========\n\n`teedoc` 的插件开发很简单， 目前只需要根据模板修改一下就可以实现新的功能， 如果会 `python` `html` `css` `js` 则会更加简单。\n\n插件的运行原理就是`teedoc` 提供[插件 API](https://github.com/teedoc/teedoc/blob/main/teedoc/plugin.py)， 写一个`python`包， 继承这个类， 重写需要的方法（`API`）即可， 具体每个方法的含义在[插件 API](https://github.com/teedoc/teedoc/blob/main/teedoc/plugin.py)文件中有详细的注释说明\n\n> 如果发现 API 有不合理的地方， 可以[提交 issue](https://github.com/teedoc/teedoc/issues) 来发起讨论， 一起完善~\n\n\n## 参考模板\n\n可以参考[默认的插件](https://github.com/teedoc/teedoc/tree/main/plugins)\n\n\n## 插件目录结构\n\n这里以[teedoc-plugin-baidu-tongji](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-baidu-tongji) 为例\n\n* 创建一个目录， 目录名和插件名相同， 建议以`teedoc-plugin-`开头，方便大家搜索到\n* 然后创建一个`setup.py`文件， 这个是`python`包的通用配置文件， 文件中最重要的就是执行`setuptools.setup()`函数， 参数主要包含了一下几个，更多可以到`python`官方文档查找\n\n```python\nsetup(\n    name='teedoc-plugin-baidu-tongji',\n    version=\"1.0.2\",\n    author='Neucrack',\n    author_email='xxx@xxx.com',\n    description='baidu tongji plugin for teedoc',\n    long_description=long_description, # can read from README.md\n    long_description_content_type=\"text/markdown\",\n    url='https://github.com/Neutree/teedoc',\n    license='MIT',\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n\n        # Pick your license as you wish (should match \"license\" above)\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 3'\n    ],\n\n    keywords='teedoc baidu tongji',\n\n    # List run-time dependencies here.  These will be installed by pip when\n    # your project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=install_requires,\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). You can install these using the following syntax,\n    # for example:\n    # $ pip install -e .[dev,test]\n    extras_require={\n        # 'dev': ['check-manifest'],\n        # 'test': ['coverage'],\n    },\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=packages,\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    package_data={\n        \"teedoc_plugin_baidu_tongji\" : ['assets/*'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[\n        ],\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    entry_points={\n        # 'console_scripts': [\n        # # 'gui_scripts': [\n        #     'teedoc=teedoc-plugin-markdown-parser.main:main',\n        # ],\n    },\n)\n```\n\n* 创建包\n\n需要再创建一个子文件夹，用来存放源码，文件名将项目名称中的减号`-`替换成下划线`_`即可， 因为`python`代码中要求包名不能用减号， 比如这里是`teedoc_plugin_baidu_tongji`\n\n然后在里面新建一个文件`__init__.py`\n\n* 编辑`__init__.py`\n\n要实现百度统计的功能， 实际就是向所有页面的`<head></head>`标签中添加一段百度统计指定的脚本即可，即`<script></script>`标签， 同时， 从文档配置中获取统计编号（`code`）， 代码如下：\n\n```python\nimport os, sys\nfrom teedoc import Plugin_Base\nfrom teedoc import Fake_Logger\n\n\n\nclass Plugin(Plugin_Base):\n    name = \"teedoc-plugin-baidu-tongji\"\n    desc = \"baidu tongji support for teedoc\"\n    defautl_config = {\n    }\n\n    def on_init(self, config, doc_src_path, site_config, logger = None):\n        '''\n            @config a dict object\n            @logger teedoc.logger.Logger object\n        '''\n        self.logger = Fake_Logger() if not logger else logger\n        self.doc_src_path = doc_src_path\n        self.site_config = site_config\n        self.config = Plugin.defautl_config\n        self.config.update(config)\n        self.logger.i(\"-- plugin <{}> init\".format(self.name))\n        self.logger.i(\"-- plugin <{}> config: {}\".format(self.name, self.config))\n        \n        # set site_root_url env value\n        if not \"code\" in config:\n            self.logger.e('can not find config[\"code\"] in plugin {}'.format(self.name))\n            return\n        baidu_tongji_code = '''<script>\nvar _hmt = _hmt || [];\n(function() {{\n  var hm = document.createElement(\"script\");\n  hm.src = \"https://hm.baidu.com/hm.js?{}\";\n  var s = document.getElementsByTagName(\"script\")[0]; \n  s.parentNode.insertBefore(hm, s);\n}})();\n</script>'''.format(config[\"code\"])\n        self.html_header_items = [baidu_tongji_code]\n\n\n    def on_add_html_header_items(self):\n        return self.html_header_items\n```\n\n可以看到`class Plugin(Plugin_Base):`继承了`Plugin_Base`类， 然后重写了`on_init`和`on_add_html_header_items`方法， `teedoc`构建文档时，会在合适的时机调用这两个函数。\n\n我们在`on_init`初始化函数中从`config`中获取到了百度统计的`code`，然后生成了`<script>`标签的内容存放到了`html_header_items`中， 然后在`on_add_html_header_items`函数中将其返回，这样`teedoc`就会将这个标签添加到所有`HTML`页面的`<head>`标签中了\n\n* 资源文件\n\n可以在`setup.py`中\n```python\n    package_data={\n        \"teedoc_plugin_baidu_tongji\" : ['assets/*'],\n    },\n```\n指定将`assets`目录及其下所有文件作为包数据文件拷贝到安装路径， 然后就可以在`__init__.py`中使用相对路径(`assets/`)访问到了，可以在`API`的 `on_copy_files`中将这个文件拷贝到输出目录， 可以看[teedoc_plugin_search](https://github.com/teedoc/teedoc/blob/main/plugins/teedoc-plugin-search/teedoc_plugin_search/__init__.py)的做法， 其实就是返回了一个字典\n```python\nself.assets_abs_path = os.path.join(), \"assets\")\n{\n    \"/static/js/search/search_main.js\": os.path.join(os.path.dirname(os.path.abspath(__file__), \"assets\", \"search_main.js\")\n}\n```\n关键字是要拷贝到的目标路径，值是文件的绝对路径， 然后我们就可以在其它`HTML`页面中通过`/static/js/search/search_main.js`这个路径引用到了\n\n## 测试插件\n\n两种方法，\n\n### 一种是直接让`teedoc`调用源码\n\n调试建议使用这种方法， 修改代码只需要重新执行`teedoc serve`就可以生效\n\n* 修改一份文档根目录的`site_config.json`文件，指定插件的来源为目录路径\n```json\n\"plugins\": {\n        \"teedoc-plugin-baidu-tongji\":{\n            \"from\": \"路径\",\n            \"config\": {\n                \"code\": \"9cb07365532534256c346c838181a\"\n            }\n        }\n    },\n```\n\n然后在文档根目录执行`teedoc serve`就可以了\n\n\n### 另一种方法是直接安装插件到系统，让`teedoc`调用软件包\n\n使用这种方法， 修改代码需要每次更改代码都要来一遍下面的步骤，比上面一种方法麻烦，在发布插件前可以用这种方式测试一下可用性即可\n\n* 安装插件\n\n插件写好了通过在插件根目录（有`setpu.py`文件的目录）下执行\n```shell\npip install .\n```\n注意`.`符号不要忽略\n\n插件就会作为一个`python`包被安装到系统\n\n* 然后在文档根目录执行`teedoc serve`就可以了\n\n\n## 注意点\n\n因为构建是会用到多进程， 所以有些地方需要注意\n\n* 插件初始化： `__init__()`函数**不能**重写，插件的初始化可以使用`on_init()`或者`on_new_process_init()`；\n  * `on_init()`是在初始化插件时调用，一般的数据可以在这里面初始化。当多进程创建时，插件的数据会被拷贝到新的进程使用， 对于一些不能多进程直接拷贝使用的对象，请在`on_new_process_init()`中初始化\n  * `on_new_process_init()`是在创建多进程时调用， 比如[这里](https://github.com/teedoc/teedoc/blob/main/plugins/teedoc-plugin-markdown-parser/teedoc_plugin_markdown_parser/__init__.py)就在这个函数里面来初始化`markdown`渲染器而不是在`on_init()`中，因为不希望在新进程创建时对`self.md_parser`对象进行拷贝，而是每个新进程都独立重新创建一个对象\n* 同样`__del__()`函数也不能使用， 而是使用`on_del()`或者`on_new_process_del()`函数\n* 在[plugin.py](https://github.com/teedoc/teedoc/blob/main/teedoc/plugin.py)中`on_new_process_init()`后面的函数都是可能会在新进程（多进程）中调用的，前面的函数则只会在主进程中调用\n\n\n\n## 发布插件\n\n插件的发布方式就是普通`python`包的发布方式， 发布到[pypi.org](https://pypi.org/)\n\n* 在插件根目录执行命令生成发布包：\n\n```shell\npython setup.py bdist_wheel sdist\n```\n\n* 在[pypi.org](https://pypi.org/)注册账号\n\n* 然后上传到`pypi.org`\n\n```shell\ntwine upload dist/*\n```\n\n* 然后用户就可以在`site_config.json`中直接填写你的插件名来使用了\n\n也可以通过`pip`安装：\n\n```shell\npip install 你的插件名\n```"}, "/develop/zh/index.html": {"title": "开发 teedoc", "content": "开发 teedoc\n===========\n\n\n## 获得源码\n\n```\ngit clone https://github.com/Neutree/teedoc\n```\n\n## 安装环境\n\n```\nsudo apt install python3 python3-pip\ncd teedoc\npip3 install -r requirements.txt\n```\n\n\n\n## 运行源码\n\n* 安装插件\n\n```\npython3 teedoc/teedoc_main.py  -p examples/teedoc_site install\n```\n\n* 运行\n\n```\npython3 teedoc/teedoc_main.py  -p examples/teedoc_site build\npython3 teedoc/teedoc_main.py  -p examples/teedoc_site serve\n```\n\n* 插件导入问题和更新调试问题\n\n在`site_config.json`中设置插件的本地路径，比如：\n```json\n\"teedoc-plugin-markdown-parser\":{\n            \"from\": \"../../plugins/teedoc-plugin-markdown-parser\"\n        }\n```\n然后在运行时将会优先从这个路径导入包（将这个路径加入`sys.path`，然后导入），而不是系统路径，可以保证修改及时生效\n\n\n\n\n## 调试\n\n在 vscode 中调试，直接调试单文件 `teedoc_debug.py` 文件即可\n\n\n## 参与贡献\n\n可以在 `github` `fork` 一份源码， 修改代码后， 提交`PR`(`pull request`) 即可"}}