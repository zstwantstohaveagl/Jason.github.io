{"/get_started/zh/more/history.html": {"title": "teedoc更新历史", "content": "---\ntitle: teedoc更新历史\nkeywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 写文档, 更新历史\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的更新历史\n---\n\n中文文档可能没来得及更新，最新的历史记录看[history.md](https://github.com/teedoc/teedoc/blob/main/history.md)\n\n所有详细的更新历史可以看[代码提交列表](https://github.com/teedoc/teedoc/commits/main)\n\n## 2022-9-16 v1.31.0\n\n* 支持直接在 html 文件中使用 jinja2 模板，而不需要在 md 文件中使用 layout，更多信息请看文档的 html 语法部分。\n\n## 2022-9-16 v1.30.1\n\n* 优化侧边栏\n* Markdown 增加 mermaid 支持\n* 忽略所有临时文件\n* 更新 markdown 解析器 mistune 到 V2\n* 增加 `teedoc-list-files` 工具，用于按文件大小列出文件\n* 增加 `teedoc-compare` 工具，用于比较两个目录的文件差异\n* 增加 `teedoc-upload` 工具，用于上传文件到远程服务器，支持腾讯云和七牛云\n* 优化构建日志\n* 新增 Markdown 语法：\n  * `tabset` (jupyter 暂不支持)\n  * `details`(jupyter 暂不支持)\n  * 支持自定义标题 ID 语法 `{#id}`\n* 元数据头完全支持 `yaml` 格式，增加 `update` 键用于生成更新历史表格\n* 新的 teedoc logo\n* 修复长目录无法完全显示的 bug\n* 移除 `teedoc install` 命令中安装本地插件的功能\n* 优化最后修改日期显示\n\n## 2022-05-08\n\n* 更新主题插件，支持移动端显示页面目录\n* 更新博客插件，支持在简介中显示图片，支持 `cover` 元数据键\n\n## 2022-09-19\n\n* 增加了`teedoc-plugin-thumbs-up`插件，用于支持点赞功能，详细请看插件说明页面\n\n## 2022-01-06 v1.26.0\n\n* 增加 `teedoc serve --fast` 模式，这个模式下，只会复制静态资源，不会构建页面，这样你就可以访问页面了，页面会在你访问的时候构建。同时后台会构建所有页面。\n\n## 2022-01-06 v1.25.0\n\n* teedoc-plugin-theme-default 插件支持 `redirect.html` 模板，这个模板用于重定向页面，比如我们想让 `/maixpy` 和 `/maixpy.html` 重定向到 `/soft/maixpy.html`，只需要在 `/soft/maixpy.md` 文件中加入\n\n```markdown\n---\nlayout: redirect\nredirect_url: /soft/maixpy/zh/\n---\n```\n\n* 将 http 服务从 http.server 更换为 flask，以便更好的兼容更多的设备\n\n\n## 2021-09-18 v1.24.0\n\n* teedoc-plugin-ad-hint 现在支持在特定文档中配置，而不只是全局配置，这样就可以实现消息国际化了，不同语言的文档各自设置自己的就好了\n* (开发者)插件现在可以通过 `js_vars` 变量向前端传递变量了\n\n## 2021-09-18 v1.23.1\n\n* 增加 404.html 模板， 并支持 i18n\n\n## 2021-09-8 v1.19.0\n\n* 为插件和模板添加 i18n 支持\n* 添加评论插件 teedoc-plugin-comments-gitalk\n* 添加打印页面支持\n* 为页面标题添加锚点\n* 为错误的侧边栏目录项目(sidebar)添加警告日志\n* 修复错误：在预览模式下当 url 有`#id`时更改内容时不会自动刷新页面\n* 修复搜索索引文件过大的bug\n* 修复导航栏列表项 z-index 错误\n* 修复 id 为转义字符时的 toc 平滑滚动错误\n\n## 2021-08-7 v1.17.1\n\n* 增加 布局模板(layout template) 自定义支持 (Jinja2)\n\n## 2021-08-3 v1.16.1\n\n* 将 markdown 解析器 从 markdown2 更换为 mistune, 现在构建速度至少是之前的 2 倍以上\n* 在文件改动监控中去掉对 .git 文件夹的监控\n\n\n## 2021-07-22 v1.15.8\n\n\n* 修复文件在文件管理器重命名后无法出发事件的 bug\n* 修复拷贝不存在的文件会崩溃的错误\n\n插件 theme_default: 为 img 标签增加图片查看器\n\n\n## 2021-05-21 v1.15.0\n\n* 添加 summary2json 和 summary2yaml 命令, 以方便将 gitbook 的 SUMMARY.md 转为 sidebar.yaml 或者 `sidebar.json`\n* 目录栏支持拖动变换大小, 通过设置插件 `teedoc-plugin-theme-default` 的 `sidebar_width` 配置来设置目录栏默认宽度 , 比如:\n```\n\"teedoc-plugin-theme-default\": {\n            \"from\": \"../../plugins/teedoc-plugin-theme-default\",\n            \"config\": {\n                \"env\": {\n                    \"sidebar_width\": \"300px\"\n                }\n            }\n}\n```\n\n\n## 2021-05-21 v1.14.0\n\n优化多线程构建, 构建更迅速一些了. (用多进程代替了多线程)\n\n## 2021-05-21 v1.13.0\n\n在 `sidebar.json` 中, 设置`\"collapsed\": false`来默认展开显示子目录\n\n## 2021-04-14 v1.12.3\n\n* fix sidebar active error\n* optimize navbar list type display\n* add navbar list type url support\n* add --thread parameter, to set build thread number\n* update markdown plugin to v1.0.8, warning when parse markdown error instead of program crash\n\n## 2021-1-28 v1.0.1\n\n基本功能\n\n## 2021-1-16\n\n项目开始"}, "/get_started/zh/more/example_docs/doc2.html": {"title": "TensorFlow Linux GPU + jupyterlab 环境安装 （Docker） (Ubuntu Deepin Manjaro)", "content": "---\ntitle: TensorFlow Linux GPU + jupyterlab 环境安装 （Docker） (Ubuntu Deepin Manjaro)\nkeywords: tensorflow gpu jupyterlab docker deepin ubuntu linux 环境 安装 NVIDIA 驱动 docker\ndesc: Tensorflow Linux 下 GPU + Docker 环境安装\n\n---\n\n> 版权声明：本文为 neucrack 的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n> 原文链接：[https://neucrack.com/p/116](https://neucrack.com/p/116)\n\n\n\n这里使用 docker ， 安装环境更加简单（只需要装 NVIDIA 驱动，不需要装cuda，当然也不用为cuda版本烦恼）稳定～\n而且可以同时运行多个 docker，比如同时运行多个 jupyterlab 给不同人使用\n\n## 安装docker\n\n安装 docker，**版本必须是19.03及以上**（可以使用`docker --version` 查看），如果版本低于这个版本，后面使用`nvidia-docker` 驱动就会失败，会提示找不到`--gpu all` 参数\n\n### 安装\n\n* 如果是Manjaro， 直接`yay -S docker`\n* 其他发行版：\n\n参见官方教程：https://docs.docker.com/install/linux/docker-ce/debian/\n\n> deepin 是基于 debian 9.0\n> 如果是 deepin 则需要修改 `sudo vim /usr/share/python-apt/templates/Deepin.info` 里面的unstable为stable\n> 并使用命令`sudo add-apt-repository  \"deb [arch=amd64] https://download.docker.com/linux/debian stretch stable\"`\n\n### 设置代理\n\n如果下载慢，可能需要设置代理， 也可以不使用官方镜像，使用国内的镜像，比如 daocloud 镜像加速\n\ndocker 代理设置参考： https://neucrack.com/p/286\n\npull 镜像的时候可以设置代理让拉取更快， 创建容器时建议将代理去掉\n\n\n### 设置当前用户可以访问docker（非root）\n\n参考这里： https://docs.docker.com/install/linux/linux-postinstall/\n\n```\nsudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker # 或者重新开启终端即可，如果未生效，可重启\n```\n\n\n### 常用命令\n\n\n`docker images `: 列出镜像列表\n`docker run [options] image_name [command]`：从镜像新建一个容器\n`docker ps `: 正在运行的容器\n`docker ps -a`: 所有容器，包括没有正在运行的\n`docker rm container_name`：删除容器\n`docker rmi image_name`：删除镜像\n`docker start container_name`：启动容器\n`docker attatch container_name`：附着到容器里\n`docker exec conrainer_name [comand]`：在容器中执行命令\n`docker logs container_name`: 查看容器执行log\n\n`docker build -t image_name .`：从 Dockerfile 构建一个镜像\n\n\n### docker run 常用参数\n\n`-it`：启用交互式终端\n`-rm`：及时删除，不保存容器，即退出后就删除\n`--gpus all`：启用所有GPU支持\n`-p port1:port2`：宿主机和容器端口映射，port1为宿主机的端口\n`-v volume1:volume2`：宿主机和容器的磁盘映射， volume1是宿主机的文件夹，比如映射`/home/${USER}/notes`到`/tf/notes`\n`--name name`：给容器取名，如果没有这个参数，名字就是随机生成的\n`--device device:container_device`：挂在设备，比如`/dev/ttyUSB0:/dev/ttyUSB0`\n`--network=host`： 使用宿主机的网络\n`--restart`: 自动启动, 可以用这个设置开机自启, 如果run的时候忘了可以用`docker update --restart=always 容器名`来更新\n```\nno:\t\t                     不自动重启容器. (默认value)\non-failure:               容器发生error而退出(容器退出状态不为0)重启容器\nunless-stopped: \t在容器已经stop掉或Docker stoped/restarted的时候才重启容器\nalways:                  在容器已经stop掉或Docker stoped/restarted的时候才重启容器\n```\n\n\n\n## 安装显卡驱动\n\n显卡安装部分独立写了一篇， 参考[Linux Nvidia显卡安装](https://neucrack.com/p/252)\n\n## 安装镜像\n\n参考官方文档：https://www.tensorflow.org/install/docker\n\n比如我这里Ubuntu：（一定看文档，可能会不一样，有更新）\n\n* 安装 [nvidia-docker](https://github.com/NVIDIA/nvidia-docker)\n\n按照 `readme` 中的` installation guide` 安装即可， 比如 `Ubuntu`：\n\n```\n# Add the package repositories\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n```\n\n如果是deepin，则需要改一下系统版本\n```\ndistribution=\"ubuntu18.04\"\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\nsudo systemctl restart docker\n```\n\n如果是 Manjaro， 只需要命令 `yay -S nvidia-docker` 即可！（如果遇到下载慢，可以使用poipo设置全局代理，参考[终端代理设置方法](https://neucrack.com/p/275)）\n\n* 测试 nvidia-docker 以及cuda能不能使用起来\n\n使用`nvidia/cuda`这个镜像，这个镜像只是用来测试，用完也可以删掉，如果没有设置代理，不想花费太多时间拉取镜像，可以不用这个镜像，直接使用`tensorflow/tensorflow:latest-gpu-py3`这个镜像或者`neucrack/tensorflow-gpu-py3-jupyterlab`(或 `daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab`)这个镜像（推荐）（在前者的基础上装了jupyterlab， 而且做了更好的用户权限管理）\n\n```\nlspci | grep -i nvidia\ndocker run --gpus all --rm nvidia/cuda nvidia-smi\n```\n\n比如：\n```\n➜  ~ sudo docker run --gpus all --rm nvidia/cuda nvidia-smi\nTue Mar 10 15:57:12 2020       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 440.64       Driver Version: 440.64       CUDA Version: 10.2     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 106...  Off  | 00000000:01:00.0  On |                  N/A |\n| 33%   39C    P0    27W / 120W |    310MiB /  6075MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n\n```\n\n```\nWed Mar 11 02:04:26 2020       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 430.40       Driver Version: 430.40       CUDA Version: 10.1     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 108...  Off  | 00000000:04:00.0 Off |                  N/A |\n| 35%   41C    P5    25W / 250W |      0MiB / 11178MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   1  GeForce GTX 108...  Off  | 00000000:81:00.0 Off |                  N/A |\n| 39%   36C    P5    19W / 250W |      0MiB / 11178MiB |      2%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n```\n\n如果驱动版本太低，这里就会提示需要更新驱动\n\n同时注意到cuda版本是10.2，可能tensorflow只支持到10.1，如果是在宿主机上直接装tensorflow就会报错不支持，这里用docker的好处就体现了，不用理会，只需要保证驱动装好就可以了\n\ndeepin 出现了错误\n```\ndocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: ldcache error: open failed: /sbin/ldconfig.real: no such file or directory\\\\\\\\n\\\\\\\"\\\"\": unknown.\n```\n参考这里的解决方法：https://github.com/NVIDIA/nvidia-docker/issues/614 ，解决：\n```\nln -s /sbin/ldconfig /sbin/ldconfig.real\n```\n\ndocker 出现错误：`nvidia-container-cli: initialization error: cuda error: unknown error`\n重启系统得到解决\n\n## 运行 tensorflow with GPU\n\n\n拉取镜像，直接拉取\n```\ndocker pull neucrack/tensorflow-gpu-py3-jupyterlab\n# docker pull tensorflow/tensorflow:latest-gpu-py3-jupyter\n# docker pull tensorflow/tensorflow\n# docker pull tensorflow/tensorflow:latest-gpu\n```\n国内可以使用放在 daocloud 的镜像，速度会快一些：\n```\ndocker pull daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab\n```\n\n执行测试语句：\n```\ndocker run --gpus all -it --rm neucrack/tensorflow-gpu-py3-jupyterlab python -c \"import tensorflow as tf; print('-----version:{}, gpu:{}, 1+2={}'.format(tf.__version__, tf.test.is_gpu_available(), tf.add(1, 2).numpy()) );\"\n```\n> 如果使用了daocloud，镜像名需要修改成`daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab`\n\n如果没问题，就会出现以下输出（会伴随一大堆调试信息，也可能有警告信息，可以仔细看一下）：\n```\n-----version:2.1.0, gpu:True, 1+2=3\n```\n\n## Jupyterlab\n\n```\ndocker run --gpus all --name jupyterlab-gpu -it -p 8889:8889 -e USER_NAME=$USER -e USER_ID=`id -u $USER` -e GROUP_NAME=`id -gn $USER` -e GROUP_ID=`id -g $USER` -v /home/${USER}:/tf neucrack/tensorflow-gpu-py3-jupyterlab\n```\n> 如果使用了daocloud，镜像名需要修改成`daocloud.io/neucrack/tensorflow-gpu-py3-jupyterlab`\n\n\n然后就能用浏览器在`http://127.0.0.1:8889/`地址使用 `jupyterlab`了，而且目录对应了设置的`/home/${USER}`目录\n\n![jupyterlab](../../../assets/images/jupyterlab.jpg)\n![jupyterlab.png](../../../assets/images/jupyterlab_1.jpg)\n\n\n退出直接`Ctrl+C`即可\n这个容器创建后会一直存在于电脑里，可以使用`docker ps -a`查看到，下次启动使用\n```\ndocker start jupyterlab_gpu\n```\n也可以附着到容器：\n```\ndocker attatch jupyterlab_gpu\n```\n停止容器：\n```\ndocker stop jupyterlab_gpu\n```\n\n删除容器：\n```\ndocker rm jupyterlab_gpu\n```\n\n修改 user 和 root 密码, 这样就可以使用 `sudo` 命令了\n```\ndocker exec -it jupyterlab_gpu /bin/bash\npasswd $USER\npasswd root\n```\n\n\n如果需要每次都重新新建一个容器，用完就删除，只需要在`run`命令后面添加一个`-rm`参数即可\n\n## 其它问题\n\n* 运行程序时提示： ResourceExhaustedError: OOM when allocating tensor with shape[784,128] \n\n使用`nvidia-smi`查看内存使用情况\n\ntensorflow会一次性申请（几乎）所有显存：\n\n```\n➜  ~ nvidia-smi\nFri Mar 20 09:18:48 2020       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 435.21       Driver Version: 435.21       CUDA Version: 10.1     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 108...  Off  | 00000000:04:00.0  On |                  N/A |\n|  0%   48C    P2    60W / 250W |  10726MiB / 11178MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   1  GeForce GTX 108...  Off  | 00000000:81:00.0 Off |                  N/A |\n|  0%   47C    P2    58W / 250W |    197MiB / 11178MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0      3099      G   /usr/lib/xorg/Xorg                            21MiB |\n|    0     40037      C   /usr/bin/python3                           10693MiB |\n|    1     40037      C   /usr/bin/python3                             185MiB |\n+-----------------------------------------------------------------------------+\n\n```\n\n有可能是使用显存的进程太多了，可以适当退出一些进程；\n也有可能申请内存重复了 ，可以尝试重启容器解决\n\n* 一直运行没有结果\n\n重启docker 容器解决，总之遇事不决，重启解决。。\n\n* 提示`could not retrieve CUDA device count: CUDA_ERROR_NOT_INITIALIZED`\n\n可能使用了多进程, 新的进程直接拷贝了当前进程的环境,导致错误, 解决办法是**父进程需要引入**, 在子进程中需要使用的时候单独import,而不是写到全局, 参考这里: https://abcdabcd987.com/python-multiprocessing/\n\n* `ImportError: libGL.so.1: cannot open shared object file: No such file or directory`\n\n```\napt install libgl1-mesa-glx\n```\n\n* `Failed to get convolution algorithm. This is probably because cuDNN failed to initialize`\n\n显卡内存不足，检查是不是被其它程序占用了，如果多张显卡，可以设置环境变量`CUDA_VISIBLE_DEVICES`来设置将要使用的显卡， 比如这里共有三张显卡， 下标分别是`0`，`1`，`2`， 选择第三张卡则设置为`2`\n\n```python\nimport os\n\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '2'\n\n```\n\n\n## 参考\n\n* [https://blog.csdn.net/liuzk2014/article/details/83190267](https://blog.csdn.net/liuzk2014/article/details/83190267)\n* https://devtalk.nvidia.com/default/topic/1047416/linux/nvidia-driver-is-not-loaded-ubuntu-18-10-/\n\n* https://github.com/tensorflow/tensorflow/issues/394"}, "/get_started/zh/more/example_docs/heading_no_counter.html": {"title": "文章标题不自动编号", "content": "---\ntitle: 文章标题不自动编号\nkeywords: teedoc 标题自动添加序号, teedoc 标题自动添加编号, teedoc 自动编号\ndesc: 默认 teedoc 会给三级标题进行自动编号，可以通过设置 class 为 heading_no_counter 来取消自动编号\nauthor: neucrack\ndate: 2021-10-10\nclass: heading_no_counter\n---\n\n\n默认 teedoc 会给三级标题进行自动编号， 有时你的文章可能不想要给标题自动编号，\n\n在`md`文件的开头`metadata`处添加`class`为`heading_no_counter`，比如\n```\n---\ntitle: 文章标题不自动编号\nclass: heading_no_counter\n---\n```\n\n\n\n\n# 2021/10/1\n\n## 活动\n\n\n### 钓了鱼\n\n* 挖了条蚯蚓\n* 砍了根小金竹，做了根鱼竿\n* 钓到10条小鱼\n* 大鱼上钩，鱼竿猝\n\n\n\n### 美食\n\n油炸小鲫鱼\n\n\n\n## 总结\n\n啊~ 祖国\n\n啊~ 人生\n\n\n# 2021/10/2\n\n## 活动\n\n躺平"}, "/get_started/zh/more/example_docs/multi_h1.html": {"title": "这是一篇有多个一级标题（h1）的文章", "content": "---\ntitle: 这是一篇有多个一级标题（h1）的文章\nkeywords: teedoc 一级标题\ndesc: 页面内通常只有一个一级标题（h1），如果一定要使用多个一级标题，效果就是这个页面的样子\nauthor: fzj\ndate: 2021-10-10\n# class: heading_no_counter\n---\n\n\n# 2021/10/1\n\n## 活动\n\n\n### 钓了鱼\n\n* 挖了条蚯蚓\n* 砍了根小金竹，做了根鱼竿\n* 钓到10条小鱼\n* 大鱼上钩，鱼竿猝\n\n\n\n### 美食\n\n油炸小鲫鱼\n\n\n\n## 总结\n\n啊~ 祖国\n\n啊~ 人生\n\n\n# 2021/10/2\n\n## 活动\n\n躺平\n躺平\n\n躺平\n躺平\n躺平\n\n躺平"}, "/get_started/zh/more/example_docs/doc1.html": {"title": "", "content": ""}, "/get_started/zh/install/index.html": {"title": "teedoc 安装使用", "content": "---\ntitle: teedoc 安装使用\nkeywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 安装, 使用\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的使用方法\n---\n\n\n## 安装 python3\n\n需要先安装`Python3` （仅支持 `Python3`）\n\n比如在`Ubuntu`上：\n```shell\nsudo apt install python3 python3-pip git\n```\n\n`Windows` 和 `macOS`请到[官网下载](https://www.python.org/downloads/)\n\n\n\n## 安装 teedoc\n\n打开终端(`Windows`按`Ctrl+R`输入`cmd`)，输入：\n\n```shell\npip3 install teedoc\n```\n\n以后使用以下命令来更新软件：\n```shell\npip3 install teedoc --upgrade\n```\n\n> 如果你的网络使用 `pypi.org` 速度很慢，可以选择其它源，比如清华 tuna 源： `pip3 install teedoc -i https://pypi.tuna.tsinghua.edu.cn/simple`\n\n现在你可以在终端使用 `teedoc` 命令了\n\n如果不能，请检查是不是`Python`可执行目录没有加入到环境变量 `PATH`,\n比如可能在 `~/.local/bin`\n\n\n## 新建工程\n\n新建一个空目录用来放文档工程\n\n```shell\nmkdir my_site\ncd my_site\nteedoc init\n```\n\n或者\n```shell\nteedoc -d my_site init\n```\n\n选择`1`，也就是`minimal`模板进行生成， 也可以直接`teedoc -d my_site --template=minimal init`进行生成\n\n这会在 `my_site` 目录下自动生成一些基础文件\n\n\n另外，除了使用`init`命令生成一份最小工程，你也可以获得一份官网文档源码，基于这个文档内容修改\n```shell\ngit clone https://github.com/teedoc/teedoc.github.io my_site\n```\n或者\n```shell\ngit clone https://gitee.com/teedoc/teedoc.gitee.io my_site\n```\n\n## 安装插件\n\n这会根据`site_config.json`中的`plugins`的插件设置安装插件\n\n```shell\ncd my_site\nteedoc install\n```\n\n> 插件也是以 `python` 包的形式发布的， 所以这会从 `pypi.org` 下载对应的插件，同样，也可以使用其它源，比如清华 tuna 源： `teedoc -i https://pypi.tuna.tsinghua.edu.cn/simple install`\n\n## 构建 `HTML` 页面并起一个`HTTP`服务\n\n```shell\nteedoc serve\n```\n\n这个命令会先构建所有`HTML`页面以及拷贝资源文件，然后起一个`HTTP`服务\n如果只需要生成页面，使用\n\n```shell\nteedoc build\n```\n\n\n在显示 `Starting server at 0.0.0.0:2333 ....` 后，就可以了\n\n打开浏览器访问: [http://127.0.0.1:2333](http://127.0.0.1:2333)\n\n\n同时可以看到目录下多了一个`out`目录，里面就是生成的静态网站内容，直接拷贝到服务器使用`nginx`或者`apache`进行部署即可\n\n\n## 在 github 上基于模板仓库创建新仓库 并使用 pages 服务快速创建网站\n\n使用 teedoc 官网模板, 使用 github pages 功能, 可以快速创建一个属于你自己的网站, 不需要自己搭建和维护服务器, 不需要自己部署 HTTPS 证书, 也不需要任何密钥配置, 3 分钟内就可以完成.\n\n不过 github pages 服务也有缺点, 就是中国国内某些网络线路可能无法访问\n\n### 基于模板创建仓库\n\n* 访问 [https://github.com/teedoc/template](https://github.com/teedoc/template) 或者 [https://github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io)， 点击 `Use this template`\n\n![github use template](../../assets/images/github_use_template.jpg)\n\n\n* 设置新仓库的名字为`用户名或者组织名.github.io`,  选择公开仓库, 然后确认提交\n![create repo](../../assets/images/create_repo.jpg)\n\n> 之后使用`git clone 你的仓库地址`就可以克隆到本地了\n\n### 设置 pages 服务\n\n* 等待自动构建生成新的分支`gh-pages`, 可以点击 `Actions` 栏目查看自动构建的进度, 如果有绿色的勾勾出现了就代表可以了, 如果出现了红色的叉叉则是构建失败了, 哪里出了什么问题, 可以按照下面的截图方法点进去查看日志(提交问题必须要日志截图)并提交 [issue](https://github.com/teedoc/teedoc.github.io/issues/new) 反馈\n\n![action status](../../assets/images/action_status.jpg)\n\n如果有错误, 可以按照下图点进去查看错误日志:\n![error0](../../assets/images/action_error.jpg)\n![error](../../assets/images/action_error_log.jpg)\n\n* 设置仓库的 `pages` 服务, 选择`gh-pages`分支, 如果没有这个分支, 则是上一步还没进行完或者出错了,可以查看问题提交 [issue](https://github.com/teedoc/teedoc.github.io/issues/new) 反馈\n![pages](../../assets/images/pages_settings.jpg)\n\n* 然后访问 `用户名或者组织名.github.io`, 就会发现有网页啦, 内容和`teedoc.github.io`的一模一样!"}, "/get_started/zh/plugins/others.html": {"title": "teedoc 其它插件", "content": "---\ntitle: teedoc 其它插件\nkeywords: teedoc, 主题插件, 主题, 插件\ndesc: teedoc 其它插件\n---\n\n## `teedoc-plugin-markdown-parser`: 默认 markdown 解析插件\n\n在`site_config.json`中配置插件\n```json\n    \"plugins\": {\n        \"teedoc-plugin-markdown-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"parse_files\": [\"md\"],\n                \"mermaid\": true,\n                \"mermaid_use_cdn\": false,\n                \"mermaid_cdn_url\": \"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\",\n                \"mathjax\": {\n                    \"enable\": true,\n                    \"file_name\": \"tex-mml-chtml\",\n                    \"config\": {\n                        \"loader\": {\n                            \"load\": [\"output/svg\"]\n                        },\n                        \"tex\": {\n                            \"inlineMath\": [[\"$\", \"$\"], [\"\\\\(\", \"\\\\)\"]]\n                        },\n                        \"svg\": {\n                            \"fontCache\": \"global\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n```\n\n* `parse_files`: 参与解析的文件格式\n* `mermaid`: 是否开启 mermaid 插件\n* `mermaid_use_cdn`: 是否使用 CDN 加载 mermaid 插件\n* `mermaid_cdn_url`: CDN 地址, `mermaid_use_cdn` 为 `true` 时才有用\n* `mathjax`: 数学公式渲染支持\n  * `enable`:  是否启用\n  * `file_name`： `js`文件名， 定义了默认有哪些功能，默认`tex-mml-chtml`, [参考这里](http://docs.mathjax.org/en/latest/web/components/index.html)\n  * `config`: `mathjax`的配置， [mathjax](https://www.mathjax.org/)的配置， 具体配置项看[这里](http://docs.mathjax.org/en/latest/web/configuration.html)\n\n\n## `teedoc-plugin-jupyter-notebook-parser`: jupyter notebook 解析插件\n\n在`site_config.json`中配置插件\n```json\n    \"plugins\": {\n        \"teedoc-plugin-jupyter-notebook-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        }\n    }\n```\n\n\n## `teedoc-plugin-search`: 网站搜索插件\n\n让网站和文档支持搜索功能，支持所搜当前文档和全站搜索\n\n要使用，在`site_config.json`中的`plugins`关键词中添加：\n```json\n\"plugins\": {\n    \"teedoc-plugin-search\":{\n        \"from\": \"pypi\",\n        \"config\": {\n            \"search_hint\": \"Search\",\n            \"env\": {\n                \"main_color\": \"#4caf7d\",\n                \"main_color_dark\": \"#1b4c33\",\n                \"hint_shadow_color\": \"rgba(76, 175, 125, 0.38)\"\n            }\n        }\n    }\n}\n```\n\n\n不同文档的提示内容可以在对应的文档`config.json`中配置，以方便做多语言支持（国际化/i18n）, 当然，插件默认支持了`中文``英文`和`日文`， 翻译在[这里](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-search/teedoc_plugin_search/locales)， 当默认找不到会使用`英文`， 手动设置下面这边变量会覆盖插件自带的翻译\n\n支持的配置如下：\n\n```json\n\"teedoc-plugin-search\":{\n    \"config\": {\n        \"search_hint\": \"搜索\",\n        \"input_hint\": \"输入关键词，多关键词空格隔开\",\n        \"loading_hint\": \"正在加载，请稍候。。。\",\n        \"download_err_hint\": \"下载文件失败，请刷新重试或检查网络\",\n        \"other_docs_result_hint\": \"来自其它文档的结果\",\n        \"curr_doc_result_hint\": \"当前文档搜索结果\"\n    }\n}\n```\n\n* `search_hint`: 搜索框（按钮）的提示信息， 默认`Search`\n* `input_hint`: 搜索页面搜索框输入提示信息， 默认`Keywords separated by space`\n* `loading_hint`: 加载搜索所需的文件提示，默认`Loading, wait please ...`\n* `download_err_hint`: 下载搜索所需的文件失败提示，需要用户刷新浏览器重试或者网络环境无法下载文件， 默认`Download error, please check network and refresh again`\n* `other_docs_result_hint`: 搜索结果提示，其它文档中的搜索结果， 默认`Result from other docs`\n* `curr_doc_result_hint`: 搜索结果提示，当前浏览的文档中的搜索结果， 默认`Result from current doc`\n* `env`: 替换部分颜色， 包括\n  * `main_color`: 主颜色， 默认`\"#4caf7d\"`\n  * `main_color_dark`: 黑色主题主颜色， 默认`\"#1b4c33\"`\n  * `hint_shadow_color`: 阴影颜色，默认`rgba(76, 175, 125, 0.38)`\n\n## `teedoc-plugin-baidu-tongji`: 百度统计\n\n在每个页面添加[百度统计](https://tongji.baidu.com/)的代码，将访问信息发送到百度，就可以在后台看到访问统计信息了\n\n在百度统计注册登录后，在管理页面添加网站，然后会有一个代码获取页面，里面会有如下的代码\n```js\n<script>\nvar _hmt = _hmt || [];\n(function() {\n  var hm = document.createElement(\"script\");\n  hm.src = \"https://hm.baidu.com/hm.js?90c693aa2************c14a50bb49\";\n  var s = document.getElementsByTagName(\"script\")[0]; \n  s.parentNode.insertBefore(hm, s);\n})();\n</script>\n```\n\n这里有一串密钥`90c693aa2************c14a50bb49`，将这一串密钥复制，然后在`site_config.json`中的`plugins`关键词中添加：\n```json\n\"plugins\": {\n    \"teedoc-plugin-baidu-tongji\":{\n        \"from\": \"pypi\",\n        \"config\": {\n            \"code\": \"这里填访问密钥\"\n        }\n    }\n}\n```\n\n部署好网站后，就可以在百度统计后台实时访客页面看到访问信息了\n\n\n## `teedoc-plugin-google-analytics`: Google 分析\n\n在每个页面添加[Google 分析](https://analytics.google.com/)的代码，将访问信息发送到 Google，就可以在后台看到访问统计信息了\n\n在 Google 分析 注册登录后，在管理页面添加网站，然后会有一个 `ID`，以`UA-`或者`G-`开头， 比如`UA-123456789-1` `G-AABBCCDDJJOOKK`\n\n然后在`site_config.json`中的`plugins`关键词中添加：\n```json\n\"plugins\": {\n    \"teedoc-plugin-google-analytics\":{\n        \"from\": \"pypi\",\n        \"config\": {\n            \"id\": \"这里填资源 ID\"\n        }\n    }\n}\n```\n\n\n## `teedoc-plugin-comments-gitalk`: gitalk 评论插件\n\n[gitalk](https://github.com/gitalk/gitalk) 是一个基于 `github` `issue`问答系统的一个评论工具， 使用 `gitalk`，无需自建服务器，只需要注册一个`github`账号， 所有的数据会放在`github`的一个仓库的`issue`上。\n\n> 如果你遇到了问题， [这里](https://github.com/gitalk/gitalk/wiki/Q&A)也许有你要的答案\n\n\n### 配置 github\n\n首先到 [github 开发者设置](https://github.com/settings/developers)里面,\n* 添加 一个 Oauth Apps\n* 然后生成 secrets， 就获得了 client ID 和 secrets\n* 填写 `Homepage URL` 为 主页 url，比如`https://teedoc.github.io`\n* 填写 `Authorization callback URL`为首页`https://teedoc.github.io/`\n\n\n### 配置文档\n\n\n\n要使用， 需要在`site_config`文件中添加插件\n```json\n    \"teedoc-plugin-comments-gitalk\": {\n        \"from\": \"pypi\",\n        \"config\": {\n            \"contrainer\": \"comments-container\",\n            \"env\": {\n                \"clientID\": \"********\",\n                \"clientSecret\": \"********\",\n                \"repo\": \"repo name\",\n                \"owner\": \"orgnization name or user name\",\n                \"admin\": [\"user names have write access\"],\n                \"main_color\": \"#4caf7d\",\n                \"second_color\": \"#0a7d43\"\n            },\n        }\n    }\n```\n\n* `contrainer`: 容纳评论的容器标签`id`，默认是`comments-container`, 在`teedoc-plugin-theme-default`插件里面文档页面和博客页面包含了这个标签\n* `env`: `gitalk` js 插件的配置项， 更多的参数看[这里](https://github.com/gitalk/gitalk#options)。\n  * `clientID`和`clientSecret`: 需要在[github application](https://github.com/settings/applications/new) 中新建一个应用，可以得到`ID`和`Secret`\n  * `repo`和`owner`: 就是仓库名和拥有者，比如这里用[github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io)这个仓库的`issue`作为评论系统，就填`teedoc.github.io`和`teedoc`\n  * `admin`: 就是拥有这个仓库写入权限的用户名\n  * `adminAutoCreate`: 是否在管理员访问页面的时候就立刻创建 issue\n  * `main_color`: 评论主要外观颜色, 可以不设置\n  * `second_color`: 评论次要外观颜色, 可以不设置\n\n~~**每个页面开启评论需要管理员登录`gitalk`后访问页面，`gitalk`会自动创建 `issue`，并且添加标签`Gitalk`和标签`url路径`，(路径字符有`50`个字符的长度限制)**。 当然，也有批量创建的方法，这里就不介绍了，可以自行摸索。~~ 已经更新成任何人都可以创建 Issue 了\n\n也可以先手动创建 `issue` 并且指定`issue`的标签`Gitalk`(首字母大写)，再添加另一个标签`页面的 url 路径`或者`自定义id`（标签是自定义`id`则需要在使用这个 `issue` 的页面设置页面 `id`）\n\n`env`参数除了在`site_config`设置， 也可在文章的`metadata`中设置，在设置前面加一个`gitalk-`前缀， 比如要设置`gitalk`生成的`issue`的`title`，就可以设置`gitalk-title`。以下是几个例子：\n\n* 如果你手动创建了一个 `issue`， 可以为某篇页面指定使用这个 `issue`, 为文章在 `metadata`中指定 `issue` 的 编号即可\n\n```markdown\n---\ntitle: *****\ngitalk-number: 2\n---\n```\n\n* 或者先手动创建 `issue`， 在页面中指定使用这个带特定标签`issue`，可以看看[官方的例子](https://github.com/gitalk/gitalk/issues/1)\n\n\n```markdown\n---\ntitle: *****\nid: Demo\n---\n```\n\nor\n\n```markdown\n---\ntitle: *****\ngitalk-id: Demo\n---\n```\n\n## `teedoc-plugin-assets`: assets 资源添加插件\n\n可以通过这个插件向页面自由添加资源， 比如`css`和`js`资源文件\n\n比如已经添加了资源文件的路径映射，并且有`/static/css/custom.css`和`/static/css/custom.js`两个文件， 需要将其分别添加到页面头部和尾部,\n同时还希望在头部添加一个`meta`标签\n\n`site_config.json`:\n\n```json\n{\n    \"route\": {\n            \"assets\": {\n                \"/static/\": \"static\",\n            },\n        },\n    \"plugins\": {\n        \"teedoc-plugin-assets\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"header_items\": [\n                    \"/static/css/custom.css\",\n                    \"<meta name=\\\"plugin-assets\\\" content=\\\"example meta item\\\">\"\n                ],\n                \"footer_items\": [\n                    \"/static/css/custom.js\"\n                ],\n                \"env\":{\n                    \"main_color\": \"#000000\"\n                }\n            }\n        },\n    }\n}\n```\n如果是`css`和`js`文件，可以这样直接写`url`， 也可以写`http`开头的链接。\n\n这里`env`里面的变量会替换到资源文件中， 在资源文件中通过`${变量名}`来使用\n\n`custom.css`:\n\n```css\na {\n    color: ${main_color}\n}\n```\n\n\n## `teedoc-plugin-google-translate`: Google 页面翻译插件\n\n功能和 `Chrome` 的鼠标右键翻译此页面 功能一样\n\n翻译前：\n\n![google translate](../../assets/images/google_translate0.png)\n\n翻译后：\n\n![google translate](../../assets/images/google_translate.png)\n\n\n\n```json\n\"config\": {\n    \"lang\": \"auto\",\n    \"doc_types\": [\"page\", \"doc\", \"blog\"],\n    \"domain\": \"/\"\n}\n```\n\n* `lang`: 需要被翻译的页面的语言， 默认**建议不要设置**， 或者设置为文档的`locale`一致， 比如`locale`为`zh_CN`，则这个可以设置为`zh-CN`\n* `doc_types`: 要展示在那些类型的文档页面中，`[\"page\", \"doc\", \"blog\"]` 中的 0 个 到 3 个，\n* `domain`: 从哪个网址下载`google translate`的源码，默认是`\"/\"`, 代表从本网站下载，也可以设置成 `translate.google.com` 或者 `translate.google.cn`\n> 主要是考虑到中国地区不开代理无法下载请求的某些文件，实际还是要请求`translate.googleapis.com`的， 在制作插件时发现就算设置成`translate.google.cn`，有个`js`文件请求了`google.com`的域名下的一个`cleardot.gif`文件，导致网络请求卡住很久直到超时才能加载翻译，所以把那个`js`文件（`element_main.js`）修改并放到了本地，这样就可以很快地访问了。\n> 但是这样也有风险，由于代码和 `Google`服务器的代码分离了，万一哪天`Google`更新了代码，我们也需要跟着手动更新（虽然大概率不会改），到时欢迎更新修改并提交 PR\n\n\n## `teedoc-plugin-ad-hint`: 广告或者重要消息全局提示\n\n### 效果\n\n![hint](../../assets/images/hint.jpg)\n\n### 使用\n\n在`site_config`中添加插件\n\n```json\n\"plugins\": {\n    \"teedoc-plugin-ad-hint\": {\n        \"from\": \"pypi\",\n        \"config\": {\n            \"type\": \"hint\",\n            \"label\": \"☆\",\n            \"content\": \"内容，支持 html 语法，不要使用英文单引号\",\n            \"show_after_s\": 432000\n        }\n    }\n}\n```\n\n配置：默认配置代码在[这里](https://github.com/teedoc/teedoc/blob/e909be61546e3817b872bd5005b9b867c6843e60/plugins/teedoc-plugin-ad-hint/teedoc_plugin_ad_hint/__init__.py#L22)\n\n* `type`: 默认 `\"hint\"`, 目前只支持`hint`\n* `label`: 默认 `\"New\"`, 会自动在导航栏添加一个标签，点击会显示顶部提示内容，这里设置标签显示的内容\n* `content`: 默认 `\"\"`, 内容，`hint`类别的内容会显示在顶部\n* `show_times`: 默认 `2`,  设置用户访问多少次页面后提示不在自动显示，如果值 `<= 0` 则永远显示\n* `show_after_s`: 默认 `432000`,  设置下次再自动显示的时间，单位是秒，默认是 `5` 天\n* `date`: 默认值为`null`, 提示信息的更新时间，如果更新了信息，可以设置这个时间来让提示立即自动显示，格式:`2021-11-07 14:23:00`, 如果设置的时间大于当前实际的时间，则会一直保持自动显示\n* `color`: 默认 `\"#a0421d\"`, 字体颜色\n* `link_color`: 默认 `\"#e53935\"`, 链接（`<a>`标签）字体颜色\n* `link_bg_color`: 默认 `\"#e6ae5c\"`, 链接（`<a>`标签）背景颜色\n* `bg_color`: 默认 `\"#ffcf89\"`, 背景颜色\n* `color_hover`: 默认 `\"white\"`, 鼠标悬浮时的字体颜色\n* `bg_color_hover`: 默认 `\"#f57c00\"`, 鼠标悬浮时的背景颜色\n* `close_color`: 默认 `\"#eab971\"`， 关闭按钮背景颜色\n\n### 国际化\n\n如果文档有多语言，可以在`site_config`中配置插件:\n```json\n\"plugins\": {\n    \"teedoc-plugin-ad-hint\": {\n        \"from\": \"pypi\",\n        \"config\": {\n            \"type\": \"hint\",\n            \"label\": \"☆\",\n            \"content\": \"content\",\n            \"show_after_s\": 432000\n        }\n    }\n}\n```\n\n然后在不同语言的文档`config`中覆盖设置\n```json\n\"plugins\": {\n    \"teedoc-plugin-ad-hint\": {\n        \"config\": {\n            \"label\": \"🦀\",\n            \"content\": \"内容，支持 html 语法，不要使用英文单引号\",\n        }\n    }\n}\n```\n\n同一个语言的文档尽量使用同一份`config`模板文件, 在具体的文档`config`中`import`，更容易配置\n\n## `teedoc-plugin-thumbs-up`: 点赞插件\n\n用这个插件可以实现页面显示点赞按钮，可以统计点赞次数，效果如下\n![thumbs_up.png](../../assets/images/thumbs_up.png)\n\n### 基本使用\n\n在`site_config`中添加插件：\n```json\n\"plugins\": {\n    \"teedoc-plugin-thumbs-up\": {\n        \"from\": \"pypi\",\n        \"config\": {\n            \"url\": \"https://xxxx.xxxx.com:80\",\n            \"show_up_count\": true,\n            \"show_down_count\": false\n        }\n    }\n}\n```\n\n需要注意的是，因为网页是纯静态页面，使用这个插件需要配合服务器使用，统计信息储存在服务器上。\n\n服务器使用`pip install teedoc-plugin-thumbs-up`命令安装插件后使用`teedoc-thumbs-up-server`命令来运行服务，可以用`--port`参数来指定端口，更多参数使用`teedoc-thumbs-up-server --help`查看\n> 建议用 nginx 等代理服务器代理这个服务。\n> 另外如果你的网站是 https 协议，那这个服务也需要是 https 服务，可以申请免费的证书后用 nginx 配置\n\n需要注意的是，这个服务只是个简单的例程，不完全保证服务安全性，建议仔细阅读这个服务器代码修改定制你自己的服务器脚本，代码：[teedoc-plugin-thumbs-up/server](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-thumbs-up/server)\n\n### 国际化\n\n和其它插件一样，在不同语言的文档`config`中覆盖设置，参数见[插件源码默认配置](https://github.com/teedoc/teedoc/blob/a8b93a4f29330b018c2e38589786b33d00854309/plugins/teedoc-plugin-thumbs-up/teedoc_plugin_thumbs_up/__init__.py#L24)\n```json\n\"plugins\": {\n    \"teedoc-plugin-thumbs-up\": {\n        \"config\": {\n            \"label_up\": \"有帮助\",\n            \"label_down\": \"没帮助\",\n            \"msg_already_voted\": \"您已经投过票了\",\n            \"msg_thanks\": \"感谢您的反馈\",\n            \"msg_down_prompt\": \"感谢反馈，请告诉我们可以改进什么地方?（最少 10 个字）\",\n            \"msg_down_prompt_error\": \"消息最少需要 10 个字， 最多 256 个字\",\n            \"msg_error\": \"请求服务器出现错误!\"\n        }\n    }\n}\n```"}, "/get_started/zh/plugins/themes.html": {"title": "teedoc 主题插件", "content": "---\ntitle: teedoc 主题插件\nkeywords: teedoc, 主题插件, 主题, 插件\ndesc: teedoc 主题插件\n---\n\n\n## `teedoc-plugin-theme-default`: 默认主题插件\n\n### 插件配置\n\n在`site_config.json`中配置插件\n```json\n    \"plugins\": {\n        \"teedoc-plugin-theme-default\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"dark\": true,\n                \"default_dark\": false,\n                \"mobile_navbar_collapsed\": true,\n                \"toc_depth\": 4,\n                \"env\":{\n                    \"main_color\": \"#4caf7d\",\n                    \"sidebar_width\": \"300px\"\n                },\n                \"css\": \"/static/css/custom.css\",\n                \"js\": \"/static/js/custom.js\",\n                \"code_highlight_css\":  \"/static/css/prism.css\",\n                \"code_highlight_js\": \"/static/js/prism.js\"\n            }\n        }\n    }\n```\n\n* `dark`: 支持黑暗模式切换\n* `default_dark`: 是否默认为黑暗模式\n* `mobile_navbar_collapsed`: 移动设备导航栏默认折叠\n* `toc_depth`: 文章目录显示的层级，默认为`4`，即显示`H1~H4`\n* `show_print_page`: 显示打印页面按钮， 用户点击或者使用`Ctrl+P`可以打印页面\n* `main_color`: 主题主颜色\n* `sidebar_width`: 侧边目录栏默认宽度, 可以是`\"300px\"`, `300`, `\"30%\"` 这样的格式\n* `css`: `css`文件 `URL`，可以覆盖默认的样式，会被插入到页面的`head`标签中\n* `js`： `js`文件 `URL`，可以写`js`程序，会被放在页面的末尾加载\n\n默认代码高亮使用了[prismjs](https://prismjs.com/), 默认勾选了部分常用语言的支持，`js`文件 + `css`文件共`100KiB`左右，如果你需要的代码无法高亮，或者想节约流量或缩减加载时间，可以到[这里](https://prismjs.com/download.html#themes=prism-tomorrow&languages=markup+css+clike+javascript+bash+c+cpp+cmake+coffeescript+docker+go+ini+java+json+json5+kotlin+latex+less+lua+makefile+markdown+markup-templating+objectivec+php+powershell+python+jsx+tsx+ruby+rust+sass+scss+shell-session+sql+swift+textile+typescript+yaml&plugins=line-numbers+highlight-keywords+toolbar+copy-to-clipboard+match-braces)查看默认勾选的以及勾选自己需要的语言和功能， 最后获得一个`css`文件和一个`js`文件放到`static/js/`目录下，然后需要在 `site_config.json` 中设置`URL`比如：\n```json\n    \"route\": {\n        \"assets\": {\n            \"/static/\": \"static\"\n        }\n    }\n```\n> 这会将`static`目录下所有文件拷贝到输出文件夹`static`目录下面\n\n* `code_highlight_css`: `code`高亮`css`文件 `URL`，会取代默认的高亮`css`文件，会被插入到页面的`head`标签中\n* `code_highlight_js`： `code`高亮`js`文件 `URL`，会取代默认的高亮`js`文件，会被放在页面的末尾加载\n\n支持 `白天` 和 `夜间` 模式， 夜间模式会在`body`加一个`dark`类， 如果要该夜间模式的`css`样式，可以基于这个类名修改\n\n### class 支持\n\n主题支持几个常用的`class` 和 `id`， 可以在`config.json`(/`config.yaml`) 或者或者`.md`文件的`class`和`id`关键字中设置，就可以直接使用这个样式了\n\n比如在`config.json`中设置\n```json\n{\n    \"class\": \"md_page\",\n    \"navbar\": {\n        ...\n    }\n}\n```\n\n或者在`md`文件头添加\n```markdown\n---\ntitle: title\nclass: heading_no_counter\n---\n```\n\n\n则这个文档下面所有生成的页面的`html`标签都会包含这个类， 比如`md_page`普通 markdown 文件渲染成 html 页面，可以加上这个类，会居中显示而不是左对齐\n\n`class`有：\n* `md_page`: 普通 markdown 文件渲染成 html 页面，可以加上这个类，会居中显示而不是左对齐\n* `heading_no_counter`: 取消标题自动编号"}, "/get_started/zh/plugins/index.html": {"title": "teedoc 插件", "content": "---\ntitle: teedoc 插件\nkeywords: teedoc, 插件\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的的插件\n---\n\n\n## 插件使用介绍\n\nteedoc 使用了插件系统，方便扩充功能\n\n\n在`site_config.json` 文件中， 设置`plugins`字段， 比如\n```json\n{\n    \"plugins\": {\n        \"teedoc-plugin-markdown-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        },\n        \"teedoc-plugin-theme-default\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"dark\": true,\n                \"env\":{\n                    \"main_color\": \"#4caf7d\"\n                },\n                \"css\": \"/static/css/custom.css\",\n                \"js\": \"/static/js/custom.js\"\n            }\n        }\n    }\n}\n```\n\n这里默认安装了两个插件，分别是`teedoc-plugin-markdown-parser`和`teedoc-plugin-theme-default`，均直接从`pypi.org`安装，主题插件有配置项\n\n配置项包括是否使用`dark`主题，以及插件的环境变量`env`，设置了`main_color`为`#4caf7d`，这个值会在插件中用到，将主题色设置为对应的颜色；\n\n以及设置自定义`css`文件和`js`文件，值是`url`，不是文件路径（文件路径和`url`的映射请看前面的`route`（路由）介绍， 通过设置这个`css`文件，可以覆盖主题插件默认的样式，实现简单的自定义功能\n\n\n*  [主题插件](./themes.html)\n*  [其它插件](./others.html)"}, "/get_started/zh/usage/404.html": {"title": "自定义 404 页面", "content": "---\ntitle: 自定义 404 页面\nkeywords: teedoc, 自定义404页面, 404页面国际化\ndesc: teedoc 自定义404页面，以及404页面国际化\n---\n\n支持自定义 404 页面（访问错误网址时显示的页面）， 并且支持 404 页面国际化\n\n## 添加 404 错误页面\n\n在 `site_config` 中设置 网站根目录 的`url`与路径的映射，比如\n```json\n    \"route\": {\n        \"pages\": {\n            \"/\": \"pages/index/zh\"\n        }\n    },\n    \"translate\": {\n        \"pages\": {\n            \"/\": [ {\n                    \"url\": \"/en/\",\n                    \"src\": \"pages/index/en\"\n                }\n            ]\n        }\n    }\n```\n这里将 网站根目录（`/`）映射到了文件夹`pages/index/zh`， 则只需要创建文件`pages/index/zh/404.md`，然后添加内容：\n```markdown\n---\nlayout: 404.html\n---\n```\n或者\n```markdown\n---\nlayout: 404\n---\n```\n\n用户访问错误的路径时就会返回这个页面\n\n## 404 错误页面国际化\n\n如上面所说的网站根目录配置， 在`pages/index/zh`下的`config`文件如果配置`locale`为`zh`， 则生成的`/404.html`内容为中文\n\n如果用户的浏览器语言设置的其它语言，比如英文`en`， 则会试图跳转到`/en/404.html`, 所以我们只需要：\n* 在`site_config`中配置好`translate`的路径映射，如上面的示例所示\n* 然后新建`pages/index/en/404.md`， 添加内容\n\n```markdown\n---\nlayout: 404.html\n---\n```\n\n>! 如果`locale`有后缀，比如`zh_CN`, `en_US`等，`404`页面会自动尝试跳转到和浏览器设置的语言相同的页面， 比如`/en_US/404.html`、`/en-US/404.html`、`/en-us/404.html`， `/en_us/404.html`直到跳转到页面语言和浏览器语言相同则停止跳转，当所有链接都尝试跳转失败后也会停止跳转\n\n如果你需要的语言没有被翻译， 有两种方法：\n* 可以通过[自定义 404 页面来实现](#自定义-404-错误页面内容)\n* 也可以贡献翻译, 到[这里](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-theme-default/teedoc_plugin_theme_default)， `fork`仓库， 然后`git clone`你的仓库到本地， 在`locales.cfg`文件里面添加新的语言，然后执行`python trans_prepare.py`，这会在`locales`目录下生成新的翻译文件，后缀为`.po`，翻译这个文件（翻译`po`文件你可以直接修改文本，也可以用其它工具翻译），然后执行`python trans_finish.py`就会生成`mo`二进制文件，没有错误就可以提交更改，然后在`github`创建`PR(Pull Request)`来贡献翻译到`teedoc`仓库\n\n## 自定义 404 错误页面内容\n\n直接基于主题的模板修改，或者继承主题的模板，比如小改一下`404.html`页面的`body`部分，只需在`layout`目录下新建一个`my_404.html`， 注意文件名不能和内置的文件名冲突， 如果冲突会提示`generate html fail: maximum recursion depth exceeded in comparison`:\n```markdown\n{% extends \"404.html\" %}\n\n{% block body_404 %}\n\n这里是 body\n{{ body|safe }}\n\n{% endblock%}\n```\n\n然后在`404.md`中使用这个模板\n```markdown\n---\nlayout: my_404.html\n---\n```"}, "/get_started/zh/usage/deploy_github_pages.html": {"title": "部署 teedoc 生成的网站到 github pages", "content": "---\ntitle: 部署 teedoc 生成的网站到 github pages\nkeywords: teedoc, 部署\ndesc: teedoc 生成的网站部署到 github pages 服务, 使用 github 的免费服务器部署网站\n---\n\n\n因为 `github` 提供免费的 `pages` 服务, 我们只需要将`html`页面提交到`gh-pages`分支, 然后在项目设置里面开启`pages`服务即可.\n\n同时, 我们也将页面构建和推送做了自动化, 每次向仓库提交代码/文档, 都会触发`github action`自动构建并推送到`gh-pages`页面, 十分简单方便可靠!\n\n\n## 克隆模板仓库\n\n这里使用 teedoc 官网的源码作为模板, 访问 [https://github.com/teedoc/template](https://github.com/teedoc/template) 或者 [https://github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io)\n点击 `Use this template`\n![github use template](../../assets/images/github_use_template.jpg)\n然后填写新的仓库名称（如果你不准备自定义域名，则仓库名字最好是`teedoc.github.io`将`teedoc`替换成你的用户名或者组织名）和描述，基于这个仓库新建一个你自己的仓库，现在你获得了和 `teedoc`官网一模一样的仓库了\n> 会发现有一个`.github/workflows`的目录，这个就是`github action`的配置文件，我们利用这个功能来实现：\n> 当我们更新仓库的源文件时， `github action`自动根据这个配置文件的命令构建生成静态网页，然后推送到这个仓库的`gh-pages`分支\n\n> 其中`sync_code_to_gitee.yml` 和 `sync_pages_to_gitee.yml` 是用来将代码同步到 `gitee` 的, 可以将他们删除, 需要时请自行研究\n\n\n## 自动触发构建\n\n仓库每提交一次修改，会自动触发构建，构建完成后`gh-pages`分支就会出现生成的`html`页面, 可以在`Actions`栏看到进度和日志\n\n如果是绿色的勾， 就代表成功了，否则就是失败了，可以点进去看构建日志报了什么错，一般都是前面的值填错了\n\n![](../../assets/images/github_action.jpg)\n\n## 设置 pages 服务\n\n然后在设置里面找到 `pages` 服务设置，打开即可，然后访问对应的域名，可以勾选 `Enforce HTTPS`来使能`HTTPS`（推荐）\n比如这里是`https://teedoc.github.io/`\n\n>! 注意如果根路径不是`/`，而且没有自定义域名（自定义域名见后面的介绍），比如`https://teedoc.github.io/my_site/`， 则需要在`site_config.json`中配置`\"site_root_url\":\"/my_site/\"`\n\n![](../../assets/images/github_pages.jpg)\n\n## Pages 服务自定义域名\n\n部署好后会有一个默认的域名，比如`teedoc.github.io`， 如果想使用自己的域名，比如`teedoc.neucrack.com`，即需要自定义域名。\n\n在`site_config.json`文件中设置了网站根目录映射的文件目录，比如这里是`pages/index/zh`目录：\n```json\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n            \"/en/\": \"pages/index/en\"\n        },\n```\n\n在这个目录新建一个文件，取名`CNAME`注意没有后缀，然后写入自定义的域名比如`teedoc.neucrack.com`保存文件，提交即可\n\n> 你可能在设置里面看到了`custom domain`的设置，但是需要像这里说的设置`CNAME`文件才能保持一直生效，不然下次提交自定义域名就失效了\n\n\n## 自动构建进阶配置\n\n在`.github/workflows/publish.yml` 文件中配置了构建的流程, 主要包含了构建文档, 和推送文档到`gh-pages`分支, 可以根据情况修改脚本.\n\n推送文档到`gh-pages`分支用了, [github-pages-deploy-action](https://github.com/JamesIves/github-pages-deploy-action) 这个 `github actioin` 插件, 更多进阶的用法请阅读这个插件的文档\n\n一般用上面的方式就足够了, 甚至不用配置任何参数就可以使用, 另外, `publish.yml` 底部提供了不用插件的推送写法, 如果你需要, 可以复制到上面使用, 使用时可能需要用到以下知识点:\n\n* 生成 ssh 密钥\n\n在本地生成一对`key`（windows下需要先安装相关软件，请自行安装（安装git就会有））\n```\nssh-keygen -t rsa -f key.txt \n```\n得到了`key.txt`和 `key.key.pub`两个文件\n\n* 设置密钥\n\n到文档项目的设置里面设置`ssh`密钥, 添加一个`ssh`密钥， 拷贝 `key.txt.pub` 中的内容，注意是`pub`文件，即公钥，选中**允许写入权限**, 名字随便取\n![](../../assets/images/github_deploy_key.jpg)\n\n然后点击`Secrets`，设置秘密键值对， 需要设置的变量有：\n* `ACCESS_KEY`: 复制`key.txt`中的内容\n* `GIT_EMAIL`: 设置一个`git`提交邮箱，设置你的`github`邮箱即可\n* `GIT_NAME`: 设置一个`git`提交名字，设置你的`github`名字即可\n* `REPO`: 仓库地址， 设置为`组织名/仓库名`或者`用户名/仓库名`，比如`teedoc/teedoc.github.io`即可\n![](../../assets/images/github_secrets.jpg)\n\n当然, 这些变量也可以通过优化脚本直接从提交记录中获得(除了`ACCESS_KEY`), 有兴趣可以优化, 也欢迎提交 PR"}, "/get_started/zh/usage/start.html": {"title": "文档结构和配置", "content": "---\ntitle: 文档结构和配置\nkeywords: teedoc, 目录结构, teedoc 文档配置, teedoc 文档结构, teeodc sidebar\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的基本使用， 包括文档结构和配置\n---\n\n\n## 构建与预览\n\n在有`site_config.json`的文档目录下执行\n```shell\nteedoc serve\n```\n\n在显示 `Starting server at 0.0.0.0:2333 ....` 后，就可以了\n\n打开浏览器访问: [http://127.0.0.1:2333](http://127.0.0.1:2333)\n\n\n实时修改文件，保存文件后，默认过`3`秒后，会自动重新构建这个文件，然后浏览器会自动刷新\n> 自动刷新的延迟时间可以设置，可以加 `-t` 参数， 比如`teedoc -t 0 serve`设置为`0`秒延迟，\n> 另外也可以在文档配置中设置，见后面配置参数`rebuild_changes_delay`的说明\n\n\n如果只需要构建生成`HTML`页面，只需要执行\n\n```shell\nteedoc build\n```\n\n>! 注意，如果是最终生成发布版本的文档， 一定要用`build`命令来生成网站页面，`serve`命令生成的页面只能用于本地预览，会有多余的预览相关的代码，不适合用在生产环境部署\n\n\n另外，也可以指定参数`-d`或者`--dir` 来指定文档目录，这样就不用在文档目录下面执行命令了，比如\n```shell\nteedoc -d /home/teedoc/my_doc build\n```\n\n\n## 构建文档删除\n\n\n构建好的文档会被放到`out`目录下，程序不会主动删除，如果需要清除，请手动删除\n\n\n\n## 文档目录结构\n\n```shell\n├─.github\n├─docs\n│  ├─develop\n│  │  ├─en\n│  │  └─zh\n│  └─get_started\n│      ├─assets\n│      ├─en\n│      └─zh\n├─pages\n│  └─index\n│      ├─en\n│      └─zh\n├─static\n│\n└─site_config.json\n```\n\n* `.github`: 自动构建脚本，在后面的章节将如何使用\n* `docs`: 文档，包含了多份文档， 每份文档都是单独一个文件夹\n* `pages`: 页面，包括主页、404页面等等页面\n* `static`: 静态文件文件夹，比如存放图片\n* `site_config.json`: 网站配置文件\n* `config.json`: 除了`site_config.json`外，每个文档目录下都可以有`config.json`用来配置文档相关页面\n* `sidebar.json`: 文档目录\n\n在看如何使用配置文件之前， 一定要牢记， 配置文件很简单， **配置文件共只有两个文件名**， 一个唯一的文档配置文件`site_config` 和 每个文档自己的配置文件`config`\n\n## 配置文件\n\n配置文件可以是 `json` 或者 `yaml` 格式的文件，选择你喜欢使用的即可， 如果没接触过也不要害怕， 搜索一个教程花 10 分钟学习就能完全掌握。\n\n如果你的文档目录内容很多，建议使用`yaml`格式，看起来会更加简洁\n\n`teedoc` 提供了 `json` 和 `yaml` 格式互相转换的命令\n\n### 从 json 转到 yaml\n\n```shell\nteedoc -f ./config.json json2yaml\n```\n\n### 从 yaml 转到 json\n\n\n```shell\nteedoc -f ./config.yaml yaml2json\n```\n\n\n### 从 gitbook SUMMARY.md 转到 json\n\n\n```shell\nteedoc -f ./SUMMARY.md summary2json\n```\n\n\n\n### 从 gitbook SUMMARY.md 转到 yaml\n\n\n```shell\nteedoc -f ./SUMMARY.md summary2yaml\n```\n\n\n\n\n## site_config.json 网站配置\n\n网站的配置项，比如网站名称，页面路由，插件配置等等\n\n下面的示例配置文件看起来配置项比较多，不要被吓到，其实很简单，主要几个配置项，掌握了就思想就容易了\n\n配置文件是`json`格式， 比如：\n\n```json\n{\n    \"site_name\": \"teedoc\",\n    \"site_slogon\": \"happy to write\",\n    \"site_root_url\": \"/\",\n    \"site_domain\": \"teedoc.github.io\",\n    \"site_protocol\": \"https\",\n    \"config_template_dir\": \"./\",\n    \"source\": \"https://github.com/teedoc/teedoc.github.io/blob/main\",\n    \"route\": {\n        \"docs\": {\n            \"/get_started/zh/\": \"docs/get_started/zh\",\n            \"/develop/zh/\": \"docs/develop/zh\",\n        },\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n        },\n        \"assets\": {\n            \"/static/\": \"static\",\n            \"/get_started/assets/\": \"docs/get_started/assets\"\n        },\n        \"/blog/\": \"blog\"\n    },\n    \"translate\": {\n        \"docs\": {\n            \"/get_started/zh/\": [ {\n                    \"url\": \"/get_started/en/\",\n                    \"src\": \"docs/get_started/en\"\n                }\n            ],\n            \"/develop/zh/\": [ {\n                    \"url\": \"/develop/en/\",\n                    \"src\": \"docs/develop/en\"\n                }\n            ]\n        },\n        \"pages\": {\n            \"/\": [ {\n                    \"url\": \"/en/\",\n                    \"src\": \"pages/index/en\"\n                }\n            ]\n        }\n    },\n    \"executable\": {\n        \"python\": \"python3\",\n        \"pip\": \"pip3\"\n    },\n    \"plugins\": {\n        \"teedoc-plugin-markdown-parser\":{\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        },\n        \"teedoc-plugin-theme-default\":{\n            \"from\": \"pypi\",\n            \"config\": {\n                \"dark\": true,\n                \"env\":{\n                    \"main_color\": \"#4caf7d\"\n                },\n                \"css\": \"/static/css/custom.css\",\n                \"js\": \"/static/js/custom.js\"\n            }\n        }\n    }\n}\n\n```\n\n* `site_name`: 网站名\n* `site_slogon`: 网站标语\n* `site_root_url`: 网站根目录路径， 使用默认值`/`即可; 如果需要将生成的内容放到网站的文件夹中（不是根目录的文件夹），可以设置\n* `site_domain`: 网站域名，目前用到的地方：生成`sitemap.xml` 和 `robots.txt`\n* `site_protocol`: 网站协议，`http`或者`https`，目前用到的地方：生成`sitemap.xml` 和 `robots.txt`\n* `config_template_dir`: `config` 模板文件，其它文档目录的`config.json`或者`config.yaml`可以`import`这里面的文件，默认位置为`site_config`所在目录\n* `source`: 文档源码路径， 比如`https://github.com/teedoc/teedoc.github.io/blob/main`，这里`main`是文档主分支，会在文档页面添加`Edit this page`按钮（链接），点击可跳转到对应文件源码。可以留空，则不添加链接。另外，可以在`config.json`中添加`\"show_source\": \"编辑本页\"`来定义按钮的文字内容为`编辑本页`，如果希望文档没有这个按钮，则设置为`\"show_source\": false`；也可在文件(`md`或`ipynb`文件)的头信息中添加`show_source: 编辑本页`或者 `show_source: false` 来设置\n* `route`: 网页路由，包含了文档和页面以及资源文件的路由，比如文档的路由\n```json\n\"docs\": {\n    \"/get_started/zh/\": \"docs/get_started/zh\",\n    \"/get_started/en/\": \"docs/get_started/en\",\n    \"/develop/zh/\": \"docs/develop/zh\",\n    \"/develop/en/\": \"docs/develop/en\"\n},\n```\n`key`代表了最终生成的网站中文档的`url`, 后面的值则是对应的源文档路径，\n比如源文档`docs/get_started/zh/README.md`，构建后会生成文件`out/get_started/zh/index.html`, 如果不是`md`文件（即不支持的文件），则会原封不动地拷贝文件，最后`out`目录就是生成的网站\n\n`pages`同理，`assets`则不会进行文档转换，直接拷贝到相应的目录\n\n* `translate`: 翻译， 指定文档对应的翻译版本的`url`和文件路径， 同样，在翻译版本的路径下需要有`config`和`sidebar`配置文件，并且`config`文件中指定`locale`来达到指定被翻译的文档语言， 比如中文可以是`zh`, `zh_CN`, `zh_TW`， 英文是`en`， `en_US` 等。翻译的`sidebar`，以及文档路径需要和源文档一致，如果没有翻译可以不放翻译文件，用户访问没有翻译的页面时会跳转到`no_tanslate.html`提示没有翻译，更多详情请看[国际化 i18n](./i18n.html)\n* `executable`: 可执行程序设置， 这里可以设置`python`和`pip`的可执行程序名，在安装插件时会用到\n* `plugins`: 插件配置， 主要有名字， 来源， 配置项组成。\n名字可以在[github](https://github.com) 搜索`teedoc-plugin`来找到开源的插件，也欢迎你参与编写插件（只需要动 `Python` 语法即可）； \n`from`字段填`pypi`即可，如果插件下载到了本地也可以填写文件夹路径，也可以直接填`git`路径比如`git+https://github.com/*****/******.git`\n配置项则由具体的插件决定，比如`teedoc-plugin-theme-default`就有`dark`选项来选择是否启用暗黑主题\n* `rebuild_changes_delay`: 检测到文件更改后，延迟多少秒自动重新生成该文档， 浏览器中会自动刷新页面，默认为`3`秒，最短可以设置为`0`秒, 可以使用`teedoc -t 3 serve` 或者 `teedoc --delay serve` 来覆盖这个设置\n* `robots`: 自定义`robots.txt`的内容， 比如 `\"User-agent\": \"*\"`代表允许所有客户端爬取， 这对 `SEO` 会有影响。 比如不允许爬取`JPEG`图片：`\"Disallow\": \"/.jpeg$\"`， 不允许访问`admin`目录:`\"Disallow\": \"/admin\"`, 具体和`robots.txt`的格式要求相同\n* `layout_root_dir`: 布局模板根目录, 默认为`layout`, 即需要布局模板文件时会自动到这个文件夹下面寻找\n* `layout_i18n_dirs`: `layout`的国际化翻译目录，可以是路径比如`locales`，在某些特殊情况下也可以设置多个路径比如`[\"locales1\", \"locales2]`。 文件内容可以参考[i18n](./i18n.md#插件国际化)制作\n\n## config.json 文档配置\n\n这是针对每个文档的配置，放在每个文档的根目录， 比如`docs/get_started/zh/config.json`， 各个文档相互独立，可以设置一样的来保持网站导航栏一致\n\n在这里面可以配置每个文档的导航栏， 以及页尾（`footer`）的内容, 也可以设置插件的`config`项，在当前文档会覆盖`site_config.json`中的配置，从而实现不同文档不同语言（国际化/i18n）或者样式等\n\n比如：\n\n```json\n{\n    \"import\": \"config_zh\",\n    \"id\": \"teedoc_page\",\n    \"class\": \"language_zh\",\n    \"locale\": \"zh-CN\",\n    \"navbar\": {\n        \"title\": \"teedoc\",\n        \"logo\": {\n            \"alt\": \"teedoc logo\",\n            \"src\": \"/static/image/logo.png\"\n        },\n        \"home_url\": \"/\",\n        \"items\": [\n            {\n                \"url\": \"/get_started/zh/\",\n                \"label\": \"安装使用\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/develop/zh/\",\n                \"label\": \"开发\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"https://github.com/neutree/teedoc\",\n                \"label\": \"github\",\n                \"target\": \"_blank\",\n                \"position\": \"right\"\n            },\n            {\n                \"label\": \"语言: \",\n                \"position\": \"right\",\n                \"type\": \"selection\",\n                \"items\": [\n                    {\n                        \"url\": \"/get_started/zh/\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"url\": \"/get_started/en/\",\n                        \"label\": \"English\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"footer\":{\n        \"top\":[\n            {\n                \"label\": \"链接\",\n                \"items\": [\n                    {\n                        \"label\": \"使用 teedoc 构建\",\n                        \"url\": \"https://github.com/neutree/teedoc\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"Copyright © 2021 Neucrack\",\n                        \"url\": \"https://neucrack.com\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"源码\",\n                \"items\": [\n                    {\n                        \"label\": \"github\",\n                        \"url\": \"https://github.com/neutree/teedoc\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"本网站源文件\",\n                        \"url\": \"https://github.com/teedoc/teedoc.github.io\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            }\n        ],\n        \"bottom\": [\n            {\n                \"label\": \"*ICP备********号-1\",\n                \"url\": \"https://beian.miit.gov.cn\",\n                \"target\": \"_blank\"\n            },\n            {\n                \"label\": \"*公网安备**************号\",\n                \"url\": \"https://beian.miit.gov.cn/#/Integrated/index\",\n                \"target\": \"_blank\"\n            }\n        ]\n    },\n    \"plugins\": {\n        \"teedoc-plugin-search\":{\n            \"config\": {\n                \"search_hint\": \"搜索\",\n                \"input_hint\": \"输入关键词，多关键词空格隔开\",\n                \"loading_hint\": \"正在加载，请稍候。。。\",\n                \"download_err_hint\": \"下载文件失败，请刷新重试或检查网络\",\n                \"other_docs_result_hint\": \"来自其它文档的结果\",\n                \"curr_doc_result_hint\": \"当前文档搜索结果\"\n            }\n        }\n    },\n    \"show_source\": \"编辑本页\"\n}\n```\n* `import`: 可以从模板文件导入配置，没有后缀的文件名。比如`site_config`中设置了`config_template_dir`为`./`，这里填`\"import\": \"config_zh\"`, 则代表从导入`site_config`同目录下的`config_zh.json`（优先）或者`config_zh.yaml`。\n然后可以添加当前文档的配置，覆盖模板文件，同样的关键字，修改不同的内容即可，如果是数组(列表)，要替换模板文件的内容，需要在模板文件的数组项中增加`id`关键字，然后修改，如果不指定`id`关键字，则会追加到数组中。比如模板文件`config_zh`：\n```json\n{\n    \"locale\": \"zh-CN\",\n    \"navbar\": {\n        \"title\": \"teedoc\",\n        \"items\": [\n            {\n                \"url\": \"/get_started/zh/\",\n                \"label\": \"安装使用\",\n                \"position\": \"left\"\n            },\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"url\": \"/zh\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"url\": \"/en\",\n                        \"label\": \"English\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n具体某个文档的配置文件：\n```json\n{\n    \"import\": \"config_zh\",\n    \"navbar\": {\n        \"title\": \"teedoc123\",\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"url\": \"/get_started/zh\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"url\": \"/get_started/en\",\n                        \"label\": \"English\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n* `id`: 文档的 `id`， 一般情况下不需要写，会将`id`设置到`config.json` 目录下所有页面的`<html>`标签上。 比如这里设置了`teedoc_page`， 那么这个目录下所有页面都会变成`<html id=\"teedoc_page\"> ... </html>`。 如果`markdown`文件设置了`id`，则会覆盖这个值，即每个页面只能有一个`id`。\n* `class`: 文档的 `class`， 一般情况下不需要写，会将`class`设置到`config.json` 目录下所有页面的`<html>`标签上， 多个`class`用空格隔开。 比如这里设置了`language_zh`， 那么这个目录下所有页面都会变成`<html class=\"language_zh\"> ... </html>`。 如果`markdown`文件设置了`class`，则会追加，比如`config.json`中设置了`language_zh`， 在`README.md`中设置了`class: zh_readme`， 则最终是`class=\"language_zh zh_readme\"`。 这个功能方便自定义每个页面的样式，或者不同文档的样式。\n* `locale`: 地域编号， 可以从[这里](https://www.science.co.il/language/Locale-codes.php)看到， 比如`zh`, `zh_CN`, `en_US`, `ja` 等。也可以通过程序`babel`获取\n```\npip install babel\npybabel --list-locales\n```\n* `navbar`: 导航栏设置，每个文档都可以单独设置导航栏，要想保持整个网站统一，修改每个配置相同即可。关键字`type`用于第一层，用来表示导航栏的这个标签的类别，取值有：\n  * `link`: 普通链接，不写`type`关键字时默认是这个选项\n  * `list`: 有子项，会以下拉菜单的形式显示\n![](../../assets/images/navbar.png)\n  * `selection`: 单选项，比如选择语言。 不写`type`关键字并且有`items`关键字时，默认是这个选项\n![](../../assets/images/navbar2.png)\n  * `language`: 如果在 `site_config`中设置了`translate`, 则会自动将`language`类型的`items`填充为语言列表，这样就不用我们手动写语言列表了！ 效果和`selection`一样(其实内部代码就是将`language`类型自动替换为`selection`)\n![](../../assets/images/navbar2.png)\n* `footer`: 网站页脚，分为上下两个部分，上部又可以添加多个栏目，每个栏目里面可以有多个值\n* `plugins`: 配置插件的配置项，如果`site_config.json`中已经设置了，会覆盖，即子`config`的优先级更高\n* `show_source`: 在`site_config.json`中设置了`source`关键词的前提下，即文档源码路径， 比如`https://github.com/teedoc/teedoc.github.io/blob/main`，这里`main`是文档主分支，会在文档页面添加`Edit this page`按钮（链接），点击可跳转到对应文件源码。设置`\"show_source\": \"编辑本页\"`来定义按钮的文字内容为`编辑本页`，不设置默认为`Edit this page`, 如果希望文档没有这个按钮，则设置为`\"show_source\": false`；也可在文件(`md`或`ipynb`文件)的头信息中添加`show_source: 编辑本页`或者 `show_source: false` 来设置\n\n## sidebar.json 文档目录（侧边栏）设置\n\n这里面设置文档的目录，每个文档一份，相互独立\n\n文件路径使用相对路径，填文件名即可， `README.md` 会被自动转换成`index.html`\n\n另外也可以不写`file`路径，直接`url`， 比如`\"url\": \"/get_started/zh/\"`, 同时可以设置`\"target\":\"_blank\"` 在新窗口打开，不设置则在当前窗口打开\n\n第一层 `items`中的项目，如果只有`label`，没有`url`，`file`和 `items`， 则会在侧边栏中添加一个分类标记,效果如下：\n![](../../assets/images/sidebar.png)\n\n另外, 如果希望目录默认展开, 添加`\"collapsed\": false`即可\n\n比如：\n```yaml\nitems:\n-   label: teedoc 简介\n    file: README.md\n-   label: 安装 teedoc\n    file: install/README.md\n-   label: 开始写文档\n    file: usage/start.md\n-   label: 插件\n    file: plugins/README.md\n    collapsed: false\n    items:\n    -   label: 主题插件\n        file: plugins/themes.md\n    -   label: 其它插件\n        file: plugins/others.md\n-   label: markdown 语法\n    file: syntax/syntax_markdown.md\n-   label: 使用了 teedoc 的网站\n    file: usage/sites.md\n-   label: 更多样例\n    items:\n    -   label: 二级子目录样例\n        items:\n        -   label: 三级子目录样例\n            items:\n            -   label: 文章1\n                file: more/example_docs/doc1.md\n        -   label: 文章2\n            file: more/example_docs/doc2.md\n    -   label: 这是一个链接\n        url: https://github.com/teedoc/teedoc\n        target: _blank\n```\n\n或者 `json` 格式\n\n```json\n{\n    \"items\":[\n        {\n            \"label\": \"teedoc 简介\",\n            \"file\": \"README.md\"\n        },\n        {\n            \"label\": \"安装 teedoc\",\n            \"file\": \"install/README.md\"\n        },\n        {\n            \"label\": \"开始写文档\",\n            \"file\": \"usage/start.md\"\n        },\n        {\n            \"label\": \"插件\",\n            \"file\": \"plugins/README.md\",\n            \"collapsed\": false,\n            \"items\":[\n                {\n                    \"label\": \"主题插件\",\n                    \"file\": \"plugins/themes.md\"\n                },\n                {\n                    \"label\": \"其它插件\",\n                    \"file\": \"plugins/others.md\"\n                }\n            ]\n        },\n        {\n            \"label\": \"markdown 语法\",\n            \"file\": \"syntax/syntax_markdown.md\"\n        },\n        {\n            \"label\": \"使用了 teedoc 的网站\",\n            \"file\": \"usage/sites.md\"\n        },\n        {\n            \"label\": \"更多样例\",\n            \"items\":[\n                {\n                    \"label\": \"二级子目录样例\",\n                    \"items\":[\n                        {\n                            \"label\": \"三级子目录样例\",\n                            \"items\":[\n                                {\n                                    \"label\": \"文章1\",\n                                    \"file\": \"more/example_docs/doc1.md\"\n                                }\n                            ]\n                        },\n                        {\n                            \"label\": \"文章2\",\n                            \"file\": \"more/example_docs/doc2.md\"\n                        }\n                    ]\n                },\n                {\n                    \"label\": \"这是一个链接\",\n                    \"url\": \"https://github.com/teedoc/teedoc\",\n                    \"target\": \"_blank\"\n                }\n            ]\n        }\n    ]\n}\n```"}, "/get_started/zh/usage/deploy.html": {"title": "部署 teedoc 生成的网站", "content": "---\ntitle: 部署 teedoc 生成的网站\nkeywords: teedoc, 部署\ndesc: teedoc 生成的网站部署到服务器\n---\n\n\n由于 `teedoc` 生成的网页都是静态网页，所以直接按照常规的部署静态页面的方式部署即可\n\n`teedoc`生成的页面会在`out`目录\n\n使用`teedoc serve`会起一个`HTTP`服务，但是请不要使用在生产环境，是不可靠的\n\n对于生产环境，这里有几个简单实用的方法：\n\n* [部署到 github pages](./deploy_github_pages.html)\n* [使用 nginx 部署到自建服务器](./deploy_nginx.html)\n* [部署到云服务商](./deploy_cloud.html)\n* [使用 CDN 加速网站](./deploy_cdn.html)"}, "/get_started/zh/usage/blog.html": {"title": "使用 teedoc 写博客", "content": "---\ntitle: 使用 teedoc 写博客\nkeywords: teedoc, 博客, 静态博客, 博客生成, blog\ndesc: teedoc 写博客（生成博客）\n---\n\n## 使能博客插件，并配置路径映射\n\n在`site_config.json`中的`route`关键字中，添加`blog`关键字，并且添加`teedoc-plugin-blog`插件\n```json\n    \"route\": {\n        \"blog\": {\n            \"/blog/\": \"blog\"\n        }\n    },\n    \"plugins\": {\n            \"teedoc-plugin-blog\": {\n            \"from\": \"pypi\",\n            \"config\": {\n            }\n        }\n    }\n```\n\n比如这里`/blog/`就是生成的博客网页路径（url），`blog`就是源文件的路径，和文档和资源文件的`route`设置类似\n\n然后执行安装插件的命令\n```shell\nteedoc install\n```\n\n\n## 创建博客文件夹\n\n* 在刚刚配置的`blog`文件夹中建立一个`config.json`，使用方法同前面说的文档的`config.json`相同。\n* 新建一个`README.md`文件，用来写博客的首页，比如只写头信息，不写内容，生成的网页会在这个文件渲染后的基础上添加博客列表，这里`date: false` 代表不在这个页面显示日期\n\n```markdown\n---\n\ntitle: 博客\nkeywords: teedoc, 博客生成, 静态博客\ndesc: teedoc 静态博客页面生成\nshow_source: false\ndate: false\n\n---\n\n```\n\n## 创建博客文件\n\n在`blog`目录下的任意位置，创建博客文件，格式为`md`，写入内容即可。同样，可以添加头信息，比如\n```markdown\n\n---\n\ntitle: teedoc 博客支持\nkeywords: teedoc, 博客, 生成博客, 静态博客\ndesc: teedoc 生成静态博客页面\nauthor: neucrack\ndate: 2021-03-14\ntags: hello, blog, teedoc\ncover: ./assets/cover.jpg\n\n---\n\n这里也可以使用图片![图片](./assets/img.jpg)\n这是一段测试简介，会显示在列表中，使用`<!-- more -->`来分隔正文\n\n<!-- more -->\n\n\n## 正文标题一\n\n正文\n\n\n```\n\n>! 注意 `tags` 和 `keywords` 是以英文逗号隔开不是中文逗号\n\n\n这里用了`<!-- more -->`来分割了文章，前部分会被作为简介显示到博客首页列表中，方便读者预览，如果没有分割，则会取前`500`个字符作为简介\n\n## 生成页面\n\n执行`teedoc serve`命令来起一个服务即可访问`http://127.0.0.1/blog/`， 也可以将`/blog/`这个链接在`config.json`中加入到导航栏，作为博客入口。\n比如：\n```json\n{\n    \"navbar\": {\n        \"title\": \"teedoc\",\n        \"logo\": {\n            \"alt\": \"teedoc logo\",\n            \"src\": \"/static/image/logo.png\"\n        },\n        \"home_url\": \"/\",\n        \"items\": [\n            {\n                \"url\": \"/\",\n                \"label\": \"首页\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/get_started/zh/\",\n                \"label\": \"安装使用\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/develop/zh/\",\n                \"label\": \"开发\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/blog/\",\n                \"label\": \"博客\",\n                \"position\": \"left\"\n            }\n    }\n}\n```"}, "/get_started/zh/usage/list_files_by_size.html": {"title": "按照文件大小顺序列出所有文件/找出大文件", "content": "---\ntitle: 按照文件大小顺序列出所有文件/找出大文件\nkeywords: 找出目录下大文件, 文件大小排序\ndesc: 使用 teedoc 工具 teedoc-list-files 命令来按照目录下文件大小列出所有文件，方便查找出大文件\n---\n\n使用 `teedoc` 中的工具 `teedoc-list-files` 命令来按照目录下文件大小列出所有文件，方便查找出大文件\n\n使用帮助：\n```\nteedoc-list-files -h\n```\n\n比如需要将目录`my_doc`下的所有文件列出，并按照文件大小排序，可以这样使用：\n\n```\nteedoc-list-files -r my_doc all\n```\n\n这里 `-r` 是递归查找，即会查找子文件夹， `all` 代表所有文件格式，也可以指定其它格式，比如：\n\n```\nteedoc-list-files -r my_doc jpg\n```\n\n就会看到排序过后的文件列表了\n```\n402.1 KiB - 411708 : get_started/assets/images/jupyterlab.jpg\n234.2 KiB - 239864 : get_started/assets/images/pages_settings.jpg\n215.7 KiB - 220828 : get_started/assets/images/action_error.jpg\n165.8 KiB - 169815 : get_started/assets/images/action_error_log.jpg\n139.6 KiB - 142970 : get_started/assets/images/jupyterlab_1.jpg\n```\n\n\n如果你想要彻底删除文件及其历史记录，参考 [github 文档](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository) 或者 [gitee 文档](https://gitee.com/help/articles/4232#article-header2)"}, "/get_started/zh/usage/write_attention.html": {"title": "写文档的注意点", "content": "---\ntitle: 写文档的注意点\nkeywords: teedoc, 写文档, 注意点\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了使用 teedoc 写文档时的注意点\n---\n\n\n## 相对路径问题\n\n在`config.json`中写链接路径时，尽量写规范，比如`/get_started/zh/`， 而不是`/get_started/zh`\n\n即如果对应的路径不是文件，而是一个目录， 则必须在后面加一个`/`，让浏览器知道这是一个目录，\n这样我们在`md`文件中写相对路径比如`../assets/image/screenshot.png`就会转换为`/get_started/assets/image/screenshot.png`\n如果是`/get_started/zh`， 浏览器就会解析为`/assets/image/screenshot.png`，就是错误的地址，就会找不到图片！\n\n当然，你也可以选择使用绝对路径"}, "/get_started/zh/usage/i18n.html": {"title": "teedoc 国际化（i18n）（翻译）", "content": "---\ntitle: teedoc 国际化（i18n）（翻译）\nkeywords: teedoc, i18n, 国际化, 翻译\ndesc: teedoc 国际化（i18n）, 包括插件国际化和文档国际化\n---\n\n## 国际化（i18n）简介\n\n如果文档只使用一种语言，事情比较简单，但是事实是经常会遇到不同语言的使用：\n* 对于 `teedoc`， 必须支持足够多的语言，或者易于扩展翻译。 因为使用者可能使用的语言不尽相同， 可能是英语， 可能是中文， 也可能是其它语言， 哪怕使用者只使用一种语言\n\n* 对于使用者， 在使用时需要指定语言， 以让`teedoc`生成合适的翻译， 最后在没有翻译的时候能自定义文字，或者能参与翻译\n\n所以国际化（`Internationalization`, 缩写 `i18n`）就十分重要， 下面对在`teedoc`中如何使用国际化进行介绍\n\n\n\n## 文档指定语言\n\n每份文档都有一个`config`(`config.yaml`或者`config.json`)文件，在其中加入`locale`即地域（地域对应了一种语言）关键字，比如 简体中文\n\n```json\n{\n    \"locale\": \"zh_CN\",\n    ...\n}\n```\n\n地域编号可以参考[这里](https://www.science.co.il/language/Locale-codes.php), 可以在[维基百科](https://en.wikipedia.org/wiki/Language_localisation)查阅到， 或者使用程序来查看，比如\n\n```shell\npip install babel\npybabel --list-locales\n```\n\n比如`zh` `zh_CN` `zh_TW` `en` `en_US` `ja` 等等\n\n文档只有正确指定了语言，才能让部分文档的内容语言正确， 比如搜索插件的提示语言，不同语言的文档页面会生成对应语言的搜索提示信息\n\n\n## 文档内容国际化（翻译）\n\n如果你有一份文档，希望有其它语言的翻译，有几种方法：\n\n* 使用页面翻译插件，用户可以选择翻译到几乎任何语言，比如谷歌翻译插件`teedoc-plugin-google-translate`, 但是缺点是机器翻译可能有些地方会不准确\n* 用户自己使用浏览器自带的页面翻译功能，和插件的功能一样\n* 新建一份翻译文档， 进行人工翻译校对\n\n如果需要人工翻译，则需要在`site_config`中进行配置`translate`关键字，比如编辑`site_config`(`site_config.yaml`或者`site_config.json`):\n\n```json\n    \"route\": {\n        \"docs\": {\n            \"/get_started/zh/\": \"docs/get_started/zh\",\n            \"/develop/zh/\": \"docs/develop/zh\",\n        },\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n        },\n        \"assets\": {\n            \"/static/\": \"static\",\n            \"/get_started/assets/\": \"docs/get_started/assets\"\n        },\n        \"/blog/\": \"blog\"\n    },\n    \"translate\": {\n        \"docs\": {\n            \"/get_started/zh/\": [ {\n                    \"url\": \"/get_started/en/\",\n                    \"src\": \"docs/get_started/en\"\n                }\n            ],\n            \"/develop/zh/\": [ {\n                    \"url\": \"/develop/en/\",\n                    \"src\": \"docs/develop/en\"\n                }\n            ]\n        },\n        \"pages\": {\n            \"/\": [ {\n                    \"url\": \"/en/\",\n                    \"src\": \"pages/index/en\"\n                }\n            ]\n        }\n    },\n```\n\n这里有两份文档`\"/get_started/zh/\"`和`\"/develop/zh/\"`, 以及页面`\"/\"`, 都是中文文档.\n现在我们需要为他们三份文档添加英文翻译, 分别在`translate` -> `docs`下添加翻译， 翻译文档需要指定`url`（生成的路径， 需要`/`结尾）和`src`（翻译文档的根目录， 不需要`/`结尾）\n\n然后\n* 将 `config`(`config.yaml`或`config.json`) 和 `sidebar`(`sidebar.yaml`或`sidebar.json`) 复制一份到 翻译文档目录比如这里是`\"docs/get_started/en\"`，\n* 修改`config`的`locale`值为`en`, 在`navbar`添加语言选项, `type` 指定为`language`\n* 翻译`sidebar`为英文, 结构需要和源文相同， 只是 `label` 不同， 若不相同在构建时会抱警告消息\n* 复制需要翻译的文档并翻译， 需要和源文档目录结构相同，如果用户通过侧边栏访问到了未翻译的文档，会自动显示[no_translate.md](https://github.com/teedoc/teedoc/blob/main/teedoc/templates/no_translate.md)页面，你也可以在翻译目录下新建一个`no_translate.md`文档来覆盖默认的，建议基于默认的修改\n\n```json\n    \"locale\": \"en\",\n    \"navbar\": {\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"语言: \",\n                \"position\": \"right\",\n                \"type\": \"language\"\n            }\n        ]\n    }\n```\n\n\n## 插件国际化\n\n插件使用`babel`进行国际化渲染， 使用[gettext](https://www.gnu.org/software/gettext/)定义的格式， 可以使用[gettext](https://www.gnu.org/software/gettext/) 生成， 翻译文件格式为\n* `pot`: 翻译模板字符文件\n* `po`: 翻译字符文件\n* `mo`: 翻译编译后的二进制文件， 用于发布给程序使用\n\n这里以[teedoc-plugin-search](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-search/teedoc_plugin_search)为例，需要给搜索提示进行国际化\n\n目录下有`locales`文件夹， 生成过程：\n* 在`__init__.py`中使用`gettext`来使用国际化， 在`babel.cfg`中设置了寻找`py`文件\n* 执行`./trans_prepare.sh` 生成翻译文件，会自动寻找使用了翻译的字符串\n* 手动翻译`locales/语言目录/*.po`\n* 执行`./trans_finish.sh`来编译`po`生成`mo`文件\n* 运行即可使用`mo`文件\n* 记得添加资源文件到`setup.py`的`package_data`中\n\n\n对于 `HTML template`的渲染， 比如 [teedoc-plugin-theme-default](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-theme-default/teedoc_plugin_theme_default)， 会自动从`locales`目录下查找翻译， 在模板中使用`Jinja2`语法使用即可，比如\n\n```jinja2\n{% trans %}需要翻译的语句{% endtrans %}\n```\n\n生成翻译的方法和上面所讲相同"}, "/get_started/zh/usage/layout_template.html": {"title": "布局模板 - 自定义 HTML 布局", "content": "布局模板 - 自定义 HTML 布局\n==========\n\n## 布局模板基础使用方法\n\n可以使用主题自带的模板，比如错误页面，可以直接使用`404.html`， 只需要在`metadata`中添加`layout`键值即可\n\n```markdown\n---\nlayout: 404.html\n---\n```\n\n\n## 自定义布局模板\n\n首先写布局模板文件, 支持 `Jinja2` 语法, 写法可以参考默认[主题插件的布局模板的写法](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-plugin-theme-default/teedoc_plugin_theme_default/templates).\n\n模板文件可以放到两个地方, 一个是放到主题插件里面, 插件作者可以这样做；\n\n另一个就是放到布局模板文件夹(默认文档根目录`layout`)下, 然后单独对特定的页面使用特定的布局模板, 在文章头部`metadata`处添加`layout`键值:\n`layout`: 页面使用的布局模板, 默认不需要这个键值, 会使用主题插件里面的配置,需要你需要自定义这个页面的布局, 可以设置这个参数, 路径相对于`site_config`中的`layout_root_dir`路径, `layout_root_dir` 默认为`layout`, 所以要使用`layout/special_layout.html` 只需要填写`special_layout.html`\n\n可以基于主题的模板修改，或者继承主题的模板，比如小改一下`404.html`页面的`body`部分，只需在`layout`目录下新建一个`my_404.html`， 注意文件名不能和内置的文件名冲突， 如果冲突会提示`generate html fail: maximum recursion depth exceeded in comparison`:\n```markdown\n{% extends \"404.html\" %}\n\n{% block body_404 %}\n\n这里是 body\n{{ body|safe }}\n\n{% endblock%}\n```\n\n然后在`404.md`中使用这个模板\n```markdown\n---\nlayout: my_404.html\n---\n```\n\n## jinja2 模板变量\n\n这里列出了所有的支持的变量:\n\n### page head info\n\n* `lang`: language, e.g. `en`, or `zh-CN`\n* `metadata`: metadata from doc metadata, dict type\n* `page_id`: page id , a string, set in doc config and doc metadata\n* `page_classes`: page classes, a list, set in doc config and doc metadata\n* `keywords`: keywords, a list, set in doc metadata\n* `description`: description, a string, set in doc metadata\n* `header_items`: tags in head(`<head></head>`) tag, a string list\n* `title`: page title, can be null, string, set in doc metadata\n* `site_name`: site name, string, set in site config\n* `js_vars`: js variables set and used by plugins, a dict object\n\n### navbar\n\n* `logo_url`: site logo image url, string, can be null, set in doc config\n* `logo_alt`: site logo alt info, string, can be null, set in doc config\n* `home_url`: home url, e.g. \"/\", \"/site0/\", string\n* `navbar_title`: navbar title, html string, can be null, set in doc config\n* `navbar_main`: navbar left html, html string\n* `navbar_options`: navbar right html, html string\n* `navbar_plugins`: navbar plugins html, html string\n\n### sidebar info\n\npages no sidebar, only article of docs have\n\n* `sidebar_title`: sidebar title, string, can be html string, set in doc sidebar config\n* `sidebar_items_html`: sidebar items html, html string\n\n### body info\n\n#### article of docs body info\n\n* `article_title`: doc's article title, string, set in doc metadata\n* `tags`: article tags, a string list, set in doc metadata\n* `author`: article author, string, can be null, set in doc metadata\n* `date`: article create date, string, can be null, set in doc metadata\n* `show_source`: show source button info, string, can be null, set in site config and doc metadata\n* `source_url`: source file's url, valid only when show_source is not null\n* `body`: body html, html string\n* `previous`: previous article, can be null\n  * `title`: previous article title, string\n  * `url`:  previous article url, string\n* `next`: next article\n  * `title`: next article title, string\n  * `url`:  next article url, string\n* `toc`: toc html string, can be null\n\n\n#### pages body info\n\n* `body`: body html, html string\n\n### page footer info\n\n* `footer_top`: footer top html string\n* `footer_bottom`: footer bottom html string\n* `footer_js_items`: js items last load int html, string list"}, "/get_started/zh/usage/compare_dirs.html": {"title": "对比两个目录中的不同文件和改动文件", "content": "---\ntitle: 对比两个目录中的不同文件和改动文件\nkeywords: 对比两个目录, 找出文件更改\n---\n\n使用 `teedoc` 中的工具 `teedoc-compare` 命令来比较两个目录文件的不同。\n比如我们在生成新的 `out` 目录后，需要和旧的 `out` 目录对比，来找出发生了更改的文件，这样我们可以只上传改动了的文件。\n\n\n比如旧的生成 html 的目录为`old_out`，新的为`out`，则通过以下命令对比\n```bash\nteedoc-compare old_out out\n```\n\n会用 `json` 格式打印出不同的文件:\n```json\n{\n    \"new\": [],\n    \"modified\": [],\n    \"deleted\": []\n}\n```\n\n使用帮助：\n```\nteedoc-compare -h\n```"}, "/get_started/zh/usage/deploy_nginx.html": {"title": "使用 nginx 部署 teedoc 生成的网站到服务器", "content": "---\ntitle: 使用 nginx 部署 teedoc 生成的网站到服务器\nkeywords: teedoc, 部署, nginx\ndesc: 使用 nginx 部署 teedoc 生成的网站到服务器\n---\n\n\n这里简要介绍，更多详细使用请自行查找文档或教程， 比如 `HTTPS`\n\n## 安装 nginx\n\n服务器安装 `nginx`， 比如`ubuntu`：\n```\nsudo apt update\nsudo apt install nginx\n```\n\n## 配置并启动 nginx 服务\n\n```\nnginx -t\n```\n可以看到配置文件路径，一般是`/etc/nginx/nginx.conf `， 可以看到文件里面包含了`/etc/nginx/site-enabled/`\n\n查看下面的`default`文件，可以看到语句\n```\nlisten 80 default_server;\nroot /var/www/html;\n```\n即监听`80`端口，网站根目录在这里，我们将我们的网站内容拷贝到这里，即`out`目录下所有文件拷贝到`/var/www/html/`目录下\n\n然后：\n```\nservice nginx start\n```\n\n访问`http://ip:80`就可以访问到网站了，`:80`也可以省略， 也可以修改成其它端口，因为国内没有备案的网站不允许使用`80`端口，海外的服务器则没有限制"}, "/get_started/zh/usage/quick_start.html": {"title": "teedoc 快速开始", "content": "---\ntitle: teedoc 快速开始\nkeywords: teedoc 使用, teedoc 快速开始\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的快速上手使用方法\n---\n\n本篇文档主要是为了让刚接触的你快速上手， 更多请看后面更详细的文档\n\n## 安装 Python3\n\n`teedoc` 是基于`Python3`语言开发的软件，需要有这个软件的支持\n\n比如在`Ubuntu`上：\n\n```shell\nsudo apt install python3 python3-pip git\n```\n\n`Windows` 和 `macOS`请到[官网下载](https://www.python.org/downloads/)\n\n\n## 安装 teedoc\n\n打开终端(`Windows`按`Ctrl+R`输入`cmd`)，输入：\n\n```shell\npip3 install teedoc\n```\n\n以后使用以下命令来更新软件\n\n>! 使用前务必同时更新软件和插件再使用，以防版本不同导致出现问题\n\n```shell\npip3 install -U teedoc\n```\n\n> 如果你的网络使用 `pypi.org` 速度很慢，可以选择其它源，比如清华 tuna 源： `pip3 install teedoc -i https://pypi.tuna.tsinghua.edu.cn/simple`\n\n现在你可以在终端使用 `teedoc` 命令了\n\n如果不能，请检查是不是`Python`可执行目录没有加入到环境变量 `PATH`,\n比如可能在 `~/.local/bin`\n\n## 新建工程\n\n新建一个空目录用来放文档工程\n\n```shell\nmkdir my_site\ncd my_site\nteedoc init\n```\n\n或者\n```shell\nteedoc -d my_site init\n```\n\n选择`1`，也就是`minimal`模板进行生成， 也可以直接`teedoc -d my_site --template=minimal init`进行生成\n\n这会在 `my_site` 目录下自动生成一些基础文件\n\n\n另外，除了使用`init`命令生成一份最小工程，你也可以获得一份官网文档源码，基于这个文档内容修改\n```shell\ngit clone https://github.com/teedoc/teedoc.github.io my_site\n```\n或者\n```shell\ngit clone https://gitee.com/teedoc/teedoc.gitee.io my_site\n```\n\n## 安装插件\n\n这会根据`site_config.json`中的`plugins`的插件设置安装插件\n\n```shell\ncd my_site\nteedoc install\n```\n\n> 插件也是以 `python` 包的形式发布的， 所以这会从 `pypi.org` 下载对应的插件，同样，也可以使用其它源，比如清华 tuna 源： `teedoc -i https://pypi.tuna.tsinghua.edu.cn/simple install`\n\n<span></span>\n\n>! 使用前务必同时更新软件和插件再使用，以防版本不同导致出现问题\n\n## 构建 `HTML` 页面并起一个`HTTP`服务\n\n```shell\nteedoc serve\n```\n\n这个命令会先构建所有`HTML`页面以及拷贝资源文件，然后起一个`HTTP`服务\n如果只需要生成页面，使用\n\n```shell\nteedoc build\n```\n\n\n在显示 `Starting server at 0.0.0.0:2333 ....` 后，就可以了\n\n打开浏览器访问: [http://127.0.0.1:2333](http://127.0.0.1:2333)\n\n\n同时可以看到目录下多了一个`out`目录，里面就是生成的静态网站内容，直接拷贝到服务器使用`nginx`或者`apache`进行部署即可\n\n\n## 文档结构\n\n因为 `teedoc` 特别为 多文档系统 设计， **有个基本概念， 每个文档工程包含了多份文档， 每份文档都有自己的配置文件名为 config** 需要先牢记\n\n工程里面有几个重要文件：\n* 工程根目录有`site_config.json`文件， 是工程的主要配置\n* 工程里面可以有多份文档，在`site_config`的`route`配置项中设置，每份文档目录下面必须有`config.json`和`sidebar.json`(`json`文件也可以是`yaml`文件)， `config`文件负责这份文档的配置项，比如文档名称，多份文档可以使用`import`公用一份模板\n\n## 添加一篇文档\n\n* 在本文件所在目录创建 `markdown`（以  `.md` 结尾的）文件，比如 `first.md`，添加内容\n\n每篇文章开头都可以有一个`元数据区`， 用以配置文章的相关配置， 至少需要一个`title`即标题，更多配置项和文档格式请[阅读文档](../syntax/syntax_markdown.html)\n\n```markdown\n---\ntitle: title\n---\n\n## 标题一\n\n内容一\n\n## 标题二\n\n内容二\n```\n\n如果没有`元数据区`，则至少需要一个一级标题作为文章标题，比如：\n```markdown\n# 文章标题\n\n## 标题一\n\n内容一\n```\n或者\n```markdown\n文章标题\n===\n\n## 标题一\n\n内容一\n```\n\n\n* 在 `sidebar.yaml` 中添加侧边栏链接\n\n```markdown\nitems:\n-   label: Brief\n    file: README.md\n-   label: First\n    file: first.md\n```\n\n## 使用图片\n\n在`.md`文件中使用图片，有三种方法：\n\n* 直接引用 `url`， 比如 `https://teedoc.github.io/static/image/logo.png` 或者 `/static/image/logo.png`\n\n* 相对路径引用图片文件。 比如 `./assets/logo.png`. 比如\n```\ndoc1\n├── assets\n     └── logo.png\n├── config.json\n├── README.md\n└── sidebar.yaml\n```\n这是工程中的一份文档，下面有`config`配置文件和`sidebar`文件.\n直接在`README.md`文件中引用`![logo](./assets/logo.png)` 即可。\n**需要注意的是， 只能引用当前文档内文件夹的图片**，不能用相对路径引用这份文档以外的图片\n\n* 如果需要引用当前这份文档之外的路径的资源，可以通过设置路径映射（`route`）实现，比如在`docs`目录下有文件：\n```\ndocs\n└── assets\n     └── logo.png\n      doc1\n      ├── config.json\n      ├── README.md\n      └── sidebar.yaml\nstatic\n```\n我们在`README.md`文件中引用`![logo](../assets/logo.png)` ，会发现图片没法显示\n\n要让这种引用能够使用， 需要在`site_config`中设置\n```json\n\"route\": {\n    \"docs\": {\n        \"/doc1/\": \"docs/doc1\"\n    },\n    \"assets\": {\n        \"/static/\": \"static\",\n        \"/assets/\": \"docs/assets\"\n    }\n}\n```\n这样设置就可以使用了。 \n> 原因是： 我们设置了`docs/doc1`下的文档渲染后拷贝到`out/doc1`目录，`docs/assets`拷贝到`out/assets`，所以在`out/doc1`下面的文档直接使用相对路径就可以引用`out/assets`目录的资源文件了\n\n## 设置地区\n\n设置文档地区，以让某些页面和文字显示为对应的语言， 比如搜索插件会根据文档地区生成对应的搜索提示等\n\n在`config/config.json`文件中，修改`\"locale\": \"en\"`为实际使用的地区， 比如`zh`, `zh_CN`, `zh_TW`, `en_US`, `ja`等， 更多看[i18n文档](i18n.html)\n\n## 更多例子\n\n更多请访问: [teedoc.neucrack.com](https://teedoc.neucrack.com/) 或者 [teedoc.github.io](https://teedoc.github.io/)\n\n更多例子访问: [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) 或者 [https://github.com/teedoc/template](https://github.com/teedoc/template) , 或 [sipeed wiki](https://github.com/sipeed/sipeed_wiki)"}, "/get_started/zh/usage/seo.html": {"title": "SEO(为搜索引擎优化)", "content": "---\ntitle: SEO(为搜索引擎优化)\nkeywords: teedoc, SEO, 搜索优化, 搜索引擎收录\ndesc: 使用 teedoc 如何做 SEO（加速搜索引擎收录网站和页面）\n---\n\n`SEO`: `Search Engine Optimization`, 即为搜索引擎优化，为了让自己的网站能被搜索引擎收录，这样用户才能通过搜索引擎搜索到我们的网站，我们需要做一些事情：\n\n\n## 页面关键词和描述\n\n在每个页面添加关键词和描述, 如果不添加影响也不大, 建议根据文章内容添加, 比如`.md`文件头(本页的源文)\n```markdown\n---\ntitle: SEO(为搜索引擎优化)\nkeywords: teedoc, SEO, 搜索优化, 搜索引擎收录\ndesc: 使用 teedoc 如何做 SEO（加速搜索引擎收录网站和页面）\n---\n\n```\n\n这会自动为文章添加一个标题， 并且将关键词和描述添加到`HTML`文件中，方面搜索引擎抓取\n\n另外，由于页面会根据这个标题生成一个一级标题，所以文章最好不要再使用一级标题，直接使用二级标题，比如:\n\n```markdown\n---\ntitle: SEO(为搜索引擎优化)\nkeywords: teedoc, SEO, 搜索优化, 搜索引擎收录\ndesc: 使用 teedoc 如何做 SEO（加速搜索引擎收录网站和页面）\n---\n\n## 简介\n\n这里是简介\n\n## 目录二\n\n```\n\n## 图片 alt 信息\n\n在 markdown 中使用使用时, 尽量添加图片描述\n\n错误:\n```markdown\n![](url)\n```\n\n正确:\n```markdown\n![图片描述](url)\n```\n\n## 网站地图\n\n会生成一份网站地图到`/sitemap.xml`，以及一份机器人爬取规则到`/robots.txt`中，可以到搜索引擎的站长后台中提交这个`sitemap`的`url`，这样搜索引擎就会来抓取信息了\n\n可以在 `site_config.json` 中设置`robots`键值来阻止爬虫爬取某些文件或内容， 格式参见[使用说明](./start.html)中对`robots`键值的说明\n\n\n\n## 页尾备案信息\n\n在中国国内，网站都需要备案才能被搜索引擎收录，在`config.json`中添加你的网站的备案信息，注意备案信息必须要和域名一致，否则无效"}, "/get_started/zh/usage/problems.html": {"title": "使用 teedoc 时的常见问题", "content": "---\ntitle: 使用 teedoc 时的常见问题\nkeywords: teedoc, build, error, 出错, 问题, 无法运行\ndesc: 使用 teedoc 时的常见问题\n---\n\n\n可以在[github issue](https://github.com/teedoc/teedoc/issues?q=) 查看大家提过的问题以及解决方法， 可以提交问题， 也欢迎发现问题修改代码并提交PR\n\n\n## jinja2.exceptions.TemplateNotFound: base.html.j2\n\n需要更新 `nbconvert`：\n\n```shell\npip3 install --upgrade nbconvert\n```\n\n## 插件报错, 代码抛出错误\n\n可以先尝试更新`teedoc`:\n\n```\npip install -U teedoc\n```\n\n然后再在相应的文档下面更新插件:\n\n```\nteedoc install\n```\n\n如果仍然有问题, 可以到 github [提交 issue](https://github.com/teedoc/teedoc/issues/new)\n\n\n## OSError: [Errno 28] inotify watch limit reached\n\n只会在使用`teedoc serve`时出现， 即文件监测数量达到了系统设置的上限。\n一般发生在有软件大量检测了文件，常见的情况有：\n* 编辑器如`vscode`打开了有非常多文件的文件夹， 关掉这类软件或者少打开文件（夹）一般就能解决问题， 参考 [error ENOSPC](https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc)\n* 文档项目内的文档确实太多了，达到了监测的上限，这种情况一般很少出现，如果出现了，需要设置系统的监测上限值，具体方法请自行搜索\n\n## OSError: [WinError 10013] 以一种访问权限不允许的方式做了一个访问套接字的尝试。\n\n一般这种情况重启可以解决。但是我们也可以指定使用别的端口来重新构建本地服务，比如 `teedoc serve --port=4969`\n然后再访问[127.0.0.1:4969](127.0.0.1:4969)来查看新构建的界面"}, "/get_started/zh/usage/deploy_cloud.html": {"title": "部署 teedoc 生成的网站到云服务商的 Web 服务", "content": "---\ntitle: 部署 teedoc 生成的网站到云服务商的 Web 服务\nkeywords: teedoc, 部署, 云服务商, 云服务器, web服务\ndesc: 部署 teedoc 生成的网站到云服务商的 Web 服务\n---\n\n\n自建服务器需要自己购买服务器，需要配置服务器等等，没那么困难，但是稍微有点点复杂，另外一种选择就是使用云服务商提供的 Web 服务。\n\n我们要做的就是将生成的 html 页面文件上传到云服务商的 Web 服务中，然后就可以通过云服务商提供的域名访问了，只需要给服务商付费就可以了（一般是流量+请求次数费用）。\n\n比如常见的有阿里云、腾讯云、AWS、Google Cloud 等等，比如阿里云提供了 OSS 储存服务，腾讯云提供了 COS 储存服务，而且为静态网站做了优化，比如不带`.html`的访问连接会自动跳转到带`.html`的页面。\n> 注意有些提供商没有对静态页面做优化，可能有些特性没法设置，比如七牛云不能支持不带`html`结尾的链接，比如`/test`不能自动转到`/test.html`，以及默认没有打开访问`/`自动转到`/index.html`，以及`404.html`不能直接从储存桶里面读取，需要手工上传到七牛云的配置里面\n\n\n这里以腾讯云为例：\n\n## 创建一个储存桶\n\n* 注册腾讯云账号，开通 COS 储存服务\n* 创建一个储存桶，比如叫`teedoc`，会得到一个储存桶名字(`bucket name`)，比如`teedoc-1250000000`，以及选择服务器地址，比如广州的`region`就是`ap-guangzhou`\n* 设置里面启用静态网站选项，设置默认首页为`index.html`，设置404页面为`404.html`，如果不需要 CDN 可以把强制 HTTPS 打开，这样用户访问永远都是访问的 HTTPS 站点\n* 设置完静态站点后，会得到一个域名，比如`teedoc-1250000000.cos-website.ap-guangzhou.myqcloud.com`，这个域名就是你的网站域名，可以通过这个域名访问你的网站\n* 如果需要自定义成自己的域名，则修改“自定义源站域名”即可，其实就是设置你的域名的 CNAME 记录指向这个域名，比如`teedoc.example.com`的 CNAME 记录指向`teedoc-1250000000.cos-website.ap-guangzhou.myqcloud.com`，设置好了就可以通过`teedoc.example.com`访问你的网站了\n* 另外云服务商一般都配套了 CDN 服务，如果你的网站访问量小，可以不用开启 CDN，如果访问量大，可以开启 CDN，这样可以加速访问速度，但是会增加费用。\n另外设置 CDN 需要注意的是上一步的“自定义源站域名”的地方就不要设置了，直接设置“自定义 CDN 加速域名”即可\n\n\n## 上传网站文件\n\n通过 `teedoc` 生成了网站文件，在`out`目录下， 注意一定要用`teedoc build`命令生成， 不要用`teedoc serve`命令生成！\n\n然后上传到腾讯云：\n```\nteedoc-upload --progress raw --cloud tencent --region ... --bucket ... --secret_id ... --secret_key ... out\n```\n这里`...`填对应的信息， `secret_id`和`secret_key`点击控制台头像->选择访问管理->API 密钥管理->创建密钥，然后就可以看到了，可以考虑专门建立一个子账号，然后只给这个子账号 COS 的权限，这样可以保证一定程度上的安全性。\n\n另外，如果在自动构建系统中没法打印进度条，添加参数`--progress raw`；以及秘钥最好隐藏起来，比如 github 的 action 就提供了`secret`的功能：\n```\nteedoc-upload --progress raw --cloud tencent --region ${{ secrets.TENCENT_REGION }} --bucket ${{ secrets.TENCENT_BUCKET }} --secret_id ${{ secrets.TENCENT_SECRET_ID }} --secret_key ${{ secrets.TENCENT_SECRET_KEY }} out\n```\n\n## 更新网站文件\n\n第一次上传文件后，后续不需要每次都上传所有文件，只需要上传更新的文件即可，这样可以节省时间和流量，比如：\n```\nteedoc-upload --progress raw --cloud tencent --region ... --bucket ... --secret_id ... --secret_key ... old_out out\n```\n这里 `old_out`是上一次生成的网站文件，`out`是本次生成的网站文件，`teedoc-upload`会自动比较两个文件夹，然后只上传更新的文件。"}, "/get_started/zh/usage/gitbook2teedoc.html": {"title": "快速从 gitbook 转换为 teedoc", "content": "---\ntitle: 快速从 gitbook 转换为 teedoc\nkeywords: gitbook, teedoc\ndesc: 快速从 gitbook 转换为 teedoc, 摆脱 gitbook 单线程构建龟速\n---\n\n\n介绍如何 快速从 gitbook 转换为 teedoc, 因为 gitbook 停止了维护, 有一些特性已经不符合现在使用,比如单线程构建, 十分缓慢.\n\n这里以[re0-web](https://github.com/lyy289065406/re0-web/tree/033f5dfd7c9d3b8654b3c1ea4dabfab8b3ebebb7)这个项目为例:\n\n\n作者在 readme 中说构建一次需要 30 分钟, 但是看了一下源码, 文档数量并不是很多, 不应该需要这么长时间, 看了下作者用了 docker, 而且是在 windows 下, 自然就很慢了. 解决办法就是切换到 linux 构建, 会加快一些速度, 估计能在5分钟内构建完成.\n\nteedoc 有着多线程构建的优势, 同时其它功能和 UI 也能满足的情况下, 可以考虑切换到 teedoc (不过 teedoc 暂时不支持 epub 和 pdf 导出(2021-05-29), 如果支持了会在[这里](../index.html)说明)\n\n成功转换后的效果: [teedoc.github.io/re0-web-teedoc/](https://teedoc.github.io/re0-web-teedoc/)\n\n\n## 新建 teedoc 工程\n\n```\nmkdir re0-web-teedoc\ncd re0-web-teedoc\nteedoc init\nteedoc install\n```\n\n使用`teedoc serve`命令可以启动构建并起一个 http 服务, 访问`http://127.0.0.1:2333` 即可预览\n\n使用`teedoc build`命令可以构建一个可以部署到服务器的版本, 文件在`out`目录下, 构建前可以先删除 `out` 目录\n\n\n## 复制源文件\n\n\n`re0-web` 这个项目的源文件在`gitbook/markdown`目录下面, 资源文件(图片)都放在`gitbook/res`, 左侧目录文件在`gitbook/SUMMARY.md`\n\n其它文件都不重要, 都是工程文件或者生成的文件, 所以我们只需要将它们复制过来\n\n比如创建文件夹`books/re0`, 然后将原工程 `gitbook/markdown/ch/`目录中的内容 复制到 `books/re0/ch/`目录中, 将原工程 `gitbook/markdown/jp/`目录中的内容 复制到 `books/re0/jp/`目录中, 原工程`gitbook/markdown/character.md` 和 `gitbook/README.md` 分别复制一份到`books/re0/ch/` 和 `gitbook/markdown/jp/`中\n\n另外, 为资源文件创建一个文件夹`books/res/`, 将原工程`gitbook/res/`目录下的所有文件拷贝到`books/res/`目录下\n\n\n## 为每份文档建立配置\n\n从 `docs/get_started/zh/`目录下复制`config.json` 和 `sidebar.yaml` 文件到`books/re0/ch/`和`books/re0/jp/`\n\n每个有`config.json` 的目录就相当于是 **一份文档**, 或者说 **一本书籍**\n\n\n\n## 修改 site_config.json\n\n* 修改 route\n\n编辑`site_config.json`, 找到 `route`键值, 修改内容:\n```json\n     \"route\": {\n        \"docs\": {\n            \"/gitbook/book/markdown/ch/\": \"books/re0/ch\",\n            \"/gitbook/book/markdown/jp/\": \"books/re0/jp\"\n        },\n        \"pages\": {\n            \"/\": \"pages/index/zh\",\n            \"/en/\": \"pages/index/en\"\n        },\n        \"assets\": {\n            \"/static/\": \"static\",\n            \"/res/\": \"books/res\"\n        },\n```\n\n这里`url`兼容了之前的路径`gitbook/book/markdown/` 和资源路径`/res/`. \n\n因为`re0-web`这个项目源文件的图片都是用的绝对路径`url`比如`<img width=\"500\" src=\"/res/img/article/chapter010/12.jpg\" />`, 所以这里将`/res/`映射到了`books/res`文件夹;\n\n另外源文件内可以用相对路径, 但是目录必须在同一个份文档内, 比如在本文档(点击右上角编辑本页可以看到源码), `![](../assets/images/logo.png)`: ![](../assets/images/logo.png)\n\n因为`assets`目录也在`get_started/zh/`目录下, 所以可以直接引用, 但是超出这份文档范围的目录就不可以直接用相对路径引用了.\n\n\n但是也有办法实现, 比如在这里引用`get_started/assets/`目录下的资源,在`get_started/zh/`目录下也可以引用, 只需要巧妙地配置一下 `route`, 如下:\n默认\n```json\n    \"route\": {\n        \"docs\": {\n            \"/get_started/zh/\": \"docs/get_started/zh\",\n        },\n        \"assets\": {\n            \"/get_started/assets/\": \"docs/get_started/assets\"\n        },\n```\n\n* 修改其它\n\n修改 `title` `domain` `source`等等\n\n\n## 侧边栏目录\n\n* 查看文档\n\n如果这时使用`teedoc serve` 其实就可以在 `http://127.0.0.1:2333/gitbook/book/markdown/ch/character.html` 看到文档了\n\n但是左边的目录还没有完成, 现在修改左边目录\n\n* 转换 SUMMARY.md\n\n进入`books/re0/ch/`, 前面我们前面复制了一个`sidebar.yaml`的文件, 现在我们需要将 gitbook 的`SUMMARY.md` 转换成这个文件格式\n\n找到之前的`gitbook`工程的`SUMMARY.md`文件, 执行\n\n```shell\nteedoc -f 'SUMMARY.md' summary2yaml\n```\n\n我们就得到了一个`sidebar.yaml`文件, 复制到`books/re0/ch/`目录下覆盖之前的`sidebar.yaml`即可\n\n* 修改 sidebar.yaml 的文件路径\n\n因为之前的目录结构可能和新工程的目录结构不太像, 所以需要修改一下`sidebar.yaml`中的文件路径, 比如:\n\n`markdown/character.md` 修改成`character.md`, 即相对与文档(有`config.json`的目录)的路径\n`markdown/ch/chapter010/README.md` 修改成 `chapter010/README.md`, 可以批量替换`markdown/ch/`为空, 在很多编辑器里面都可以做到,比如`vscode`按`Ctrl+H`键来修改\n\n如果希望链接(`url`)在新的窗口打开, 则添加一个`target: _blank`键值即可\n\n\n* 查看效果\n\n然后再执行`teedoc serve`访问`http://127.0.0.1:2333/gitbook/book/markdown/ch/index.html`就可以看到左边的目录了, 对于`jp`的目录同理可以得到\n\n\n## 编辑导航栏\n\n导航栏需要根据需要编辑一下\n\n### 编辑模板`config/config_zh.json`\n\n```json\n{\n    \"class\": \"language_zh\",\n    \"navbar\": {\n        \"title\": \"re0-web\",\n        \"logo\": {\n            \"alt\": \"re0-web logo\",\n            \"src\": \"\"\n        },\n        \"home_url\": \"/\",\n        \"items\": [\n            {\n                \"url\": \"/gitbook/book/markdown/ch/\",\n                \"label\": \"中文\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/gitbook/book/markdown/jp/\",\n                \"label\": \"日本语\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"https://github.com/teedoc/re0-web-teedoc\",\n                \"label\": \"github\",\n                \"target\": \"_blank\",\n                \"position\": \"right\"\n            },\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"footer\":{\n        \"top\":[\n            {\n                \"label\": \"链接\",\n                \"items\": [\n                    {\n                        \"label\": \"使用 teedoc 构建\",\n                        \"url\": \"https://teedoc.neucrack.com\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"网站地图\",\n                        \"url\": \"/sitemap.xml\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"源码\",\n                \"items\": [\n                    {\n                        \"label\": \"本网站源文件\",\n                        \"url\": \"https://github.com/teedoc/re-web-teedoc\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            }\n        ],\n        \"bottom\": [\n        ]\n    },\n    \"plugins\": {\n        \"teedoc-plugin-search\":{\n            \"config\": {\n                \"search_hint\": \"搜索\",\n                \"input_hint\": \"输入关键词，多关键词空格隔开\",\n                \"loading_hint\": \"正在加载，请稍候。。。\",\n                \"download_err_hint\": \"下载文件失败，请刷新重试或检查网络\",\n                \"other_docs_result_hint\": \"来自其它文档的结果\",\n                \"curr_doc_result_hint\": \"当前文档搜索结果\"\n            }\n        }\n    },\n    \"show_source\": \"编辑本文\"\n}\n```\n\n另外一个 `config_en.json` 可以更名为 `config_jp.json`, 同理修改下内容, 顺便重命名`pages/index/en`为`pages/index/jp`\n\n```json\n{\n    \"navbar\": {\n        \"title\": \"re0-web\",\n        \"logo\": {\n            \"alt\": \"re0-web logo\",\n            \"src\": \"\"\n        },\n        \"home_url\": \"/jp/\",\n        \"items\": [\n            {\n                \"url\": \"/gitbook/book/markdown/ch/\",\n                \"label\": \"中文\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"/gitbook/book/markdown/jp/\",\n                \"label\": \"日本语\",\n                \"position\": \"left\"\n            },\n            {\n                \"url\": \"https://github.com/neutree/re0-web-teedoc\",\n                \"label\": \"github\",\n                \"target\": \"_blank\",\n                \"position\": \"right\"\n            },\n            {\n                \"id\": \"language\",\n                \"label\": \"语言: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"footer\":{\n        \"top\":[\n            {\n                \"label\": \"Links\",\n                \"items\": [\n                    {\n                        \"label\": \"Site generated by teedoc\",\n                        \"url\": \"https://teedoc.neucrack.com\",\n                        \"target\": \"_blank\"\n                    },\n                    {\n                        \"label\": \"Sitemap\",\n                        \"url\": \"/sitemap.xml\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Source code\",\n                \"items\": [\n                    {\n                        \"label\": \"website source files\",\n                        \"url\": \"https://github.com/teedoc/re0-web-teedoc\",\n                        \"target\": \"_blank\"\n                    }\n                ]\n            }\n        ],\n        \"bottom\": [\n        ]\n    }\n}\n```\n\n### 修改每本书籍(/文档)的配置文件 config.json\n\n* 修改 `books/re0/ch/config.json`\n\n```json\n{\n    \"import\": \"config_zh\",\n    \"navbar\": {\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/gitbook/book/markdown/ch/\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/gitbook/book/markdown/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n* 修改 `books/re0/jp/config.json`\n\n```json\n{\n    \"import\": \"config_jp\",\n    \"navbar\": {\n        \"items\": [\n            {\n                \"id\": \"language\",\n                \"label\": \"Language: \",\n                \"position\": \"right\",\n                \"items\": [\n                    {\n                        \"id\": \"zh\",\n                        \"url\": \"/gitbook/book/markdown/ch/\",\n                        \"label\": \"中文\"\n                    },\n                    {\n                        \"id\": \"en\",\n                        \"url\": \"/gitbook/book/markdown/jp/\",\n                        \"label\": \"日本语\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n## 编辑首页\n\n编辑`pages/index/zh/README.md`, 根据需要修改即可\n\n\n## 部署\n\n和 `gitbook` 一样, `teedoc build`生成的都是静态文件,并且放在 `out`文件夹下, 直接拷贝到服务器部署即可,更多请看[文档](./deploy.html)\n\n最终效果: [teedoc.github.io/re0-web-teedoc/](https://teedoc.github.io/re0-web-teedoc/)"}, "/get_started/zh/usage/deploy_cdn.html": {"title": "部署 teedoc 生成的网站到 CDN", "content": "---\ntitle: 部署 teedoc 生成的网站到 CDN\nkeywords: teedoc, 部署, CDN\ndesc: teedoc 生成的网站部署到 CDN\n---\n\n\n\n\n为了让各个地方的用户访问站点更加快速，可以使用 CDN 加速，\n原理简单介绍就是先把网站放在一个源服务器上， 然后将这个资源同步到全国甚至全世界各地的节点上，\n浏览器想要通过域名访问网站，这个域名指向的服务器只做一件事情，就是解析浏览器的地点，然后返回给给浏览器离浏览器最近的节点 IP 地址，然后浏览器直接访问最近的节点，从而实现了加速\n\n\n先找一个 `CDN` 提供商，比如 阿里云 腾讯云 七牛云 都可以\n\n然后步骤如下：\n\n## 创建源服务器\n\n\n自己创建源服务器，源服务器更新后，服务商自动同步更新到各个 CDN 节点\n\n按照前面的方法建立一个网站 ，得到`域名A`， 比如`teedoc.github.io`\n\n\n## 为网站添加 CDN 加速\n\n如果是中国国内的服务商，需要先有一个备案的`域名B`，然后注册登录，添加一个 `CDN`服务， 设置回源站点为前面建立的网站`域名A`即可\n\n然后访问`域名B`，服务商会自动从`域名A`出拉取网页同步到全国或者全球的各个节点，然后用户访问`域名B`就会重定向到离用户最近的节点的`IP`，以保证最快的浏览速度"}, "/get_started/zh/usage/sites.html": {"title": "使用了 teedoc 的网站", "content": "---\ntitle: 使用了 teedoc 的网站\nkeywords: teedoc, 使用了 teedoc 的网站\ndesc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 使用了 teedoc 的网站\n---\n\n| 网站 | 简介 | 站点源文档 |\n| ---- | --- | --- |\n|[teedoc 官网](https://teedoc.github.io) | 好用的文档网站生成工具 | [teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) |\n|[MaixPy](https://maixpy.sipeed.com)     |  边缘 AI 计算 Python SDK | [sipeed/MaixPy_DOC](https://github.com/sipeed/MaixPy_DOC) |\n|[Sipeed Wiki](https://wiki.sipeed.com)  | Sipeed 官方Wiki | [sipeed/sipeed_wiki](https://github.com/sipeed/sipeed_wiki) |\n|[teedoc.github.io/re0-web-teedoc/](https://teedoc.github.io/re0-web-teedoc/) | 从 gitbook 转到 teedoc 的示例网站 | [teedoc/re0-web-teedoc](https://github.com/teedoc/re0-web-teedoc) |\n|[QuecPython](https://python.quectel.com/doc/) | QuecPython 文档中心 | [gitee](https://gitee.com/quecpython/Community-document) [github](https://github.com/quecpython/Community-document)  |\n| [BPI Steam Doc](https://bpi-steam.com/)             | BananaPi, Steam团队的文档（Wiki），包含了开源软件和开源硬件资料，AIOT资料等等 | [BPI-STEAM/BPI-Doc](https://github.com/BPI-STEAM/BPI-Doc) |\n| [udbg](https://udbg.github.io/) |  基于Lua的二进制调试/分析工具 | [udbg/udbg.github.io](https://github.com/udbg/udbg.github.io) |\n| [VastUtils](https://sakurajimamaii.github.io/VastDocs/) | 一款加快你安卓开发的安卓工具集 | [SakurajimaMaii/VastDocs](https://github.com/SakurajimaMaii/VastDocs) |\n\n期待你的使用， 欢迎[提交 issue](https://github.com/teedoc/teedoc.github.io/issues) 或者 PR 来添加你的网站"}, "/get_started/zh/syntax/syntax_html.html": {"title": "直接使用 HTML 文件编写内容", "content": "{% extends \"article.html\" %} {% block title %}\n\n# 直接使用 HTML 文件编写内容\n\n{% endblock %} {% block content %}\n\n## 直接使用 HTML 语法\n\n直接用 HTML 语法编写内容。\n\n本文件就是用 html 直接写的，源码点击右上方`编辑本页`查看\n\n## 同时支持 [Jinja2](https://jinja.palletsprojects.com/) 语法\n\n    \n    \n    \n    {% raw %}\n    {% extends \"article.html\" %}\n    注意这里 \"article.html\" 需要用引号引起来，不然会提示找不到 article\n    \n    {% block title %}\n    \n    \n    # 直接使用 HTML 文件编写内容\n    \n    \n    {% endblock %}\n    \n    {% block content %}\n    \n    \n    ## 直接使用 HTML 语法\n    \n    \n    {% endblock %}\n    {% endraw %}\n    \n\n这里能看到本页面继承与`article.html`并且对`title`和`content`做了修改，这样就能保留导航栏和侧边栏，以及使用主题了。\n具体能修改那些内容可以查看模板的源码，能够使用的模板，参考主题提供的模板文件，比如默认主题的模板文件在[这里](https://github.com/teedoc/teedoc/tree/main/plugins/teedoc-\nplugin-theme-default/teedoc_plugin_theme_default/templates)\n以及页面能够使用的变量参考[自定义页面模板](../usage/layout_template.html)中的变量说明。\n\n## html 文件作为模板文件使用\n\n除了直接用 html 写页面以外，你也可以先用 html 写好模板，放到`layout`目录下，在`.md`文件中使用这个模板。\n`.md`文件中的内容会以`body`变量传到`html`中，直接通过`{% raw %}{{ body|safe }}{% endraw %}`使用，\n这里`safe`表示不转义，这样在`.md`文件中就可以直接写 html 了。\n更多自定义模板内容查看[自定义页面模板](../usage/layout_template.html)。 {% endblock %}\n\n"}, "/get_started/zh/syntax/syntax_jupyter.html": {"title": "Jupyter notebootk 支持（.ipynb 格式）", "content": "本文使用jupyter编写（`.ipynb`格式），源文档请点击右上角`编辑本页`查看`jupyter-notebook`插件`teedoc-plugin-jupyter-notebook-parser`默认可能没有使用，需要在`site_config`文件中配置```json\"plugins\":{\"teedoc-plugin-jupyter-notebook-parser\":{\"from\":\"pypi\",\"config\":{}}}```##Markdown元数据头每个`md`文件可以添加一个头，也叫`metadata`（中文叫元数据），通过这些键值来设置文章信息，格式为`yaml`格式，当然这个文件头是可选的，也可以不写```markdown---title:markdown语法tags:teedoc,markdown,语法keywords:teedoc,markdown,语法desc:teedoc的markdown语法介绍和实例id:zh_readmeclass:zh_readme#以#号开头表示注释---```*`title`:文章的标题，如果没有元数据头的话，可以使用```markdown#文章标题```或者```markdown文章标题===```*`keywords`:关键词，多个关键词用英文逗号`,`隔开，会被添加到`html`头中，方便搜索引擎爬取，不会显示到页面。也可以用`yaml`列表的格式写```markdownkeywords:-teedoc-markdown-语法```*`desc`:页面描述，会被添加到`html`头中，不会在页面显示，方便搜索引擎爬取*`tags`：文章标签，会显示到页面，多个标签用英文逗号`,`隔开，也可以用`yaml`列表的格式写，同`keywords`*`id`:页面`id`，会被添加到`html`标签中，比如`<htmlid=\"zh_readme\">...</html>`,通常不需要，一般在对某个页面单独自定义`css`的时候可能会用上，会覆盖`config.json`中的设置*`class`:页面`class`,多个用英文逗号`,`隔开，可以不设置，会覆盖`config.json`中的设置。比如可以通过设置这个值来达到设置特定页面的`css`样式。具体支持的样式见[主题插件的文档](../plugins/themes.md)*`layout`:页面使用的布局模板,默认会使用主题插件里面的配置,如果你需要自定义此页面的布局,可以设置这个参数,路径相对于`site_config`中的`layout_root_dir`设置的路径,`layout_root_dir`默认为`layout`,所以要使用`layout/special_layout.html`只需要填写`special_layout.html`.布局模板语法见[layout文档](../usage/layout_template.md)*`date`:最后更新日期，格式如`2022-09-15`*如果不设置：默认会使用文件的最后修改时间，如果是`git`仓库，会自动从`git`获取页面最后一次提交的时间，如果没有`git`或者`git`获取失败则会从文件系统读取最后修改时间（这很可能不准确）。另外如果`update`填写了值，则会采用`update`中最新的修改日期*如果不想显示最后修改日期，通过设置值为`false`来禁用*如果设置了`update`值，仍然会优先使用`date`中的值*`update`:更新历史，会在文章开头生成更新历史表格，格式：```markdownupdate:-date:2022-09-15author:author1version:1.1.0content:更新了xxx-date:2022-08-05author:author2version:1.0.0content:更新了xxx```##Markdown语法Markdown语法可以参考[Markdown语法](./syntax_markdown.md)，由于`jupyter`的语法解析器来自[jupyter官方](https://github.com/jupyter/nbconvert),可能部分`.md`文件已经支持了的语法`jupyter`却不支持，具体可以尝试是否支持。###三级标题####四级标题和Markdown页面相同，详情见[Markdown语法](./syntax_markdown.md)页面###三级标题2####四级标题2##链接[相对路径，README.md文件](../README.md):`../README.md`，会自动转换成`index.html`[相对路径，md文件](./syntax_markdown.md)：`./syntax_markdown.md`，会转成文档的`.html`结尾的链接[绝对路径，http文件](https://storage.googleapis.com/tensorflow_docs/docs-l10n/site/zh-cn/tutorials/quickstart/beginner.ipynb)：`https://。。。/beginner.ipynb`，原链接，不会修改[相对路径，ipynb文件](./syntax_jupyter.ipynb)：`./syntax_jupyter.ipynb`，会转成文档的`.html`结尾的链接##图片![](../assets/images/logo.png)##代码以下是python代码，可以包含执行结果，在本地使用`jupyter`或者[jupyterlab](https://jupyter.org/install)或者`vscode`执行代码后保存即可print(\"hello\")helloprint(\"world\\nworld\")world\nworld##代码输出显示图片代码输出的图片会被集成在页面中：fromPILimportImageimg=Image.open(\"../assets/images/logo.png\")frommatplotlibimportpyplotaspltprint(\"image\")plt.figure()plt.imshow(img)plt.show()print(\"image\")imageimage##表格|Header1|*Header*2||--------|--------||`Cell1`|[Cell2](http://example.com)link||Cell3|**Cell4**|##数学支持`tex`和`Latex`语法，以及`MathML`标签两种写法，*一种是行内内嵌，用`$`符号将方程包起来，比如```markdown质能方程$E=mc^2$大家很熟悉吧```>效果:>质能方程$E=mc^2$大家很熟悉吧*另一种，块方程，用`$$`将方程包起来，比如```markdown$$E=mc^2$$```>效果:>$$>E=mc^2>$$其他例子：常见：```markdownWhen$a\\ne0$,therearetwosolutionsto$ax^2+bx+c=0$andtheyare$$x={-b\\pm\\sqrt{b^2-4ac}\\over2a}.$$```>When$a\\ne0$,therearetwosolutionsto$ax^2+bx+c=0$andtheyare>$$>x={-b\\pm\\sqrt{b^2-4ac}\\over2a}.>$$"}, "/get_started/zh/syntax/syntax_markdown.html": {"title": "markdown 语法", "content": "---\ntitle: markdown 语法\ntags: teedoc, markdown, 语法\nkeywords: teedoc, markdown, 语法\ndesc: teedoc 的 markdown 语法介绍和实例\nupdate:\n  - date: 2021-09-19\n    version: 插件 v2.10.3\n    author: neucrack\n    content:\n      - 元数据头完全支持 yaml 格式\n      - 支持 <code>update</code> 元数据头，用于生成更新历史表格\n      - 支持 <code>{#id}</code> 语法自定义标题 id\n      - 支持 <code>tabset</code> 语法\n      - 支持 <code>details</code> 语法\n      - 支持上下标语法\n---\n\n> 本文是使用`Markdown`编写的文档，使用`teedoc`生成的页面效果， `Markdown`文件源码见[这里](https://github.com/teedoc/teedoc.github.io/blob/main/docs/get_started/zh/syntax/syntax_markdown.md)\n\n## Markdown 使用简介\n\n放在文档目录下面的文件，如果是可是识别的文件，比如`*.md`， 则会转换成`*.html`， 如果不能识别，比如`*.jpg`， 则会原封不动地拷贝到输出文件夹（`out`）中。\n\n默认 `Markdown` 解析由插件`teedoc-plugin-markdown-parser`完成， 模板工程默认使用了该插件。\n\n如果你需要将文档链接到左侧目录， 则在`sidebar.json`或者`sidebar.yaml`中配置。\n\n如果你使用过`Markdown`， 也强烈建议花 2 分钟浏览一遍！\n\n\n## Markdown 基本文件内容格式\n\n需要先在`site_config.json`中确认有`markdown`解析插件启用了，比如`teedoc-plugin-markdown-parser`。\n\n在`config.json`对应的目录下建立文件夹或者文件， 比如`get_started/zh/syntax/syntax_markdown.md` (`README.md`最终会生成`index.html`)， 注意要使用`UTF-8`文件编码（不要使用`Windows`默认的记事本），推荐使用[vscode](https://code.visualstudio.com/) + `Markdown Preview Enhanced`插件, 默认文件就会是`UTF-8`编码，如果不是也可以在右下角点击编码并点击弹出的选项`通过编码保存`选择`UTF-8`即可更改编码。\n![vscode_status_bar](../../assets/images/vscode_status_bar.png)\n\n\n### Markdown 元数据头\n\n每个`md`文件可以添加一个头，也叫`metadata`（中文叫元数据），通过这些键值来设置文章信息，格式为`yaml`格式，当然这个文件头是可选的，也可以不写\n\n```markdown\n---\ntitle: markdown 语法\ntags: teedoc, markdown, 语法\nkeywords: teedoc, markdown, 语法\ndesc: teedoc 的 markdown 语法介绍和实例\nid: zh_readme\nclass: zh_readme\n# 以 # 号开头表示注释\n---\n```\n\n* `title`: 文章的标题，如果没有元数据头的话，可以使用\n```markdown\n# 文章标题\n```\n或者\n```markdown\n文章标题\n===\n```\n\n* `keywords`: 关键词，多个关键词用英文逗号`,` 隔开，会被添加到`html`头中，方便搜索引擎爬取，不会显示到页面。也可以用`yaml`列表的格式写\n```markdown\nkeywords:\n  - teedoc\n  - markdown\n  - 语法\n```\n* `desc`: 页面描述，会被添加到`html`头中，不会在页面显示，方便搜索引擎爬取\n* `tags`： 文章标签，会显示到页面，多个标签用英文逗号`,` 隔开，也可以用`yaml`列表的格式写，同`keywords`\n* `id`: 页面`id`， 会被添加到`html`标签中，比如`<html id=\"zh_readme\">...</html>`, 通常不需要，一般在对某个页面单独自定义`css`的时候可能会用上，会覆盖`config.json`中的设置\n* `class`: 页面`class`,多个用英文逗号`,`隔开，可以不设置，会覆盖`config.json`中的设置。比如可以通过设置这个值来达到设置特定页面的`css`样式。具体支持的样式见[主题插件的文档](../plugins/themes.html)\n* `layout`: 页面使用的布局模板, 默认会使用主题插件里面的配置,如果你需要自定义此页面的布局, 可以设置这个参数, 路径相对于`site_config`中的`layout_root_dir`设置的路径, `layout_root_dir` 默认为`layout`, 所以要使用`layout/special_layout.html` 只需要填写`special_layout.html`. 布局模板语法见[layout 文档](../usage/layout_template.html)\n* `date`: 最后更新日期，格式如`2022-09-15`\n  * 如果不设置：默认会使用文件的最后修改时间，如果是`git`仓库，会自动从`git`获取页面最后一次提交的时间，如果没有`git`或者`git`获取失败则会从文件系统读取最后修改时间（这很可能不准确）。另外如果`update`填写了值，则会采用`update`中最新的修改日期\n  * 如果不想显示最后修改日期，通过设置值为`false`来禁用\n  * 如果设置了`update`值，仍然会优先使用`date`中的值\n* `update`: 更新历史，会在文章开头生成更新历史表格，格式：\n```markdown\nupdate:\n  - date: 2022-09-15\n    author: author1\n    version: 1.1.0\n    content: 更新了xxx\n  - date: 2022-08-05\n    author: author2\n    version: 1.0.0\n    content: 更新了xxx\n```\n\n### Markdown 文件内容\n\n内容就是使用`Markdown`语法进行编写，因为大标题会被转成`<h1>`标签，所以内容中建议从二级标题开始，这样一个页面只有一个`<h1>`标签，方便搜索引擎爬取，比如\n\n```markdown\n---\ntitle: teedoc\n---\n\n## 标题一\n\n内容。。。\n\n## 标题二\n\n内容。。。\n```\n\n## 标题\n\n### 三级标题\n\n#### 四级标题\n\n#### 四级标题2\n\n#### 四级标题3\n\n##### 五级标题\n\n###### 六级标题\n\n### 标题自定义id {#custom-id}\n这里自定义 `id` 为 `custom-id`\n\n最多 6 级标题\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    ### 三级标题\n\n    #### 四级标题\n\n    #### 四级标题2\n\n    #### 四级标题3\n\n    ##### 五级标题\n\n    ###### 六级标题\n\n    ### 标题自定义id {#custom-id}\n    这里自定义 `id` 为 `custom-id`\n    ```\n\n## 强调，斜体，删除线\n\n我们只知道**地球**具有让人类生存的环境，还有~~火星~~，也许还有*其它星球*。\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    我们只知道**地球**具有让人类生存的环境，还有~~火星~~，也许还有*其它星球*。\n    ```\n\n## 分隔符\n\n分隔符\n```markdown\n---\n***\n```\n\n---\n***\n\n## 链接\n\n[相对路径， README.md 文件](../index.html): `../README.md`， 会自动转换成`index.html`\n[相对路径， md 文件](./syntax_markdown.html)： `./syntax_markdown.md`， 会转成文档的 `.html` 结尾的链接\n[绝对路径， http 文件](https://storage.googleapis.com/tensorflow_docs/docs-l10n/site/zh-cn/tutorials/quickstart/beginner.ipynb)： `https://。。。/beginner.ipynb`，原链接，不会修改\n[相对路径， ipynb 文件](./syntax_jupyter.html)： `./syntax_jupyter.ipynb`， 会转成文档的 `.html` 结尾的链接\n\n.. details::Markdown 源码，点击展开\n   ```markdown\n   [相对路径， README.md 文件](../index.html)\n   [相对路径， md 文件](./syntax_markdown.html)\n   [绝对路径， http 文件](https://storage.googleapis.com/tensorflow_docs/docs-l10n/site/zh-cn/tutorials/quickstart/beginner.ipynb)\n   [相对路径， ipynb 文件](./syntax_jupyter.html)\n   ```\n\n## 列表\n\n列表项:\n* 包子\n* 馒头\n* 茶叶蛋\n\n* aaaaaaa\n  * 二级列表\n  * 二级列表\n  * 二级列表\n    * 三级列表\n    * 三级列表\n* bbbbbb\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    列表项:\n    * 包子\n    * 馒头\n    * 茶叶蛋\n\n    * aaaaaaa\n      * 二级列表\n      * 二级列表\n      * 二级列表\n        * 三级列表\n        * 三级列表\n    * bbbbbb\n    ```\n\n## 代码段\n\n这是一段行内代码`print(\"hello\")`，或者强调`teedoc`\n```python\nprint(\"hello\")\n\nprint(\"world\")\n```\n\n```c\n#include \"stdio.h\"\n\nint main()\n{\n    printf(\"hello world\");\n}\n```\n\n.. details::Markdown 源码，点击展开\n   ```markdown\n        这是一段行内代码`print(\"hello\")`，或者强调`teedoc`\n        ```python\n          print(\"hello\")\n\n          print(\"world\")\n        ```\n\n        ```c\n          #include \"stdio.h\"\n\n          int main()\n          {\n              printf(\"hello world\");\n          }\n        ```\n   ```\n\n## 注释(引用块)\n\n下面是一段注释\n> 这里是一段注释 (`<blockquote></blockquote>`)\n> 这是注释的第二行\n```python\n# 这里是注释里面的代码段\nprint(\"hello\")\n```\n\n\n> 注释\n>> 注释嵌套\n>> 注释嵌套\n\n在块引用中使用 markdown 语法\n\n> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n>  *Everything* is going according to **plan**.\n> ```c\n> printf(\"hello\");\n> ```\n\n.. details::Markdown 源码，点击展开\n   ```markdown\n        下面是一段注释\n        > 这里是一段注释 (`<blockquote></blockquote>`)\n        > 这是注释的第二行\n        ```python\n        # 这里是注释里面的代码段\n        print(\"hello\")\n        ```\n        > 注释\n        >> 注释嵌套\n        >> 注释嵌套\n\n        在块引用中使用 markdown 语法\n\n        > #### The quarterly results look great!\n        >\n        > - Revenue was off the chart.\n        > - Profits were higher than ever.\n        >\n        >  *Everything* is going according to **plan**.\n        > ```c\n        > printf(\"hello\");\n        > ```\n   ```\n\n## 警告\n\n下面是一段警告信息\n\n>! 这是一段警告信息(`<blockquote class=\"spoiler\"></blockquote>`)\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    >! 这是一段警告信息(`<blockquote class=\"spoiler\"></blockquote>`)\n    ```\n\n## Emoji 表情\n\n暂不支持`emoji`语法，但是可以直接从`emoji`表情大全拷贝表情到文档，比如:\n🍊 🍇 😀 😅 😇\n\n## 上下标\n\nH~2~O， y = x^2^\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    H~2~O， y = x^2^\n    ```\n\n## 图片\n\n资源文件会被拷贝到输出文件夹（`out`）, 所以最重要的是怎么在文档中引用\n* 最简单和推荐的方法\n  使用相对路径：\n  资源文件可以放在文档对应的目录，比如文档`docs/get_started/zh`， 可以创建`docs/get_started/zh/assets/images/logo.png`,\n  然后在`docs/get_started/zh/README.md`中使用相对路径引用，即`![](assets/images/logo.png)`\n* 进阶方法\n  这种情况适用于多份文档都引用同一个文件夹下（`url`）的资源， 方便维护多份文档，比如多语言翻译，或者减少 `CDN` 流量消耗。\n  使用文档路径外的资源，在`site_config.json` 中配置\n  ```json\n  {\n      \"route\": {\n          \"docs\": {\n              \"/get_started/zh/\": \"docs/get_started/zh\",\n          },\n          \"assets\": {\n              \"/get_started/assets/\": \"docs/get_started/assets\"\n          }\n      }\n  }\n  ```\n  这个设置会将`docs/get_started/assets`整个目录拷贝为`/get_started/assets`\n  所以只需要在`docs/get_started/zh/README.md`中使用相对路径引用，即`![](../assets/images/logo.png)`\n\n\n要显示这张图片，需要在`site_config.json`中设置`route`键值\n\n![这是一张图片](../../assets/images/logo.png)\n![这是一张图片](../assets/images/logo.png)\n\n![这是一张图片](../../assets/images/logo.png)![这是一张图片](../assets/images/logo.png)\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    ![这是一张图片](../../assets/images/logo.png)\n    ![这是一张图片](../assets/images/logo.png)\n\n    ![这是一张图片](../../assets/images/logo.png)![这是一张图片](../assets/images/logo.png)\n    ```\n\n## 视频\n\n直接使用 HTML 的 `video` 标签：\n\n```html\n<video src=\"https://****.com/***.mp4\" controls=\"controls\" preload=\"auto\">your brower not support play video</video>\n```\n\n这里没有放视频， 所以是空白, 放入正确的视频就可以播放了\n\n<video src=\"\" controls=\"controls\" preload=\"auto\">your brower or site not support play video</video>\n\n\n## iframe 嵌入网页\n\n一般视频平台分享的代码直接能使用，可以稍微设置一下宽高\n\n<iframe src=\"//player.bilibili.com/player.html?aid=52613549&bvid=BV144411J72P&cid=92076022&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width:43vw;height:34vw;min-width: 85%;\"> </iframe>\n\n.. details::Markdown 源码，点击展开\n    ```html\n    <iframe src=\"//player.bilibili.com/player.html?aid=52613549&bvid=BV144411J72P&cid=92076022&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width:43vw;height:34vw;min-width: 85%;\"> </iframe>\n    ```\n\n## 引用标记\n\n我能干饭我自豪。[^干饭人]\n\n[^干饭人]: 老子说道\n这会在文章末尾进行注解\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    我能干饭我自豪。[^干饭人]\n\n    [^干饭人]: 老子说道\n    这会在文章末尾进行注解\n    ```\n\n## 表格\n\n| Header 1 | *Header* 2 |\n| -------- | -------- |\n| `Cell 1` | [Cell 2](http://example.com) link |\n| Cell 3 | **Cell 4** |\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    | Header 1 | *Header* 2 |\n    | -------- | -------- |\n    | `Cell 1` | [Cell 2](http://example.com) link |\n    | Cell 3 | **Cell 4** |\n    ```\n\n## 任务列表\n\n- [x] 任务1\n- [x] 任务2\n- [ ] 任务3\n- [ ] 任务4\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    - [x] 任务1\n    - [x] 任务2\n    - [ ] 任务3\n    - [ ] 任务4\n    ```\n\n## 标题链接(页内跳转)\n\n\n比如要跳转到标题[iframe 嵌入网页](#iframe-嵌入网页), 只需\n```markdown\n[iframe 嵌入网页](#iframe-嵌入网页)\n```\n\n这里空格使用了减号`-`替换。\n另外，如果标题也可以自定义`id`，比如\n```markdown\n## iframe 嵌入网页 {#iframe-embed}\n```\n\n\n\n## HTML\n\n能直接在`md`文件中写`HTML`：\n\n<div class=\"hello\">\nhello <br/> <img src=\"../../assets/images/logo.png\"/>\n</div>\n\n.. details::Markdown 源码，点击展开\n   注意没有空行\n   ```html\n   <div class=\"hello\">\n   hello  <img src=\"../../assets/images/logo.png\"/>\n   </div>\n   ```\n\n\n## 数学\n\n支持`tex`和`Latex`语法，以及`MathML`标签\n\n两种写法，\n* 一种是行内内嵌，用`$`符号将方程包起来，比如\n\n质能方程 $E=mc^2$大家很熟悉吧\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    质能方程 $E=mc^2$大家很熟悉吧\n    ```\n\n* 另一种，块方程，用`$$`将方程包起来，比如\n\n$$\nE=mc^2\n$$\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    $$\n    E=mc^2\n    $$\n    ```\n\n其他例子：\n常见：\n\nWhen $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\n$$\nx = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\n$$\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\n    $$\n    x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\n    $$\n    ```\n\n除法式：\n\n$$\n\\require{enclose}\n\\begin{array}{r}\n                13  \\\\[-3pt]\n4 \\enclose{longdiv}{52} \\\\[-3pt]\n     \\underline{4}\\phantom{2} \\\\[-3pt]\n                12  \\\\[-3pt]\n     \\underline{12}\\\\0\n\\end{array}\\\\\n$$\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    $$\n    \\require{enclose}\n    \\begin{array}{r}\n                    13  \\\\[-3pt]\n    4 \\enclose{longdiv}{52} \\\\[-3pt]\n        \\underline{4}\\phantom{2} \\\\[-3pt]\n                    12  \\\\[-3pt]\n        \\underline{12}\\\\0\n    \\end{array}\\\\\n    $$\n    ```\n\n加框：\n\n$$\n\\bbox[#cde, 3px,border:1px solid blue]{y=x^2-1}\n$$\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    $$\n    \\bbox[#cde, 3px,border:1px solid blue]{y=x^2-1}\n    $$\n    ```\n\n## mermaid 支持\n\n使用 mermaid 可以画很多类型的图表， 详细的语法和支持请看[官网](https://mermaid-js.github.io/)\n\n```mermaid\nsequenceDiagram\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n      John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n```\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n        ```mermaid\n        sequenceDiagram\n          Alice->>John: Hello John, how are you?\n          loop Healthcheck\n              John->>John: Fight against hypochondria\n          end\n          Note right of John: Rational thoughts!\n          John-->>Alice: Great!\n          John->>Bob: How about you?\n          Bob-->>John: Jolly good!\n        ```\n    ```\n    或者直接 `html`:\n      ```html\n      <div class=\"mermaid\">\n      sequenceDiagram\n        Alice->>John: Hello John, how are you?\n        loop Healthcheck\n            John->>John: Fight against hypochondria\n        end\n        Note right of John: Rational thoughts!\n        John-->>Alice: Great!\n        John->>Bob: How about you?\n        Bob-->>John: Jolly good!\n      </div>\n    ```\n\n## 标签页（tabset）支持\n\n> 因为不是标准 Markdown 语法，目前仅 teedoc 支持，所以根据你的需求选择使用\n> 当然也欢迎将格式推广到其它解析器\n\n效果：\n\n.. tabset::标签页标题（可选）\n    :id: tabset1\n\n    ## 标签一\n\n    内容一，可以使用 Markdown 语法\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n    ## 标签二\n\n    内容二，可以使用 Markdown 语法\n    ```java\n      public class Main {\n          public static void main(String[] args) {\n              System.out.println(\"Hello World\");\n          }\n      }\n    ```\n\n在选中一个页面中的某个标签时，会自动选中相同`id`的标签页中的相应标签，不相同`id`或者没设置`id`则不会。\n\n.. tabset::\n    :id: tabset1\n\n    ## 标签一\n\n    内容一，可以使用 Markdown 语法\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n    ## 标签二\n\n    内容二，可以使用 Markdown 语法\n    ```java\n      public class Main {\n          public static void main(String[] args) {\n              System.out.println(\"Hello World\");\n          }\n      }\n    ```\n\n.. tabset::\n\n    ## 标签一\n\n    内容一，可以使用 Markdown 语法\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n    ## 标签二\n\n    内容二，可以使用 Markdown 语法\n    ```java\n      public class Main {\n          public static void main(String[] args) {\n              System.out.println(\"Hello World\");\n          }\n      }\n    ```\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    效果：\n    （注意这里需要空一行）\n    .. tabset::标签页标题（可选）\n        :id: tabset1\n        (注意必须和上面的 tabset 对齐或者更多空格)\n        ## 标签一\n\n        内容一，可以使用 Markdown 语法\n        ```kotlin\n          fun main() {\n              println(\"Hello World\")\n          }\n        ```\n\n        ## 标签二\n\n        内容二，可以使用 Markdown 语法\n        ```java\n          public class Main {\n              public static void main(String[] args) {\n                  System.out.println(\"Hello World\");\n              }\n          }\n        ```\n    ```\n\n## 详情页（details）支持\n\n> 因为不是标准 Markdown 语法，目前仅 teedoc 支持，所以根据你的需求选择使用\n> 当然也欢迎将格式推广到其它解析器\n\n这是对 `HTML5` `details`标签的一种 `Markdown` 语法， `HTML`这样写:\n```html\n<details>\n  <summary>标题，点击展开</summary>\n  <div class=\"details-content\">\n    <p>这里是内容</p>\n  </div>\n</details>\n```\n\n效果：\n\n.. details::标题，点击展开\n\n    内容一，可以使用 Markdown 语法\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n.. details::标题，默认展开\n    :open: true\n\n    内容一，可以使用 Markdown 语法\n    ```kotlin\n      fun main() {\n          println(\"Hello World\")\n      }\n    ```\n\n.. details::Markdown 源码，点击展开\n    ```markdown\n    .. details::标题，点击展开\n\n        内容一，可以使用 Markdown 语法\n        ```kotlin\n          fun main() {\n              println(\"Hello World\")\n          }\n        ```\n\n    .. details::标题，默认展开\n        :open: true\n\n        内容一，可以使用 Markdown 语法\n        ```kotlin\n          fun main() {\n              println(\"Hello World\")\n          }\n        ```\n    ```"}, "/get_started/zh/index.html": {"title": "开源静态文档网站生成工具 teedoc", "content": "---\ntitle: 开源静态文档网站生成工具 teedoc\nkeywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 静态博客, 开源文档生成工具\ndesc: teedoc，开源静态文档网站生成工具, 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 用于个人或企业建站，建博客，建资料库，wiki等\ndate: 2022-08-1\n---\n\n\n官网: [teedoc.neucrack.com](https://teedoc.neucrack.com/) 或 [teedoc.github.io](https://teedoc.github.io/)\n本文档源文件: [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io)\n源码: [https://github.com/teedoc/teedoc](https://github.com/teedoc/teedoc) 如果你喜欢这个项目，请务必登录 [github](https://github.com/teedoc/teedoc) 给项目点个 **star**\n\n将 `Markdown` 或者 `Jupyter Notebook` 格式的文档转换为 `HTML` 静态网页\n\n以下场景可使用`teedoc`：\n* 建文档网站，并且最好支持放多份文档（比如你有一本叫`Python学习`和`C++学习`两本书，它们都有单独的目录, `teedoc`则是书库）\n* 文档和网页页面共存，支持自定义`HTML`页面\n* 建`WiKi`网站\n* 建个人或者企业知识库\n* 建个人或者企业网站\n* 博客\n\n\n如果你在使用过程中遇到了问题, 可以在[这里](https://github.com/teedoc/teedoc/issues) (需要先注册并登录 github) 寻找相似问题, 或者创建 issue\n\n也可以加 [QQ群 566531359](https://jq.qq.com/?_wv=1027&k=2FdCPllm) 讨论\n\n\n## 特性\n\n- [x] 多文档支持， 将多种文档和网页放到同一个站点\n- [x] 使用简单， 跨平台，只依赖 `Python3`\n- [x] 不需要数据库，网站全静态页面\n- [x] 部署简单， 生成的网站是全静态页面，直接拷贝到服务器或者上传到三方机构即可部署\n- [x] 书写简单，使用 [Markdown 语法](./syntax/syntax_markdown.html)编写\n- [x] [Jupyter notebook 支持](./syntax/syntax_jupyter.html)\n- [x] HTML 支持，可直接使用 HTML 编写页面， 并且支持 Jinja2 模板语法，自由度大\n- [x] 插件支持，默认提供了一些插件比如顶栏通知、搜索、评论、统计、google翻译页面等\n- [x] 多主题支持（由插件实现）\n- [x] 通过 css 控制精确到页的样式（通过自定义每页的 id 和 class 实现）\n- [x] 多级目录支持（无穷级）\n- [x] 多语言支持（手动翻译）(国际化/i18n)\n- [x] 多语言支持（翻译插件）\n- [x] 多版本支持（实现方法同多语言）\n- [x] 搜索支持\n- [x] SEO 友好\n- [x] 实时预览更改\n- [x] 并行构建，更快的构建速度\n- [x] 博客支持\n- [x] gitbook 切换过来友好, 只需要设置好 `route` 和使用命令(`summary2yaml`)转换目录文件(`SUMMARY.md`)即可\n- [x] 评论(插件), 比如 `gitalk`\n\n## 演示\n\n[本网站](https://teedoc.github.io/)即采用 `teedoc` 生成，你现在看到的就是生成后的网站的样子。\n\n另外还有其它网站使用了`teedoc`，具体请看[这里](./usage/sites.html)\n\n\n## 类似的工具\n\n实际上这种类型的工具已经有很多了，但是每一个又稍微不同，按照自己的需求选择一个就好了\n\n如果你有选择困难症，那么符合以下部分条件，都建议使用 teedoc：\n* 用来做文档网站，或者想把企业或组织官网+手里的多份文档统一放到一个网站？还各种语言的网站？ 用 `teedoc` 吧\n* 使用 `Jupyter notebook` 写文档或代码？ 果断选择 `teedoc`\n* 功能符合你的需求吗？\n* 界面符合你的审美吗（可以自定义 `css`， 或者换主题插件）\n* 对 `Python` 熟悉？ 可以随时自定义插件和功能\n\n其它类似工具：\n* `docusaurus`: `teedoc` 的 `UI` 布局几乎和它类似，不过它使用 `ract` 写的， `teedoc` 是原生 `js`, 如果你精通 `ract` 可以考虑用这个，新手可能用起来比较吃力\n* `gitbook`: 曾经很好用的工具，但是官方不维护了，现在只有商业化网站了，转向商业了，不建议再使用，特别是国内可能无法访问\n* `docsify`: 只需要一个页面，`markdown` 在浏览器渲染，而不是预先渲染成 `HTML`， 好处就是轻量，但是 `SEO` 不太友好，可以用它的 `SSR` 功能， `nodejs` 编写\n* `readthedocs(Sphinx)`: 其实是用了用 `Sphinx` 做为生成工具，`Python` 官网文档就是这个工具生成的， 很多开源项目使用的工具，`readthedocs` 只是一个公开文档的网站，你不用自己搭建网站，注册登录就可以开始写文档，对 `RST` 格式支持友好，如果你的文档比较单一可以考虑使用\n* `mkdoc`: 也是一个 `python` 写的工具，简单易上手，插件也多，如果你的文档是单一语言的文档，可以使用这个工具\n\n\n## 一些使用建议\n\n* 在 footer 添加 [使用 teedoc 生成](https://github.com/teedoc/teedoc)， 帮助更多人发现 teedoc，促进项目的成长\n* 使用模板项目开始一个新的文档项目，可以先跑起来，然后再根据自己的需求修改，这样上手更快哦\n\n## 快速开始\n\n查看[快速开始](./usage/quick_start.html)来安装并使用吧！"}}